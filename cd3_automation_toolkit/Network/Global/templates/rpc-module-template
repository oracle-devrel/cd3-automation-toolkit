{% if count == 0 %}
// Copyright (c) 2021, 2022, Oracle and/or its affiliates.

############################
# Global Services
# Remote Peering Connection - tfvars
# Allowed Values:
# compartment_id can be the ocid or the name of the compartment hierarchy delimited by double hiphens "--"
# Example : compartment_id = "ocid1.compartment.oc1..aaaaaaaahwwiefb56epvdlzfic6ah6jy3xf3c" or compartment_id = "Security--Prod" where "Security" is the parent of "Prod" compartment
# Sample import command for remote peering connection:
# terraform import "module.rpc[\"<<rpc terraform variable name>>\"].oci_core_remote_peering_connection.<<requester_region>>_<<accepter_region>>_requester_rpc" <<requester rpc ocid>>
# terraform import "module.rpc[\"<<rpc terraform variable name>>\"].oci_core_remote_peering_connection.<<accepter_region>>_<<requester_region>>_accepter_rpc" <<accepter rpc ocid>>
############################

drg_other_attachments= {
  # Remote Peering Connection map #
  ##Add New RPC for global here##
}

{% else %}
  {{ rpc_tf_name }} = {
        requester_compartment_id = "{{ requester_compartment_name }}"
        accepter_compartment_id  = "{{ accepter_compartment_name }}"
        display_name             = "{{ rpc_name }}"
        requester_region         = { "region" : "{{ requester_region }}" }
        accepter_region          = { "region" : "{{ accepter_region }}" }
        requester_drg_name       = "{{ requester_drg_name }}"
        accepter_drg_name        = "{{ accepter_drg_name }}"
        requester_drg_rt_name    = "{{ requester_drg_rt_name }}"
        accepter_drg_rt_name     = "{{ accepter_drg_rt_name }}"
        accepter_rpc_display_name= "{{ accepter_rpc_display_name }}"

        {% if description  != "" %}
        description         = "{{ rpc_description }}"
        {% else %}
        description         = null
        {% endif %}


    {#  ##Do not modify below this line##  #}
    {#                                     #}
    {#  ###Section for adding Defined and Freeform Tags###  #}
    {% if defined_tags and defined_tags != 'nan' and defined_tags != '' %}
      {% if defined_tags[0] %}
        defined_tags = {
        {% for tags in defined_tags  %}
            {% if not loop.last %}
                "{{ tags[0]  }}"= "{{ tags[1] }}" ,
            {% else %}
                "{{ tags[0]  }}"= "{{ tags[1] }}"
            {% endif %}
        {% endfor %}
        }
      {% else %}
        defined_tags = {}
        {% endif %}
       {% else %}
        defined_tags = {}
       {% endif %}
            {% if freeform_tags and freeform_tags != 'nan' and freeform_tags != '' %}
                {% if freeform_tags[0] %}
        freeform_tags = {
                    {% for tags in freeform_tags %}
                        {% if not loop.last  %}
                "{{ tags[0] }}"="{{ tags[1] }}",
                        {% else %}
                "{{ tags[0] }}"="{{ tags[1] }}"
                        {% endif %}
                    {% endfor %}
                    }
                {% else %}
        freeform_tags = {}
                {% endif %}
            {% else %}
        freeform_tags = {}
            {% endif %}
    {#  ###Section for adding Defined and Freeform Tags ends here###  #}
      },

{% endif %}