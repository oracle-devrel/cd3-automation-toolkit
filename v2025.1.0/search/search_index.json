{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting Started","text":"<p>Tip</p> <p>CD3 Automation toolkit can be used either via CLI or Jenkins.  \ud83d\udcd6 Detailed documentation and videos are provided for both options. Please check the left    panel for navigation.</p> <ul> <li> <p> Overview</p> <p>Introduction Architecture Services Supported Excel Templates</p> </li> <li> <p> Installing CD3</p> <p>Prerequisites Launch the container Launch Resource Manager Stack Launch from Local Desktop Connect CD3 Container to OCI</p> </li> <li> <p> Use CD3 with CLI</p> <p>Before you Begin Create Resources from OCI using CLI (Greenfield Workflow) OPA integration Export Resources from OCI using CLI (Non-Greenfield Workflow)</p> </li> <li> <p> Use CD3 with Jenkins</p> <p>Before You Begin Overview Create Resources from OCI using Jenkins (Greenfield Workflow) Provision multiple Services Together Export Resources from OCI using Jenkins (Non-Greenfield Workflow) Commit Local changes to GIT </p> </li> <li> <p> MUST READ</p> <p>Manage Network Manage Compute Manage OCI Network Firewall</p> </li> <li> <p> Additional Features</p> <p>Grouping generated TF files OCI Resource Manager Upload Support for Additional Attrs CD3 Validator Migrate jobs to user's Jenkins Remote Management of Terraform State</p> </li> <li> <p> Troubleshooting</p> <p>Expected Behaviour Common Issues FAQs</p> </li> <li> <p> External References</p> <p>Learning Videos Tutorials</p> </li> </ul>"},{"location":"ReleaseInfo/","title":"ReleaseInfo","text":""},{"location":"ReleaseInfo/#release-info","title":"Release-Info","text":""},{"location":"ReleaseInfo/#automation-toolkit-release-v10-docker-image-release-v60","title":"Automation Toolkit Release v10 &amp; Docker Image Release v6.0","text":""},{"location":"ReleaseInfo/#date-jan-13th-2023","title":"Date - Jan 13<sup>th</sup>, 2023","text":"<p>This is a major release with below updates:</p> <ol> <li>Support for new services - OKE and SCH. New tab for 'OKE' is included in CD3-CIS-template.xlsx. New tab for 'ServiceConnectors' is added to CD3-CIS-ManagementServices-template.xlsx.</li> <li>Added the script to fetch regions subscribed to the tenancy. This will be executed automatically every time setUpOCI is executed.</li> <li>Introduced a new option in setUpOCI menu called 'CD3 Services' to execute 'Fetch Compartments' and 'Fetch Protocols Scripts.</li> <li>Modified the setUpOCI workflow to prompt the user to execute 'Fetch Compartments' script in case it has not been executed previously.</li> <li>Bug fixes wrt Instances, DB Systems</li> </ol>"},{"location":"ReleaseInfo/#automation-toolkit-release-v921-docker-image-release-v521","title":"Automation Toolkit Release v9.2.1 &amp; Docker Image Release v5.2.1","text":""},{"location":"ReleaseInfo/#date-nov-30th-2022","title":"Date - Nov 30<sup>th</sup>, 2022","text":"<p>This is a minor release with below updates:</p> <ol> <li>Sample terraform import command included as part of output tfvars file for each OCI resource managed by Toolkit.</li> <li>Split Export of Network options to chose export of different components separately eg Major Objects, Subnets, NSGs etc.</li> <li>Include support for Marketplace Images for Instances.</li> <li>Few bug fixes/enhancements wrt export of Instances/NSGs, making null values for NSGs/Instances optional in tfvars</li> </ol>"},{"location":"ReleaseInfo/#previous-versions-released-before-making-it-available-on-github","title":"Previous Versions released before making it available on GitHub","text":""},{"location":"ReleaseInfo/#automation-toolkit-release-v92-docker-image-release-v52","title":"Automation Toolkit Release v9.2 &amp; Docker Image Release v5.2","text":""},{"location":"ReleaseInfo/#date-oct-10th-2022","title":"Date - Oct 10<sup>th</sup>, 2022","text":"<p>This is a major release with existing services converted into terraform modules and also bug fixes.</p> <ol> <li>Terraform modules for FSS and ADB(Modified the input sheet for ADB to include more features)</li> <li>Included new service - Network Load Balancers</li> <li>Enhanced Tags sheet to include Default Tags for Multiple Compartments.</li> <li>Enhanced CD3 Validator for FSS, NSGs column for each tab.</li> <li>Included CIS compliance checker script as part of setUpOCI Menu option</li> <li>Cleanup of variables_.tf file <li>Updated CD3 templates in example folder with latest CIS data</li> <li>Bug fixes wrt multiple services like Instances, Notifications etc</li> <li>Introduced documentation folder containing terraform and toolkit user guide in outdir of each customer</li>"},{"location":"ReleaseInfo/#automation-toolkit-release-v91-docker-image-release-v51","title":"Automation Toolkit Release v9.1 &amp; Docker Image Release v5.1","text":""},{"location":"ReleaseInfo/#date-jun-13th-2022","title":"Date - Jun 13<sup>th</sup>, 2022","text":"<p>This is a major release with existing services converted into terraform modules and also bug fixes.</p> <ol> <li>Terraform Modules for Instances, Block Volumes, Tags, CIS features, LBaas.</li> <li>Introduced new columns for PV encryption in Instances/Block Volumes.</li> <li>Introduced new columns for Min/Max bandwidth for flexible shapes load balancers, reserved public IP. Support for OCI certificate management certificates for Listeners, BackendSets.</li> <li>Removed support for subnet_name_attach_cidr parameter from CD3 excel's 'VCN Info' sheet.</li> <li>Bug fixes</li> </ol>"},{"location":"ReleaseInfo/#automation-toolkit-release-v902-docker-image-release-v502","title":"Automation Toolkit Release v9.0.2 &amp; Docker Image Release v5.0.2","text":""},{"location":"ReleaseInfo/#date-april-29-2022","title":"Date - April 29, 2022","text":"<p>This is a minor release with bug fixes related to Networking and Identity Policies.</p>"},{"location":"ReleaseInfo/#automation-toolkit-release-v901-docker-image-release-v501","title":"Automation Toolkit Release v9.0.1 &amp; Docker Image Release v5.0.1","text":""},{"location":"ReleaseInfo/#date-april-9-2022","title":"Date - April 9, 2022","text":"<p>This is a minor release.</p> <ol> <li>Bug fix for data after END tag in DRGRouteRulesinOCI sheet.</li> <li>Bug fix for tenancies having both DRGv1 and DRGv2</li> <li>Bug fix for VCN Flow Log output</li> <li>Bug fix for NSG ICMP rules not having only ICMP type</li> <li>Modified output template files to adjust the spacing</li> </ol>"},{"location":"ReleaseInfo/#automation-toolkit-release-v90-docker-image-release-v50","title":"Automation Toolkit Release v9.0 &amp; Docker Image Release v5.0","text":""},{"location":"ReleaseInfo/#date-march-21-2022","title":"Date - March 21, 2022","text":"<p>This is a major release.</p> <ol> <li>Terraform output files in modules format for IAM, Network, Database(DBSystems and Exa) and Management Services(Events, Notifications) components.</li> <li>Added support for Alarms with output files as terraform modules.</li> <li>Updated the excel sheet templates as per latest CIS compliance for IAM compartments, groups, policies, events, notifications and alarms.</li> <li>Added support for multiple VCN CIDRs in VCNs sheet.</li> <li>Added support for same VCN names across regions.</li> <li>Added export for Dedicated VM Hosts and Database tabs as terraform flat files</li> <li>Modified Database tabs to include new features.</li> <li>Restructured the code directories and setUpOCI menu options.</li> <li>Added drop downs in the excel sheet columns to make excel filling easier.</li> <li>Updated OCI_regions to include all regions</li> <li>Deprecation of OCSWorkVM.</li> </ol>"},{"location":"ReleaseInfo/#automation-toolkit-release-v803-docker-image-release-v403","title":"Automation Toolkit Release v8.0.3 &amp; Docker Image Release v4.0.3","text":""},{"location":"ReleaseInfo/#date-nov-26-2021","title":"Date - Nov 26 , 2021","text":"<p>This is a minor release.</p> <ol> <li>Bug fix for Availability Domain values while export of block volumes, FSS</li> <li>Bug fix for DRG Route Rules export error - 'Too Many requests'</li> <li>Bug fix for export of Tags having spaces in the values</li> </ol>"},{"location":"ReleaseInfo/#automation-toolkit-release-v802-docker-image-release-v402","title":"Automation Toolkit Release v8.0.2 &amp; Docker Image Release v4.0.2","text":""},{"location":"ReleaseInfo/#date-sep-30-2021","title":"Date - Sep 30 , 2021","text":"<p>This is a minor release.</p> <ol> <li>Bug fix for End Tag in NSGs tab</li> <li>Bug fix for export of LBR hosted in two subnets in different compartments.</li> <li>Bug fix for terraform variable name for route table names</li> <li>Allow case insensitive for Security Rule Types/Protocols</li> <li>Allow flexible shapes in LBR CD3</li> </ol>"},{"location":"ReleaseInfo/#automation-toolkit-release-v80-docker-image-release-v40","title":"Automation Toolkit Release v8.0 &amp; Docker Image Release v4.0","text":""},{"location":"ReleaseInfo/#date-jul-27-2021","title":"Date - Jul 27 , 2021","text":"<p>This is a major release.</p> <ol> <li>Support for DRGv2 - added 2 new sheets to CD3: DRGs and DRGRouteRulesinOCI</li> <li>Backward compatible to support DRGv1</li> <li>Updated CD3 Validator to include validation for DRGs tab</li> <li>Optimized the code for export of objects</li> <li>Bug fix for export of SecRules and RouteRules for all compartments</li> <li>Updated the toolkit to support user access to a single compartment by allowing creation of sub-compartments under that only.</li> <li>Included export of additional objects for Instances and Block Volumes</li> <li>CD3 templates are compliant to latest CIS Landing Zone</li> <li>Upgrade terraform version to 1.0.0</li> <li>Please note that since this release is upgrading the terraform version so previous version's terraform state will not be compatible with the new tf files. Recommendation is to keep using old code setup for eixsting customers and new code setup for new customers. Or else export everything using new code and then import into the new terraform state</li> </ol>"},{"location":"ReleaseInfo/#automation-toolkit-release-v72-docker-image-release-v32","title":"Automation Toolkit Release v7.2 &amp; Docker Image Release v3.2","text":""},{"location":"ReleaseInfo/#date-may-26-2021","title":"Date - May 26, 2021","text":"<p>This is a minor release.</p> <ol> <li>Bug fix for export of policies having newline in description eg for policies added automatically for streaming</li> <li>Launch Linux 7.9 as OCS VM since 7.8 is not searcheable now and enable yum repos</li> <li>Change os.cmd to function calls for SetUPOCI</li> <li>Include CIS Features to enable cloud-guard, OSS, VCN Flow Logging</li> <li>CD3 Validator for Identity, Networking, Instances, Block Volumes</li> <li>Accept key value along with key var name in Instances Sheet</li> <li>Updated CD3 Templates as per CIS</li> </ol>"},{"location":"ReleaseInfo/#release-v712","title":"Release v7.1.2","text":""},{"location":"ReleaseInfo/#date-apr-12-2021","title":"Date - Apr 12, 2021","text":"<p>This is a minor release.</p> <ol> <li>Bug fix for CD3 LBR - Certs/PEM keys copied to outdir- this helps to resolve the path issue while RM upload. Export LBR also modified</li> <li>Bug fix for Instance Export - included root compartment, AD issue and Boot Volume not found issue.</li> <li>Removed installation of Development Tools from shell script on OCSVM.</li> <li>Added CD3 validation for DNS Label length for VCN and Subnets</li> </ol>"},{"location":"ReleaseInfo/#release-v711","title":"Release v7.1.1","text":""},{"location":"ReleaseInfo/#this-is-a-minor-release","title":"This is a minor release.","text":"<ol> <li>Bug fix for CD3 Network components validator - included check for invalid CIDR range having host bits set</li> <li>Bug fix for Security List Rules - allow all ports for TCP/UDP</li> <li>Removed unwanted packages from shell script - cfgparse, ipaddr, pycrypto, gcc</li> </ol>"},{"location":"ReleaseInfo/#release-v71","title":"Release v7.1","text":"<p>Date - Feb 12, 2021</p> <p>Below are the highlights of this release:</p> <ol> <li>Introduced new option in setUpOCI Menu to create RM Stack</li> </ol> <p>\u00a0 \u00a0* When this option is chosen, it will ask for the compartment where the RM stack has to be created.</p> <p>\u00a0 \u00a0* It will create stacks in the specified compartment in the home region</p> <p>\u00a0 \u00a0* RM Stack names: ocswork-- where  is the prefix mentioned in setUpOCI.properties file and  is the regions tenancy is subscribed to. <p>\u00a0 \u00a0* Uploads all files in outdir to RM Stack and also uploads the tfstate file if existing.</p> <p>\u00a0 \u00a0* Uses same RM Stack for multiple executions.</p> <ol> <li> <p>Bug fix for LBR Backend sets to allow same backend servers with different ports.</p> </li> <li> <p>OCSWork VM launched with TF version 0.13.4 in sync with Resource Manager in OCI</p> </li> <li> <p>CD3 templates as per CIS Standards</p> </li> </ol>"},{"location":"ReleaseInfo/#release-v701","title":"Release v7.0.1","text":"<p>This is a minor release.</p> <p>xrld package's latest release was not compatible and giving below issue with CD3:</p> <p></p> <p>It has been fixed by installing lower version of xlrd package.</p> <p>pip3 install xlrd==1.2.0</p> <p>It has been corrected and pushed to the master branch.</p>"},{"location":"ReleaseInfo/#major-release-v70","title":"Major Release v7.0","text":""},{"location":"ReleaseInfo/#date-oct-9-2020","title":"Date - Oct 9, 2020","text":"<ol> <li>Support for additional properties for OCI objects using Jinja2 templates</li> <li>Support for configuring Events and Notifications</li> <li>Support for export of Instances, block volumes, Tags, Events and Notifications etc to CD3</li> <li>Updated Terraform Configuration Files to support the Latest Terraform Version</li> <li>Support for Resource Manager</li> <li>Support to create and export Dynamic Groups</li> <li>Support to create and export Cost Tracking and Default Tags</li> <li>Support to create and export LBR Components- Cipher Suites, Rule Set and Path Route Set</li> <li>Support to attach or export 'Custom Backup Policy Attachments' to Block and Boot Volumes</li> </ol>"},{"location":"ReleaseInfo/#release-v611","title":"Release v6.1.1","text":"<p>creatOCSWork.py picks up latest Linux OCID and launches the OCSWork VM. However Linux 8 does not support many packages required by automation toolkit.</p> <p>Hence modified the code to launch Linux 7.8 incase ocs_vm_source_image_ocid is left empty in ocswork.properties.</p>"},{"location":"ReleaseInfo/#release-v61","title":"Release v6.1","text":""},{"location":"ReleaseInfo/#date-july-31-2020","title":"Date - July 31, 2020","text":"<p>Below are the highlights of this release:</p> <ol> <li>Addition of Description field for Security Rules and Route Rules. Keep using same CD3 but just add new column 'RuleDescription' at the end of both the sheets - SecRulesinOCI and RouteRulesinOCI</li> <li>New text files - OCI_Regions and OCI_Protocols have been introduced. If any new region gets supported by OCI, it can be added in OCI_Regions file. Similarly Protocol and its number mapping has been defined in OCI_Protocols file which will be used by Security Rules as well as NSG Rules.</li> <li>Automation Toolkit will now support duplicate compartment names like OCI does. Please refer to CD3-template.xlsx under example folder for sample data.</li> <li>Extra properties specific to OCItoOCI project have been removed from ocswork.properties and a new file ocswork_ocic.properties has been added to accomodate that.</li> <li>Support for multiple OCSWork VMs via separate config_for_delete files. A new input parameter has been added to ocswork.properties file.</li> <li>Support for Reserved Public IP for OCSWork VM. Reserved public IP will be assigned to OCSWork VM which you cna chose to retain also while destroying OCSWork VM.</li> <li> <p>a. Regions property has been removed and now tenancy's subscribed regions will be fetched using API and terraform directories would be created based on that. It would be good to subscribe tenancy to all required regions before setting up OCS Work VM or else create the region directory manually. b. Regions property has been removed from VCN Info tab of CD3 as well.</p> </li> <li> <p>CD3 Validator has been introduced. This will validate Networking tabs as of now. It will check for any Null Values, CIDR overlaps etc. </p> </li> <li>Support for Flex shapes for Instances. Please refer to CD3-template.xlsx under example folder for sample input data.</li> <li>Instead of LinuxLatest and WindowsLatest, OS value in CD3 template has been changed to Linux and Windows respectively. Variable names in variables_.tf has been changed accordingly. Support for LinuxLatest and WindowsLatest templates for instance will be deprecated from next release. <li>Support for Multiple Listeners for LBRs. Add new column 'ListenerName' in the CD3 sheet. Please refer to CD3-template.xlsx under example folder for sample input data.</li> <li>Support for Multiple export options for FSS. Please refer to CD3-template.xlsx under example folder for sample input data.</li> <li>Support for NSG export/import. Export process for non-greenfield tenancies will support export of NSGs and their import into terraform.</li> <li>GIT repo has been moved to OCI. SSH key needs to be setup for access to the repo. Private key is copied over to /root/.ssh folder. It is up to the developers if they want to keep the private key there for any future GIT updates or if they want to remove the key for security reasons.</li>"},{"location":"ReleaseInfo/#release-v601","title":"Release v6.0.1","text":""},{"location":"ReleaseInfo/#date-mar-23-2020","title":"Date - Mar 23, 2020","text":"<p>There was a bug in v6.0 where TF for Instances, FSS, LBR etc was not getting correct subnet name as created for subnets using NEtworking.</p> <p>It has been corrected and pushed to the master branch.</p>"},{"location":"ReleaseInfo/#major-release-v60","title":"Major Release v6.0","text":"<p>Below are the highlights of this release:</p> <ol> <li>Support for Non Green Field Tenancies. </li> <li>Removed common_seclist_name and seclist_per_subnet columns from Subnets Tab. Specify security lists to be created for a subnet as comma separated in seclist_names column.</li> <li>If DNS doesn't need to be enabled for a VCN or subnet, specify 'n' in dns_label column for that VCN or Subnet.</li> <li>Specify 'n' for route_table_name or seclist_names in Subnets tab if only Default Route Table or Default Secuirty List of VCN needs to be attached to the subnet.</li> <li>When you are running Modify Network, if there are any route tables or security lists which are not attached to any subnet or DRG or LPG then it will display the names in output like below:</li> </ol> <p>ATTENTION!!! Below RouteTables are not attached to any subnet or DRG and LPG; If you want to delete any of them, remove the TF file!!!</p> <p>ATTENTION!!! Below SecLists are not attached to any subnet; If you want to delete any of them, remove the TF file!!!</p>"},{"location":"ReleaseInfo/#release-v501","title":"Release v5.0.1","text":"<p>There was a bug in LPGs creation/peering. Corrected that and pushed as v5.0.1</p>"},{"location":"ReleaseInfo/#major-release-v50","title":"Major Release v5.0","text":""},{"location":"ReleaseInfo/#date-feb-7-2020","title":"Date - Feb 7, 2020","text":"<p>It has many new enhancements and features added to it.</p> <p>Detailed explanation about CD3 excel is at: CD3 Excel release v5.0</p> <p>Below are the highlights:</p> <ol> <li>yum utility won't break on OCS Work VM. Please use python setUpOCI.py  cmd and python fetch_compartments_to_variablesTF.py  cmd to execute automation. <li>Export of rules after network creation is a mandatory step. Single sheet- 'SecRulesinOCI' and 'RouteRulesinOCI' would be used to manage rules in OCI.</li> <li>Color Coding has been added to the exported rules.</li> <li>Support for specifying LPG names has been included. </li> <p>\u00a0 \u00a0 \u00a0 \u00a0 Format to specify LPG names:</p> <p>\u00a0 \u00a0 \u00a0 \u00a0 specify either y (like for other components) - this will give default name to the LPG whch is _lpg eg ProdVCN_lpg0  or the \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 name that you want to give to the LPG. <ol> <li>Peering section has been removed and merged in VCNs tab. Format for specifying peering in hub_spoke_peer_none column:</li> </ol> <p>\u00a0 \u00a0 \u00a0 \u00a0specify hub in the column for the VCN you want to mark as hub</p> <p>\u00a0 \u00a0 \u00a0 \u00a0specify spoke: if you want to mark a VCN as spoke to hub VCN <p>\u00a0 \u00a0 \u00a0 \u00a0specify peer: if you want to establish normal peering between 2 VCNs <p>\u00a0 \u00a0 \u00a0 \u00a0specify none if the VCN is a normal standalone VCN</p> <ol> <li>you can specify SGW target for route rules in OCI. specify as either object_storage or all_services</li> </ol> <p>When VCNs are specified in hub-spoke model, Route Tables associated with DRG and LPG get created automatically. Inter subnet communication and egress communication from all subnets is opened via SecRules. Initial Subnet Route rules are controlled by flags for each target in Subnets Tab. If any change is required to be done in default sec rules or route rules, they can be modified via cd3 after exporting them.</p> <p>CSV support for this version is still under progress.</p>"},{"location":"ReleaseInfo/#major-release-v40","title":"Major Release v4.0","text":"<p>Note  This version would require you to change your excel file and use the latest one since there is a column addition in the existing sheet.</p> <ol> <li>Added support to add a common security List across subnets apart from just Default Security List. This is done by adding a new column in Subnets tab \"common_seclist_name\" which specifies name of common seclist to be created and used for each subnet \u00a0 \u00a0  If left blank for a particular subnet that means the common seclist doesnt not need to be assigned to that subnet.</li> <li>Modified output files created for routes. Earlier tool used to create one TF file for all route tables. Now it would generate separate file for each Route Table like it does for Security List.</li> <li>Introduced option to create new VCN under Update Network</li> <li>Added Default DHCP options also to TF like for Default Security List</li> <li>Added support to include Description for a rule in NSGs. Added new column for this</li> <li>Modified DB Systems creation code. Separated tabs for DB system - VM, BM and Exa</li> <li>Fixed some minor issues with existing code</li> </ol>"},{"location":"additional-attributes/","title":"Support for Additional Attributes","text":"<p>Follow the below steps to add an attribute that is not present already in your Excel sheet -</p> <ol> <li>Add the attribute name to the CD3 Excel sheet (based on the resource the attribute belongs to) as given in Terraform Official Documentation.</li> <li>Uncomment the attribute in .tf files (terraform modules in outdirectory, if they are commented). </li> <li>Uncomment the attribute in Jinja template for the resource attribute. Resource to Jinja template mapping is available here.</li> <li>Update the variable file for any additional changes like image ocids, ssh public keys, etc</li> </ol> <p>Example 1: To add an attribute for Instances - (preserve_boot_volume)</p> <ul> <li>Here is the Terraform Hashicorp documentation for instances - https://registry.terraform.io/providers/oracle/oci/latest/docs/resources/core_instance</li> <li> <p>Add an additional column preserve_boot_volume to the Instances Sheet as shown below. Optionally change the underscores to spaces for better readability.</p> <p></p> </li> <li> <p>Uncomment the parameter in instance.tf file if not already uncommented.</p> <p></p> </li> <li> <p>Uncomment the parameter in cd3_automation_toolkit\\Compute\\templates\\instance-template . Any line that is between {#  #} are commented in Jinja templates. From the screenshot below we note that the condition for preserve_boot_volume  is within the Jinja comments. Copy the highlighted line and place it after/outside line 184 (#}) as per below screenshot. <p>Before:</p> <p></p> <p>After:</p> <p></p> <li> <p>Apart from the above changes, optionally, update the instance_ssh_keys and instance_source_ocids in your variables file before executing the toolkit to generate the auto.tfvars for instances.</p> </li> <p>Example 2 : To Add Freeform Tags</p> <ul> <li>Automation Tool Kit allows the tagging of resources. To use this option, the user is required to add the below column to the appropriate CD3 sheet. Ex: To Tag your Instances, Open the \u2018Instances\u2019 sheet of your CD3 and add the column FreeForm Tags at the end.</li> </ul> <p>Note</p> <p>The Tag Values (Default and Freeform Tags) specified will apply to all the resources in the tab. Ex: The tags applied to VCNs will not be applied to its objects like IGW, NGW, SGW, LPG, etc Empty column values are allowed for FreeForm and Defined Tags; when used it does not attach any tags to the resource. eg: Row 1 in the below example Semi Colon is used as Delimiter between multiple tag values (Example as shown below)</p> <ul> <li> <p>Allowed Values for Tags include the following formats: (semi-colon delimited values to be entered)</p> <p>Example:</p> S.No Freeform Tags Defined Tags 1. 2. Network=Test1;Network2=Test40 Operations.CostCenter=01;Users.Name=user01 3. Network=Test2; Network2=Test4 Application.Env=Dev 4. Network= OS.Version= 5. testing Platform.Usage </li> <li> <p>Export of new attributes is only supported if the attribute name of Terraform documentation matches that of the Python SDK. Export may fail to fetch the data incase there is a mismatch of the variable names.</p> </li> </ul>"},{"location":"additional-attributes/#resource-to-template-mapping","title":"Resource to Template Mapping","text":"<p>The following Table maps the Excel Sheet to the Resources to the Templates:</p> <p>CD3-CIS-template.xlsx:</p> Tab Name/SetUpOCI Option Resource Name(OCI Console) Jinja2 Template Path Jinja2 Template Name! VCNsSubnetsDHCPRouteRulesinOCISecRulesinOCINSGs Networking: Virtual Cloud Networks cd3_automation_toolkit\\Network\\BaseNetwork\\templates\\ major-objects-drgs-templatemajor-objects-igws-templatemajor-objects-ngws-templatemajor-objects-lpgs-templatemajor-objects-sgws-templatemajor-objects-vcns-templatemajor-objects-drg-attachments-templatemajor-objects-default-dhcp-templatesubnet-templatecustom-dhcp-templatedrg-data-source-templatedrg-route-distribution-statement-templatedrg-route-distribution-templatedrg-route-rule-templatedrg-route-table-templatedefault-route-table-templateroute-rule-templateroute-table-templatedefault-seclist-templateseclist-templatesec-rule-templatensg-rule-templatensg-template Tags Governance: Tag Namespace cd3_automation_toolkit\\Governance\\Tagging\\templates tags-namespaces-templatetags-keys-templatetags-defaults-template OSS Object Storage Bucket cd3_automation_toolkit\\Storage\\ObjectStorage\\templates oss-policy-templateoss-template OKE Developer Service: Oracle Kubernetes Service cd3_automation_toolkit\\DeveloperServices\\OKE\\templates\\ cluster-templatenodepool-template NLB-ListenersNLB-BackendSets-BackendServers Networking: Network Load Balancers cd3_automation_toolkit\\Networking\\LoadBalancers\\templates\\ nlb-templatenlb-backend-set-templatenlb-backend-server-templatenlb-listener-templatenlb-reserved-ips-template Logging VCN Flow LogsObject Storage Bucket Logs cd3_automation_toolkit\\ManagementServices\\Logging\\templates logging-template LB-Hostname-CertsBackendSet-BackendServerRuleSetPathRouteSetLB-Listener Networking: Load Balancers cd3_automation_toolkit\\Networking\\LoadBalancers\\templates\\ lbr-templatecertificate-templatehostname-templatecipher-suite-templatebackend-server-templatebackend-set-templaterule-set-templateaccess-control-rules-templateaccess-method-rules-templatehttp-header-rules-templaterequest-response-header-rules-templateuri-redirect-rules-templatepath-route-set-templatepath-route-rules-templatelistener-templatelbr-reserved-ips-template Key Vault Key and Vault cd3_automation_toolkit\\Security\\KeyVault\\templates keys-templatevaults-template FSS File Storage: File Systems cd3_automation_toolkit\\Storage\\FileStorage\\templates\\ fss-templateexport-resource-templateexport-options-templatemount-target-template DedicatedVMHostsInstances Compute:Dedicated Virtual Machine HostsInstances cd3_automation_toolkit\\Compute\\templates\\ dedicatedvmhosts-templateinstances-template CompartmentsGroupsPolicies Identity: CompartmentsGroupsDynamic GroupsPolicies cd3_automation_toolkit\\Identity\\Compartments\\templates  cd3_automation_toolkit\\Identity\\Groups\\templates  cd3_automation_toolkit\\Identity\\Policies\\templates  compartments-templategroups-templatepolicies-template Cloud Guard Cloud Guard cd3_automation_toolkit\\Security\\CloudGuard\\templates cloud-guard-config-templatecloud-guard-target-template Budgets Governance: Budgets cd3_automation_toolkit\\Governance\\Billing\\templates budget-alert-rule-templatebudget-template BlockVolumes Block Storage: Block Volumes cd3_automation_toolkit\\Storage\\BlockVolume\\templates\\ blockvolumes-template ADBDBSystems-VM-BMEXA-InfraEXA-VMClusters Autonomous Data WarehouseAutonomous Transaction ProcessingBare Metal, VM and Exadata Infra, and Exadata VM Clusters cd3_automation_toolkit\\Database\\templates\\ adb-templatedbsystems-vm-bm-templateexa-infra-templateexa-vmclusters-template <p>CD3-CIS-ManagementServices-template.xlsx</p> Tab Name/SetUpOCI Option Resource Name(OCI Console) Jinja2 Template Path Jinja2 Template Name! NotificationsEventsAlarmsServiceConnectors Application Integration:NotificationEvents ServiceAlarmsService Connector Hub cd3_automation_toolkit\\ManagementServices\\EventsAndNotifications\\templates  cd3_automation_toolkit\\ManagementServices\\Monitoring\\templates  cd3_automation_toolkit\\ManagementServices\\ServiceConnectorHub\\templates  actions-templateevents-templatenotifications-topics-templatenotifications-subscriptions-templateservice-connectors-template"},{"location":"architecture/","title":"CD3 Architecture","text":"<p>The CD3 architecture and installed packages are shown above.</p> <p></p>"},{"location":"authmechanisms/","title":"OCI SDK Authentication Methods","text":"<p>CD3 supports the below OCI authentication mechanisms for the toolkit execution. Choose one from the list:</p> <ul> <li>API key-based authentication</li> <li>Session token-based authentication</li> <li>Instance principal</li> </ul>"},{"location":"authmechanisms/#api-key-based-authentication","title":"API key-based authentication","text":"<ol> <li> <p>Create API PEM Key RSA key pair in PEM format (minimum 2048 bits) is needed to use OCI APIs. If the key pair does not exist, create them using below command inside docker container:       <pre><code>cd /cd3user/oci_tools/cd3_automation_toolkit/user-scripts/\n</code></pre> <pre><code>python createAPIKey.py\n</code></pre>       \u2192 This will generate the public/private key pair (oci_api_public.pem and oci_api_private.pem) at /cd3user/tenancies/keys/</p> <p>In case you already have the keys, you can copy the private key file inside the container at /cd3user/tenancies/keys/ </p> </li> <li> <p>Upload Public Key     Upload the Public key to \"APIkeys\" under user settings in OCI Console.</p> <ul> <li>Open the Console, and sign in as the user.</li> <li>View the details for the user who will be calling the API with the key pair.</li> <li>Open the Profile menu (User menu icon) and click User Settings.</li> <li>Click Add Public Key.</li> <li>Paste the contents of the PEM public key in the dialog box and click Add.</li> </ul> </li> </ol> <p>Note:</p> <ul> <li>Please note down these details for next step - User OCID, Private Key path, Fingerprint, Tenancy OCID. The User should have administrator access to the tenancy to use complete functionality of the toolkit.</li> </ul>"},{"location":"authmechanisms/#session-token-based-authentication","title":"Session token-based authentication","text":"<ol> <li> <p>Use below command to create config inside the container. This is needed to generate session token. You can skip this step, if you already have a valid config(with API key) and uploaded the public key to OCI for a user. In that case, you can copy the config file and private API Key inside the container at /cd3user/.oci</p> <p><pre><code>oci setup config\n</code></pre> </p> <p> </p> </li> <li> <p>Execute below command to generate session token for the private key.</p> <pre><code>oci session authenticate --no-browser\n</code></pre> <p>Follow the questions. Enter 'DEFAULT' for the profile name and proceed to update the config file with session token information at default location /cd3user/.oci</p> <p></p> <p> </p> </li> <li> <p>Token will be generated at default location /cd3user/.oci   </p> <p></p> </li> </ol> <p>Note</p> <ul> <li>createTenancyConfig.py script will use the config file located at /cd3user/.oci path. And toolkit supports profile name as DEFAULT only.</li> <li>Generated session token will have maximum 60 minutes validity. You will have to follow from step 1 if new session token is required after expiry. The User should have administrator access to the tenancy to use complete functionality of the toolkit.</li> </ul>"},{"location":"authmechanisms/#instance-principal","title":"Instance principal","text":"<ol> <li>Launch an Instance in the tenancy and set up the toolkit docker container on that instance.</li> <li>Create Dynamic Group for this instance.</li> <li>Write IAM policy to assign privileges to this dynamic group. The dynamic group(containing the instance) should have administrator access to the tenancy to use complete functionality of the toolkit.</li> </ol> <p>Click to continue connecting Container to OCI tenancy </p>"},{"location":"cd3-cli/","title":"Using the Automation Toolkit with CLI","text":"<p>Important</p> <p>Check out the Must Read section for managing network, compute and oci firewall resources.</p>"},{"location":"cd3-cli/#high-level-steps-to-use-toolkit-with-cli","title":"High Level Steps to use toolkit with CLI","text":"<ol> <li> <p>Login to the CD3 Container.</p> </li> <li> <p>Check out CD3 Toolkit Process for workflows supported by the toolkit and choose the workflow.</p> </li> <li> <p>Use one of the templates from Excel Templates based on the workflow chosen.</p> </li> <li> <p>Review setUpOCI.properties file /cd3user/tenancies/&lt;prefix&gt;/&lt;prefix&gt;_setUpOCI.properties.</p> </li> </ol> <p>setUpOCI.properties <pre><code>[Default]\n\n#Input variables required to run setUpOCI script\n\n#path to output directory where terraform file will be generated. eg /cd3user/tenancies/&lt;prefix&gt;/terraform_files\noutdir=\n\n#prefix for output terraform files eg &lt;customer_name&gt; like demotenancy\nprefix=\n\n# auth mechanism for OCI APIs - api_key,instance_principal,session_token\nauth_mechanism=\n\n#input config file for Python API communication with OCI eg /cd3user/tenancies/&lt;prefix&gt;/.config_files/&lt;prefix&gt;_config;\nconfig_file=\n\n# Leave it blank if you want single outdir or specify outdir_structure_file.properties containing directory structure for OCI services.\noutdir_structure_file=\n\n# IaC Tool to be configured - Terraform(specify terraform) or OpenTofu(specify tofu)\ntf_or_tofu=tofu\n\n#path to cd3 excel eg /cd3user/tenancies/&lt;prefix&gt;\\CD3-Customer.xlsx\ncd3file=\n\n#specify create_resources to create new resources in OCI(greenfield workflow)\n#specify export_resources to export resources from OCI(non-greenfield workflow)\nworkflow_type=create_resources\n</code></pre></p>  Parameter Description  Variable Description Example outdir Path to output directory where terraform files will be generated /cd3user/tenancies/demo/terraform_files prefix Prefix for output terraform files \\ auth_mechanism Authentication Mechanism for OCI APIs api_key config_file Python config file   /cd3user/tenancies/demo/.config_files/_config outdir_structure_file Parameter specifying single outdir or different for different services Blank or _outdir_structure_file.properties tf_or_tofu IaC Tool to be configured - Terraform or OpenTofu terraform or tofu cd3file Path to the Excel input file /cd3user/tenancies/demo/CD3demo.xlsx workflow_type Create Resources in OCI or Export Resources from OCI create_resources or export_resources"},{"location":"cd3-cli/#copy-cd3-excel-file","title":"Copy CD3 Excel File","text":"<ul> <li>While using the container launched using RM Stack, local path /cd3user/mount_path on the VM is mapped to /cd3user/tenancies inside the container. So the file can be copied at /cd3user/mount_path/&lt;prefix&gt; on the VM. Below is the sample command to copy the excel file from local system to container: <pre><code>scp -i &lt;private key pushed to VM while creating stack&gt; &lt;path to excel file on local&gt; cd3user@&lt;Public/Private IP of the VM&gt;:/cd3user/mount_path/&lt;prefix&gt;\n</code></pre> Note that cd3user can be used to connect to the VM because same key is pushed for opc as well as cd3user.</li> </ul>"},{"location":"cd3-jenkins/","title":"Using the Automation Toolkit with Jenkins","text":"<p>Jenkins integration with the toolkit is provided to jump start your journey with CI/CD for IaC in OCI. A beginner level of understanding of Jenkins is required.</p>"},{"location":"cd3-jenkins/#pre-reqs-for-jenkins-configuration","title":"Pre-reqs for Jenkins Configuration","text":"<p>The configurations are done when executing createTenancyConfig.py in Connect CD3 Container to OCI Tenancy. Here are the validation steps:</p> <ul> <li>jenkins.properties file is created under <code>/cd3user/tenancies/jenkins_home</code>  as per input parameters in tenancyconfig.        properties</li> <li>An Object Storage bucket is created in OCI in the specified compartment to manage tfstate remotely. </li> <li>Customer Secret Key is configured for the user for S3 credentials of the bucket. </li> <li>A DevOps Project, Repo and Topic are created in OCI in the specified compartment to store terraform_files. GIT is configured on the container with config file at <code>/cd3user/.ssh/config</code> </li> </ul>"},{"location":"cd3-jenkins/#bootstrapping-of-jenkins-in-the-toolkit","title":"Bootstrapping of Jenkins in the toolkit","text":"<ul> <li>Execute below cmd to start Jenkins -  <code>/usr/share/jenkins/jenkins.sh &amp;</code></li> </ul> <p>Important</p> <ul> <li>If createTenancyConfig.py has been run again for a new prefix, then first kill the existing jenkins process and start new after that.</li> <li>Command to get Jenkins process id -  <code>ps -ef | grep jenkins</code></li> <li>Command to kill - <code>kill -9 &lt;process_id&gt;</code></li> <li>Start Jenkins using - <code>/usr/share/jenkins/jenkins.sh &amp;</code></li> </ul> <ul> <li>Access Jenkins URL using: <code>https://&lt;IP of the Jenkins Host&gt;:&lt;Port&gt;</code> </li> </ul> <p>Note</p> <ul> <li><code>&lt;Port&gt;</code> is the port mapped with local system while docker container creation Eg: 8443.</li> <li>Network Connectivity should be allowed on this host and port.</li> <li>Please make sure to use a private server or a bastion connected server with restricted access(i.e. not publicly available).</li> </ul> <ul> <li>It will prompt to create the first user to access Jenkins URL if accessing for the first time. This will be the admin user.</li> <li>The Automation Toolkit only supports a single user Jenkins setup in this release.</li> <li>After logging in, Jenkins Dashboard will be displayed with folders as <code>&lt;prefix&gt;</code> values.</li> </ul>"},{"location":"cd3-jenkins/#high-level-steps-to-use-toolkit-with-jenkins","title":"High Level Steps to use toolkit with Jenkins","text":"<ol> <li> <p>Login to the CD3 Container.</p> </li> <li> <p>Check out CD3 Toolkit Process for workflows supported by the toolkit and choose the workflow.</p> </li> <li> <p>Use one of the templates from Excel Templates based on the workflow chosen.</p> </li> <li>Execute setUpOCI pipeline from Jenkins Dashboard.</li> </ol>"},{"location":"cd3-overview/","title":"CD3 Automation Toolkit","text":"<p>CD3 stands for Cloud Deployment Design Deliverable. The CD3 Automation toolkit enables you to effortlessly Build, Export and Manage OCI (Oracle Cloud Infrastructure) resources by converting Excel templates to fully functional Terraform modules within minutes \u26a1\ufe0f\u26a1\ufe0f . </p> <p>Additionally, the toolkit also supports seamless resource management using OCI DevOps GIT service and Jenkins Pipelines.</p> <p></p> <p> </p>"},{"location":"cd3-overview/#cd3-toolkit-process","title":"CD3 Toolkit Process  <p> The toolkit supports 2 workflows:</p> <p>1. Create &amp; Manage Resources in OCI (Greenfield Workflow):</p> <ul> <li>Use this workflow when setting up an empty OCI tenancy or creating new resources without the need to modify or use any existing resources in the tenancy.</li> <li>The filled in input Excel file is fed to the toolkit and tfvars files are generated for the resources.</li> <li>Modifying the same Excel sheet and re running the toolkit will generate updated tfvars files.</li> <li>The generated tfvars files can be used to deploy resources in OCI by generating a plan and approving the plan for apply. </li> </ul> <p>2. Export &amp; Manage Resources in OCI (Non-Greenfield Workflow):</p> <ul> <li>Use this workflow to manage existing resources with Terraform/Tofu that were not created using CD3. First, export these resources into CD3 and the state. After the export is complete, switch to the create_resources (greenfield) workflow to create new resources or manage existing ones.</li> <li>The input Excel (preferably the Blank template) is fed to the toolkit and resources are exported into CD3 Excel template. </li> <li>The toolkit then generates tfvars from the exported data in Excel file and also generates shell scripts with import commands for all the resources.</li> <li>The shell scripts have to be executed in order to have the updated state file to manage the resources further.</li> <li>Modifying the same Excel sheet and re running the toolkit will generate updated tfvars files.</li> </ul>  <p>Tip</p> <p>CD3 Automation toolkit can be used either via CLI or Jenkins.</p> <p>\ud83d\udcd6 Detailed documentation and videos are provided for both options. Check the top panel for navigation.</p>  <p></p>","text":""},{"location":"cd3exceltabs/","title":"OCI Services currently supported by Automation Toolkit","text":"<p>Click on the links below to know about the specifics of each tab in the excel sheet.</p>"},{"location":"cd3exceltabs/#iamidentity","title":"IAM/Identity","text":"<ul> <li> <p>Compartments</p> </li> <li> <p>Groups/Dynamic Groups</p> </li> <li> <p>Policies</p> </li> <li> <p>Users</p> </li> <li> <p>NetworkSources</p> </li> </ul> <p> Click here to view sample auto.tfvars for the Identity components </p>"},{"location":"cd3exceltabs/#governance","title":"Governance","text":"<ul> <li>Tags</li> </ul> <p>Click here to view sample auto.tfvars for Tags </p> <ul> <li>Quotas</li> </ul> <p>Click here to view sample auto.tfvars for Quotas </p>"},{"location":"cd3exceltabs/#cost-management","title":"Cost Management","text":"<ul> <li>Budgets</li> </ul> <p>Click here to view sample auto.tfvars for Budgets  </p> <p>Click here to view sample auto.tfvars for Budget Alert Rules</p>"},{"location":"cd3exceltabs/#network","title":"Network","text":"<ul> <li> <p>VCNs</p> </li> <li> <p>DRGs - VCN Attachments and RPC Attachments</p> </li> <li> <p>VCN Info</p> </li> <li> <p>DHCP</p> </li> <li> <p>SubnetsVLANs</p> </li> <li> <p>DRGRouteRulesinOCI</p> </li> <li> <p>SecRulesinOCI</p> </li> <li> <p>RouteRulesinOCI</p> </li> <li> <p>NSGs</p> </li> </ul> <p>Click here to view sample auto.tfvars for all Network components- VCNs, Subnets, Gateways etc., </p>"},{"location":"cd3exceltabs/#oci-network-firewall","title":"OCI Network Firewall","text":"<ul> <li>Firewall</li> <li>Firewall-Policy</li> <li>Firewall-Policy-Applicationlist</li> <li>Firewall-Policy-Servicelist</li> <li>Firewall-Policy-Urllist</li> <li>Firewall-Policy-Address</li> <li>Firewall-Policy-Secrets</li> <li>Firewall-Policy-Decryptprofile</li> <li>Firewall-Policy-DecryptRule</li> <li>Firewall-Policy-Secrules</li> </ul> <p>Click here to view sample auto.tfvars for all Firewall components </p>"},{"location":"cd3exceltabs/#private-dns","title":"Private-DNS","text":"<ul> <li> <p>DNS-Views-Zones-Records</p> </li> <li> <p>DNS-Resolvers</p> </li> </ul> <p>Click here to view sample auto.tfvars for all DNS components  </p>"},{"location":"cd3exceltabs/#load-balancer","title":"Load Balancer","text":"<ul> <li> <p>LB-Hostname-Certs tab</p> </li> <li> <p>LB-Backend Set and Backend Servers</p> </li> <li> <p>LB-RuleSet</p> </li> <li> <p>LB-PathRouteSet</p> </li> <li> <p>LB-RoutingPolicy</p> </li> <li> <p>LB-Listener</p> </li> </ul> <p>Click here to view sample auto.tfvars for all Load Balancer components- Cipher suits,Backend sets, rule sets etc.,</p>"},{"location":"cd3exceltabs/#compute","title":"Compute","text":"<ul> <li> <p>DedicatedVMHosts</p> </li> <li> <p>Instances</p> </li> </ul> <p>Click here to view sample auto.tfvars for Compute components-Virtual Machine </p>"},{"location":"cd3exceltabs/#storage","title":"Storage","text":"<ul> <li>BlockVolumes</li> </ul> <p>Click here to view sample auto.tfvars for Block Volumes  </p> <ul> <li>FSS</li> </ul> <p>Click here to view sample auto.tfvars for File Systems  </p> <ul> <li>Object Storage Buckets</li> </ul> <p>Click here to view sample auto.tfvars for Object Storage Buckets </p>"},{"location":"cd3exceltabs/#oracle-database","title":"Oracle Database","text":"<ul> <li> <p>DBSystems-VM-BM</p> </li> <li> <p>ExaCS</p> </li> <li> <p>ADB</p> </li> </ul>"},{"location":"cd3exceltabs/#mysql-database","title":"MySQL Database","text":"<ul> <li>MySQL</li> </ul>"},{"location":"cd3exceltabs/#monitoring-services","title":"Monitoring Services","text":"<ul> <li> <p>Notifications</p> </li> <li> <p>Alarms</p> </li> </ul> <p>Click here to view sample auto.tfvars for management services Alarms, Notifications, Events etc., </p> <ul> <li>ServiceConnectors </li> </ul> <p>Click here to view sample auto.tfvars for Service Connectors </p>"},{"location":"cd3exceltabs/#logging-services","title":"Logging Services","text":"<ul> <li>VCN Flow Logs</li> </ul> <p>Click here to view sample auto.tfvars for VCN Flow Logs  </p> <ul> <li>LBaaS Logs</li> </ul> <p>Click here to view sample auto.tfvars for Load Balancer Logs  </p> <ul> <li>OSS Logs</li> </ul> <p>Click here to view sample auto.tfvars for Object storage Logs  </p> <ul> <li>FSS Logs</li> </ul> <p>Click here to view sample auto.tfvars for FSS Logs  </p> <ul> <li>Firewall Logs</li> </ul> <p>Click here to view sample auto.tfvars for Firewall Logs  </p>"},{"location":"cd3exceltabs/#developer-services","title":"Developer Services","text":"<ul> <li> <p>Upload to OCI Resource Manager Stack</p> </li> <li> <p>OKE</p> </li> </ul> <p>Click here to view sample auto.tfvars for OKE components- Clusters, Nodepools </p>"},{"location":"cd3exceltabs/#sddcs-tab","title":"SDDCs tab","text":"<ul> <li>OCVS</li> </ul> <p>Click here to view sample auto.tfvars for OCVS  </p>"},{"location":"cd3exceltabs/#security","title":"Security","text":"<ul> <li>KMS</li> </ul> <p>Click here to view sample auto.tfvars for KMS Vaults  </p> <p>Click here to view sample auto.tfvars for KMS Keys  </p> <ul> <li>Cloud Guard</li> </ul> <p>Click here to view sample auto.tfvars for Cloud Guard  </p>"},{"location":"cd3validator/","title":"CD3 Validator Features","text":"<p>With version v9.0 we have introduced validator for Multiple VCN CIDRs in Networking Tab. CD3 Validator helps you validate the Compartments, Groups, Policies, Network component entries, Instances, Block Volumes, FSS in your CD3 to ensure error free, smooth creation of the resources when Terraform is applied. Below is a list of checks done by the CD3 Validator:</p> Tab Name Validation/Checks Identity This covers Compartments, Groups, Policies Tabs.<ul><li>Checks if the Region column contains Home Region</li><li>Checks for mandatory columns</li></ul> VCNs <ul><li>Checks if the Columns - Region and Compartment have valid entries.</li><li>Checks if the VCN Names are duplicated in Column - VCN Name for the same region.</li><li>Validates the VCN CIDRs (Single and Multiple) - Checks for Overlapping/Duplicate addresses.</li><li>Checks the VCN CIDR ranges for host bits set.</li><li> Checks if the Column - DNS Label has any special characters.</li><li>Checks for NULL Values if any in all the Columns that is Required/Mandatory.</li></ul> SubnetsVLANs <ul><li>Checks if the Columns - Region and Compartment have valid entries.</li><li>Checks if the VCN Names are part of VCN Tab in Column - VCN Name</li><li>Checks if the Column - DNS Label has any special characters or any Duplicate Values</li><li>Validates the Subnet CIDRs - Checks for Overlapping/Duplicate addresses</li><li>Checks the Subnet CIDR ranges for host bits set.</li><li>Checks for NULL Values if any in all the Columns that is Required/Mandatory</li><li>Cross Validates entries in Subnets and DHCP Tabs for Column - DHCP Options</li><li>Checks if Internet Gateways and Service Gateways are set appropriately.</li><li>Cross Validates entries in Subnets and VCNsTabs for Column - Subnet CIDR (Checks if the Subnet CIDR belongs to / falls under the VCN CIDR as mentioned in the Subnet's Tab)</li></ul> DHCP <ul><li>Checks if the Columns - Region and Compartment have valid entries</li><li>Checks if the VCN Names are part of VCN Tab in Column - VCN Name</li><li>Check if there is value for Customer DNS Column if the entered type is 'CustomDNSServer'</li><li>Checks for NULL Values if any in all the Columns that is Required/Mandatory</li></ul> DRGs <ul><li>Checks if the Columns - Region and Compartment have valid entries</li><li>Checks if DRG Name entered is as per mentioned in VCNs tab</li><li>Checks for the valid format of Attached To column and if it contains VCN Name as mentioned in VCNs Tab.</li><li>Checks for valid format of column 'Import DRG Route Distribution Statements'</li><li>Checks that column 'Import DRG Route Distribution Statements' cannot have any value if colum 'Import DRG Route Distribution' is empty.</li></ul> Instances <ul><li>Checks if the Columns - Region and Compartment have valid entries</li><li>Checks for mandatory columns - Region, Compartment Name, Availability Domain, Display Name, Network Details, SSH Key Var Name, Pub Address, Source Details, Shape</li><li>Checks if Network Details specified is valid</li><li>Checks for valid values for columns - Availability Domain, Fault Domain, Source Details, Shape</li><li>Checks if the NSG names mentioned in NSGs column are part of NSGs tab of the CD3 excel.</li></ul> Block Volumes <ul><li>Checks if the Columns - Region and Compartment have valid entries</li><li>Checks for mandatory columns Block Name, Availability Domain, Attach Type.</li><li>Checks for valid values for columns - Availability Domain, Attach Type, Attached to Instance.</li><li>Checks if AD mentioned in Block Volumes sheet is same as AD mentioned in Instances sheet for the instance to which block volume is to be attached.</li></ul> FSS <ul><li>Checks if the Columns - Region and Compartment have valid entries</li><li>Checks for mandatory columns - Region, Compartment Name, Availability Domain, MountTarget Name, MountTarget SubnetName.</li><li>Checks if Network Details specified is valid</li><li>Checks if the NSG names mentioned in NSGs column are part of NSGs tab of the CD3 excel.</li></ul> Budgets <ul><li>Checks for mandatory columns(Region/Name/Scope/Schedule/Amount) for Budget creation</li><li>Checks for mandatory parameter (Start Date and End Date ) for Single Use Schedule</li><li>Checks for mandatory parameter (Start Day) for MONTH Schedule</li><li>Value format check for \"Alert Rules\" column</li><li>Value check for email format in \"Alert Recipients\" column</li><li>Checks if provided region is home region or not</li></ul> KMS <ul><li>Checks if the Columns - Region, Vault Compartment, Key Compartment, Vault display name, Key display name have valid entries</li><li>Checks if valid protection mode, Key algorithm and key length are provided.</li><li>Checks if auto rotation and rotation interval have valid values.</li></ul> <p>Log file containing CD3 validator checks is generated at: <code>/cd3user/tenancies/&lt;prefix&gt;/&lt;prefix&gt;_cd3validator.log</code>. </p> <p>Expected ERRORs in the log file:</p> <ul> <li> <p>Compartment Network does not exist in OCI.\u2192 This error means that the component is not found in OCI. So, please make sure to create the Compartment \"Network\" before validating other tabs.</p> </li> <li> <p>Either \"Region\" ashburn is not subscribed to tenancy or toolkit is not yet configured to be used for this region. \u2192 If this is a new region subscribed to the tenancy after toolkit was setup initially then Please re run createTenancyConfig.py with same tenancyconfig.properties to configure the toolkit with the new region.</p> </li> <li> <p>For policy statements like below: <pre><code> allow service loganalytics to {BUCKET_READ} in tenancy \n allow service loganalytics to {EVENTRULE_READ} in tenancy \n allow DYNAMIC-GROUP logging_analytics_agent to {LOG_ANALYTICS_LOG_GROUP_UPLOAD_LOGS} in tenancy \n</code></pre></p> </li> </ul> <p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Validator can report below error which can be ignored:</p> <p> <code>2024-04-24 11:50:08,086 - ROW 41 : Invalid verb used in Policy Statement</code></p>"},{"location":"commonissues/","title":"Common Issues faced by Toolkit Users","text":"<p>1. I am getting 'Permission Denied' error while executing any commands inside the container. </p> <p>When running the docker container from a Linux OS, if the outdir is on the root, a permission denied error may occur while executing steps like createAPIKey.py. In such scenarios, please follow the steps given below - Error Screenshot:</p> <p> Solution: Please change:            - selinux mode from Enforcing to Permissive            - change the owner of folders in /cd3user/tenancies to that of cd3user.  Please refer the screenshots below -             - Alternately, please attach a data disk and map the container (/cd3user/tenancies) on a folder that is created on the data disk (your local folder).</p> <p>2. I used Export (Non-Greenfield) workflow to export resources from OCI. I am not able to see all data into my excel sheet.  There could be multiple reasons for this:     - You have to specify all compartment names(comma separated) explicitly from where you want to export the data.    - There may be some duplicate resource names in OCI. Toolkit does not support creation/export of resources with same names.</p> <p>3. I get below error while executing terraform pipelines using jenkins.</p> <pre><code>+ cd /cd3user/tenancies/jenkins_home/jobs/terraform_files/jobs/phoenix/jobs/network/jobs/terraform-apply/workspace/phoenix/network\n+ terraform plan -out=tfplan.out\n\ufffd\ufffd\ufffd\n\ufffd\ufffd\ufffd Error: error loading state: SignatureDoesNotMatch: The secret key required to complete authentication could not be found. The region must be specified if this is not the home region for the tenancy.\n\ufffd\ufffd\ufffd     status code: 403, request id: phx-1:JaiPi4IgUOu0YWZE4-kb3TiLr4g7cQnpqvCT1A3Ca_SUn2cRai-yVrmE-osNZVYx, host id: \n</code></pre> <p>This gets resolved on its own after sometime.</p>"},{"location":"connect-container-to-oci-tenancy/","title":"Connect CD3 Container to OCI Tenancy","text":"<p>Note</p> <ul> <li>When a new region is subscribed to the tenancy, rerun createTenancyConfig.py by using the same tenancyconfig.properties file that was originally used. It will create new directory for the new region under <code>/cd3user/tenancies/&lt;prefix&gt;/terraform_files</code> without touching the existing ones and will commit the latest terraform_files folder to DevOps GIT repo.</li> </ul> <p>Step 1 - Login (Exec) into the Container:</p> <ul> <li>Login to the previously launched container using either RM Stack or Manual Launch.</li> </ul> <p>Step 2 - Choose Authentication Mechanism for OCI SDK</p> <ul> <li> <p>Click here to configure any one of the available authentication mechanisms.</p> </li> <li> <p>Make sure to assign required OCI Tenancy Access to user/instance as defined in Prerequisites.</p> </li> </ul> <p>Step 3 - Edit tenancyconfig.properties:</p> <ul> <li> <p>Run    <pre><code>cd /cd3user/oci_tools/cd3_automation_toolkit/user-scripts/\n</code></pre></p> </li> <li> <p>Fill the input parameters in <code>tenancyconfig.properties</code> file.</p> </li> </ul> <p>tenancyconfig.properties</p>  Parameter Description  Parameter Description Example prefix Friendly name for the Customer Tenancy demo tenancy_ocid OCID of the tenancy ocid1.tenancy.oc1..aaaaaa...5t region OCI Region identifier us-phoenix-1 auth_mechanism Auth Mechanism for OCI APIs api_key, instance_principal, session_token user_ocid Required only if ${auth_mechanism} is selected as api_key. Leave empty if 'instance_principal' or 'session_token' is used ocid1.user.oc1..aaaaa...6a key_path Required only if ${auth_mechanism} is selected as api_key. Leave empty if 'instance_principal' or 'session_token' is used. Path of API Private Key (PEM Key) File  Defaults to /cd3user/tenancies/keys/oci_api_private.pem when left empty fingerprint Required only if ${auth_mechanism} is selected as api_key. Leave empty if 'instance_principal' or 'session_token' is used 9f:20:0b:....:8c outdir_structure_file The outdir_structure_file defines the grouping of the terraform auto.tf.vars for the various generated resources.To group resources into different directories within each region - specify the absolute path to the file.To have all the files generated in a single directory in the corresponding region, leave this variable blank. Defaults to /cd3user/oci_tools/cd3_automation_toolkit/user-scripts/outdir_structure_file.properties tf_or_tofu IaC Tool to be configured - Terraform or OpenTofu terraform ssh_public_key SSH Key for launched instances; Use '\\n' as the delimiter to add multiple ssh keys. ssh-rsa AAXXX......yhdlo\\nssh-rsa AAxxskj...edfwf  Advanced Parameters - Fill this to use toolkit with Jenkins  Parameter Description Example compartment_ocid Compartment OCID where Bucket and DevOps Project/repo will be created; defaults to root if left empty. ocid1.compartment.oc1..aaaaaaaa7....ga use_remote_state Remote state configuration: Enter yes if remote state needs to be configured, else tfstate will be stored on local filesystem. Needs to be set as \"yes\" for Jenkins.  yes/no remote_state_bucket_name Specify bucket name if you want to use existing bucket else leave empty.If left empty, Bucket with name ${prefix}-automation-toolkit-bucket will be created/reused in ${region}. demo_bucket use_oci_devops_git OCI DevOps GIT configuration: Enter yes if generated terraform_files need to be stored in OCI DevOps GIT Repo else they will be stored on local filesystem. Will enforce 'yes' for use_remote_state in case this value is set to 'yes'. Needs to be set as \"yes\" for Jenkins.  yes/no oci_devops_git_repo_name Specify Repo name if you want to use existing OCI Devops GIT Repository else leave empty Format: . If left empty, DevOps items  with names ${prefix}-automation-toolkit-project/repo/topic will be created/reused in ${region}. demo_repo oci_devops_git_user User Details to perform GIT operations in OCI Devops GIT Repo.          Mandatory when using $(auth_mechanism) as instance_principal or session_token.          Format: &lt;domainName&gt;/&lt;userName&gt;@&lt;tenancyName&gt;         When left empty, it will be fetched from $(user_ocid) for $(auth_mechanism) as api_key.          Customer Secret Key will also be configured for this user for S3 credentials of the bucket when $(auth_mechanism) is instance_principal or session_token      Users in Custom Domain are not supported as of now. oracleidentitycloudservice/devopsuser@oracle.com@ocitenant oci_devops_git_key When left empty, same key file from $(key_path) used for $(auth_mechanism) as api_key will be copied to /cd3user/tenancies/&lt;prefix&gt;/ and used for GIT Operations. Make sure the api key file permissions are rw(600) for cd3user /cd3user/tenancies/keys/oci_api_private.pem <p></p> <p>Important</p> <ul> <li>Have the details ready for Authentication mechanism you are planning to use.</li> <li>Choose whether the outdir needs to be configured with OpenTofu or Terraform. Its a one time selection for that prefix and cannot be modified later.</li> <li>Review outdir_structure_file parameter as per requirements. It is recommended to use separate outdir structure to manage a large number of resources. </li> <li>Review Advanced Parameters Section for CI/CD setup. The toolkit can be used either with CLI or with Jenkins. If you plan to use the toolkit with Jenkins then be ready with user details that will be used to connect to DevOps Repo in OCI. Specifying these parameters as 'yes' in properties file will create Object Storage Bucket and Devops Git Repo/Project/Topic in OCI and enable toolkit usage with Jenkins. The toolkit supports users in primary IDCS stripes or default domains only for DevOps GIT operations.</li> </ul> <p>Step 4 - Initialise the environment:</p> <ul> <li> <p>Initialise your environment to use the Automation Toolkit. <pre><code>python createTenancyConfig.py tenancyconfig.properties\n</code></pre></p> <p>Note</p> <ul> <li>When running the CD3 container on a Linux VM host (without using the Resource Manager stack option), refer to point no. 7 under FAQ to avoid any permission issues.</li> <li>Running the above command immediately after adding API key to the user profile in OCI might result in  Authentication Errors. In such cases, retry after a minute.</li> </ul> </li> <li> <p>Example execution of the script with Advanced Parameters for CI/CD</p> <p></p> </li> </ul> <p>Output:</p>  Output files and OCI resources -  Files Generated At File Path Comment/Purpose setUpOCI.properties /cd3user/tenancies/&lt;prefix&gt;/&lt;prefix&gt;_setUpOCI.properties Customer Specific properties outdir_structure_file.properties /cd3user/tenancies/&lt;prefix&gt;/&lt;prefix&gt;_outdir_structure_file Customer Specific properties file for outdir structure.             This file will not be generated if 'outdir_structure_file' parameter was set to empty(single outdir)in tenancyconfig.properties while running createTenancyConfig.py Region based directories /cd3user/tenancies/&lt;prefix&gt;/terraform_files Tenancy's subscribed regions based directories for the generation of terraform files.                 Each region directory will contain individual directory for each service based on the parameter 'outdir_structure_file' Variables File,Provider File, Root and Sub terraform modules /cd3user/tenancies/&lt;prefix&gt;/terraform_files/&lt;region&gt; Required for terraform to work. Variables file and Provider file will be generated based on authentication mechanism chosen. out file /cd3user/tenancies/&lt;prefix&gt;/createTenancyConfig.out This file contains a copy of information displayed as the console output. OCI Config File /cd3user/tenancies/&lt;prefix&gt;/.config_files/&lt;prefix&gt;_oci_config Customer specific Config file for OCI API calls. This will have data based on authentication mechanism chosen. Public and Private Key Pair Copied from /cd3user/tenancies/keys/ to /cd3user/tenancies/&lt;prefix&gt;/.config_files API Key for authentication mechanism as API_Key are copied to customer specific out directory locations for easy access. GIT Config File /cd3user/tenancies/jenkins_home/git_config GIT Config file for OCI Dev Ops GIT operations.This is generated only if use_oci_devops_git is set to yes. Symlink is created for this file at /cd3user/.ssh/config S3 Credentials File /cd3user/tenancies/&lt;prefix&gt;/.config_files/&lt;prefix&gt;_s3_credentials This file contains access key and secret for S3 compatible bucket to manage remote terraform state. This is generated only if use_remote_state is set to yes Jenkins Home /cd3user/tenancies/jenkins_home This folder contains jenkins specific data. Single Jenkins instance can be setup for a single container. tenancyconfig.properties /cd3user/tenancies/&lt;prefix&gt;/.config_files/&lt;prefix&gt;_tenancyconfig.properties The input properties file used to execute the script is copied to customer folder to retain for future reference. This can be used when the script needs to be re-run with same parameters at later stage. OCI Resources Created Name Comment/Purpose OCI DevOps Project and Repository &lt;prefix&gt;-automation-toolkit-project and &lt;prefix&gt;-automation-toolkit-repo Devops Project and repo are created under compartment specified under compartment_ocid property in tenancyconfig.properties. This will host the terraform/tofu code. This is created only if use_oci_devops_git is set to yes. OCI Topic &lt;prefix&gt;-automation-toolkit-topic  An empty OCI Topic (without any subscription) is created which is needed for Devops Project. OCI Bucket &lt;prefix&gt;-automation-toolkit-bucket  An OCI bucket is created to store the state file. This is created only if use_remote_state is set to yes. Customer Secret Key &lt;prefix&gt;-automation-toolkit-csk  A Customer Secret Key is created for the user specified in tenancyconfig.properties file. This is used as S3 credentials for the bucket storing remote state. <p> The next pages will guide you to use the toolkit either via CLI or via Jenkins. You can continue with the instructions provided.</p> <p>Use Toolkit with CLI Use Toolkit with Jenkins</p>"},{"location":"createnetwork-jenkins/","title":"Executing Networking Scenarios using toolkit via Jenkins","text":""},{"location":"createnetwork-jenkins/#managing-network-for-create_resources-greenfield-workflow","title":"Managing Network for create_resources (Greenfield) Workflow","text":"<ul> <li>Create Network</li> <li>Modify Network</li> <li>Modify Security Rules, Route Rules and DRG Route Rules</li> <li>Sync manual changes done in OCI of Security Rules, Route Rules and DRG Route Rules with CD3 Excel Sheet and Terraform</li> <li>Add/Modify/Delete NSGs</li> <li>Add/Modify/Delete VLANs</li> <li>Remote Peering Connections</li> </ul> <p>NOTE-</p>"},{"location":"createnetwork-jenkins/#create-network","title":"Create Network","text":"<p>Creation of Networking components using Automation Toolkit involves four simple steps.  - Add the networking resource details to appropriate Excel Sheets.  - Running the setUpOCI pipeline in the toolkit to generate auto.tfvars.  - Executing terraform pipeline to provision the resources in OCI.  - Exporting the automatically generated Security Rules and Route Rules by the toolkit to CD3 Excel Sheet.</p> <p>Below are the steps to create Network that includes VCNs, Subnets, DHCP, DRG, Security List, Route Tables, DRG Route Tables, NSGs, etc.</p> <ol> <li> <p>Choose appropriate excel sheet from Excel Templates and fill the required Network details in the Networking Tabs - VCNs, DRGs, VCN Info, DHCP, Subnets, NSGs tabs.</p> </li> <li> <p>Execute the setupOCI pipeline with Workflow as Create Resources in OCI(Greenfield Workflow)</p> </li> <li> <p>Choose option 'Validate CD3' and then 'Validate Networks' to check for syntax errors in Excel sheet. Examine the log file generated at <code>/cd3user/tenancies/&lt;customer_name&gt;/&lt;customer_name&gt;_cd3validator.log</code>. If there are errors, rectify them accordingly and proceed to the next step.</p> </li> <li> <p>Choose 'Create Network' under 'Network' from the displayed options. Click on Build. </p> </li> <li> <p>It will show different stages of execution of setUpOCI pipeline and also launch the terraform-apply pipeline for 'network'.</p> </li> <li>Click on Proceed for 'Get Approval' stage of the terraform pipeline.</li> </ol> <p>This completes the creation of Networking components in OCI. Verify the components in console. However the details of the default security lists and default route tables are not available in the CD3 Excel sheet yet. Inorder to export that data, follow the below steps:</p> <ol> <li>Execute the setupOCI.py pipeline with Workflow as Create Resources in OCI(Greenfield Workflow)</li> <li>Choose 'Network' from the displayed options. Choose below sub-options: (Make sure to choose all the three optionsfor the first time)</li> <li>Security Rules<ul> <li>Export Security Rules (From OCI into SecRulesinOCI sheet)</li> </ul> </li> <li>Route Rules<ul> <li>Export Route Rules (From OCI into RouteRulesinOCI sheet)</li> </ul> </li> <li>DRG Route Rules<ul> <li>Export DRG Route Rules (From OCI into DRGRouteRulesinOCI sheet) Click on Build.</li> </ul> </li> </ol> <p></p> <p>This completes the steps for Creating the Network in OCI and exporting the default rules to the CD3 Excel Sheet using the Automation Toolkit.</p> <p>Go back to Networking Scenarios</p>"},{"location":"createnetwork-jenkins/#modify-network","title":"Modify Network","text":"<p>Modifying the Networking components using Automation Toolkit involves three simple steps.</p> <ul> <li>Add/modify the details of networking components like the VCNs, Subnets, DHCP and DRG in Excel Sheet.</li> <li>Running the the setUpOCI pipeline in the toolkit to generate auto.tfvars.</li> <li>Executing Terraform pipeline to provision/modify the resources in OCI.</li> </ul> <p>Note: Follow these steps to modify Security Rules, Route Rules and DRG Route Rules</p> <p>Steps in detail:</p> <ol> <li>Modify the excel sheet to update required data in the Tabs - VCNs, DRGs, VCN Info, DHCP and Subnets.</li> <li>Execute the setupOCI.py pipeline with Workflow as Create Resources in OCI(Greenfield Workflow)</li> <li>To Validate the CD3 excel Tabs - Choose option 'Validate CD3' and 'Validate Networks' from sub-menu to check for syntax errors in Excel sheet. Examine the log file generated at <code>/cd3user/tenancies/&lt;customer_name&gt;/&lt;customer_name&gt;_cd3validator.logs</code>. If there are errors, rectify them accordingly and proceed to the next step.</li> <li> <p>Choose option to 'Modify Network' under 'Network' from the displayed options. Once the execution is successful, multiple .tfvars related to networking like <code>&lt;customer_name&gt;_major-objects.auto.tfvars</code> and more will be generated under the folder <code>/cd3user/tenancies/&lt;customer_name&gt;/terraform_files/&lt;region_dir&gt;/&lt;service_dir&gt;</code>. Existing files will move into respective backup folders.   </p> <p>Note-: Make sure to export Sec Rules, Route Rules, DRG Route Rules to CD3 Excel Sheet before executing this option.</p> </li> <li> <p>It will show different stages of execution of setUpOCI pipeline and also launch the terraform-apply pipeline for 'network'.</p> </li> <li>Click on Proceed for 'Get Approval' stage of the terraform pipeline.</li> </ol> <p>This completes the modification of Networking components in OCI. Verify the components in console.</p> <p>Go back to Networking Scenarios</p>"},{"location":"createnetwork-jenkins/#modify-security-rules-route-rules-and-drg-route-rules","title":"Modify Security Rules, Route Rules and DRG Route Rules","text":"<p>Follow the below steps to add, update or delete the following components: - Security Lists and Security Rules - Route Table and Route Rules - DRG Route Table and DRG Route Rules</p> <ol> <li> <p>Modify the excel sheet to update required data in the Tabs - RouteRulesInOCI, SecRulesInOCI, DRGRouteRulesInOCI tabs.</p> </li> <li> <p>Execute the setupOCI.py pipeline with Workflow as Create Resources in OCI(Greenfield Workflow)</p> </li> <li> <p>Choose 'Network' from the displayed options. Choose below sub-options:</p> <ul> <li>Security Rules: Add/Modify/Delete Security Rules (Reads SecRulesinOCI sheet)</li> <li>Route Rules: Add/Modify/Delete Route Rules (Reads RouteRulesinOCI sheet)</li> <li>DRG Route Rules: Add/Modify/Delete DRG Route Rules (Reads DRGRouteRulesinOCI sheet)  Once the execution is successful, _seclists.auto.tfvars, _routetables.auto.tfvars and _drg-routetables.auto.tfvars file will be generated under the folder <code>/cd3user/tenancies/&lt;customer_name&gt;/terraform_files/&lt;region_dir&gt;</code>. Existing files will move into respective backup folders.  NOTE: This will create TF for only those Security Lists and Route Tables in VCNs which are part of cd3 and skip any VCNs that have been created outside of cd3 execution. <li> <p>It will show different stages of execution of setUpOCI pipeline and also launch the terraform-apply pipeline for 'network'.</p> </li> <li>Click on Proceed for 'Get Approval' stage of the terraform pipeline.</li> <p>This completes the modification of Security Rules, Route Rules and DRG Route Rules in OCI. Verify the components in console.</p> <p>Go back to Networking Scenarios</p>"},{"location":"createnetwork-jenkins/#sync-manual-changes-done-in-oci-of-security-rules-route-rules-and-drg-route-rules-with-cd3-excel-sheet-and-terraform","title":"Sync manual changes done in OCI of Security Rules, Route Rules and DRG Route Rules with CD3 Excel Sheet and Terraform","text":"<p>Follow the below process to export the rules to the same CD3 Excel Sheet as the one used to Create Network, and to sync the Terraform files with OCI whenever an user adds, modifies or deletes rules in OCI Console manually.</p> <p>NOTE: Make sure to close the Excel sheet during the export process.</p> <ol> <li> <p>Execute the setupOCI.py pipeline with Workflow as Create Resources in OCI(Greenfield Workflow)</p> </li> <li> <p>Choose 'Network' from the displayed menu. Choose below sub-options:</p> </li> <li>Security Rules<ul> <li>Export Security Rules (From OCI into SecRulesinOCI sheet)</li> <li>Add/Modify/Delete Security Rules (Reads SecRulesinOCI sheet)</li> </ul> </li> <li>Route Rules<ul> <li>Export Route Rules (From OCI into RouteRulesinOCI sheet)</li> <li>Add/Modify/Delete Route Rules (Reads RouteRulesinOCI sheet)</li> </ul> </li> <li> <p>DRG Route Rules</p> <ul> <li>Export DRG Route Rules (From OCI into DRGRouteRulesinOCI sheet)</li> <li>Add/Modify/Delete DRG Route Rules (Reads DRGRouteRulesinOCI sheet)</li> </ul> <p>Once the execution is successful, 'RouteRulesInOCI', 'SecRulesInOCI', 'DRGRouteRulesInOCI' tabs of the excel sheet will be updated with the rules exported from OCI. And <code>&lt;customer_name&gt;_seclists.auto.tfvars</code>,  <code>&lt;customer_name&gt;_routetables.auto.tfvars</code> and  <code>&lt;customer_name&gt;_drg-routetables.auto.tfvars</code> file will be generated under the folder <code>/cd3user/tenancies/&lt;customer_name&gt;/terraform_files/&lt;region_dir&gt;</code></p> </li> <li> <p>It will show different stages of execution of setUpOCI pipeline and also launch the terraform-apply pipeline for 'network'.</p> </li> <li>Click on Proceed for 'Get Approval' stage of the terraform pipeline.</li> </ol> <p>This completes the export of Security Rules, Route Rules and DRG Route Rules from OCI. Terraform plan/apply should be in sync with OCI.</p> <p>Go back to Networking Scenarios</p>"},{"location":"createnetwork-jenkins/#addmodifydelete-nsgs","title":"Add/Modify/Delete NSGs","text":"<p>Follow the below steps to update NSGs.</p> <ol> <li> <p>Modify the excel sheet to update required data in the Tabs - NSGs.</p> </li> <li> <p>Execute the setupOCI.py pipeline with Workflow as Create Resources in OCI(Greenfield Workflow)</p> </li> <li> <p>Choose 'Network' from the displayed menu. Choose below sub-option:</p> </li> <li> <p>Network Security Groups</p> <ul> <li>Add/Modify/Delete NSGs (Reads NSGs sheet)</li> </ul> <p>Once the execution is successful,  <code>&lt;customer_name&gt;_nsgs.auto.tfvars</code> will be generated under the folder <code>/cd3user/tenancies/&lt;customer_name&gt;/terraform_files/&lt;region_dir&gt;/&lt;service_dir&gt;</code>. Existing files will move into respective backup folders.</p> </li> <li> <p>It will show different stages of execution of setUpOCI pipeline and also launch the terraform-apply pipeline for 'nsg'.</p> </li> <li>Click on Proceed for 'Get Approval' stage of the terraform pipeline.</li> </ol> <p>This completes the modification of NSGs in OCI. Verify the components in console.</p> <p>Go back to Networking Scenarios</p>"},{"location":"createnetwork-jenkins/#addmodifydelete-vlans","title":"Add/Modify/Delete VLANs","text":"<p>Follow the below steps to update VLANs.</p> <ol> <li>Modify the excel sheet to update required data in the Tabs - SubnetsVLANs.</li> <li> <p>Make sure that the RouteRulesinOCI sheet and corresponing terraform is in synch with route rules in OCI console. If not, follow the procedure specified in Sync manual changes done in OCI of Security Rules, Route Rules and DRG Route Rules with CD3 Excel Sheet and Terraform </p> </li> <li> <p>Execute the setupOCI.py pipeline with Workflow as Create Resources in OCI(Greenfield Workflow)</p> </li> <li>Choose 'Network' from the displayed menu. Choose below sub-option:</li> <li> <p>Add/Modify/Delete VLANs (Reads SubnetsVLANs sheet)</p> <p>Once the execution is successful,  <code>&lt;customer_name&gt;_vlans.auto.tfvars</code> will be generated under the folder <code>/cd3user/tenancies/&lt;customer_name&gt;/terraform_files/&lt;region_dir&gt;/&lt;service_dir&gt;</code>. Existing files will move into respective backup folders.  <code>&lt;customer_name&gt;\\routetables.auto.tfvars</code> file will also be updated with the route table information specified for each VLAN.</p> </li> <li> <p>It will show different stages of execution of setUpOCI pipeline and also launch the terraform-apply pipeline for 'vlan' and 'network'.</p> </li> <li> <p>Click on Proceed for 'Get Approval' stage of the terraform pipeline.</p> </li> <li> <p>Again make sure to export the Route Rules in OCI into excel and terraform. Follow procedure specified in Sync manual changes done in OCI of Security Rules, Route Rules and DRG Route Rules with CD3 Excel Sheet and Terraform </p> </li> </ol> <p>This completes the modification of VLANs in OCI. Verify the components in console.</p>"},{"location":"createnetwork-jenkins/#rpcs","title":"RPCs","text":"<p>Remote VCN peering is the process of connecting two VCNs in different regions (but the same tenancy). The peering allows the VCNs' resources to communicate using private IP addresses without routing the traffic over the internet or through your on-premises network.</p> <ul> <li>Modify the excel sheet to update required data in the Tabs - DRGs.</li> <li>The source and target RPC details to be entered in DRG sheet for establishing a connection. Check the example in excel file for reference.</li> <li>Make sure that the DRGRouteRulesinOCI sheet and corresponding to terraform is in synch with DRG route rules in OCI console. If not, follow the procedure specified in Sync manual changes done in OCI of Security Rules, Route Rules and DRG Route Rules with CD3 Excel Sheet and Terraform</li> <li>Global directory which is inside the customer outdir will have all RPC related files and scripts.</li> <li>The RPC resources(modules,provider configurations etc) are generated dynamically for the tenancy and can work along only with CD3 automation toolkit.</li> <li>Choose option 'Network' and then 'Customer Connectivity' for creating RPC in create_resources (GreenField) workflow.</li> <li>Output files are created under <code>/cd3user/tenancies/&lt;customer_name&gt;/terraform_files/global/rpc directory</code></li> </ul> <p>Go back to Networking Scenarios</p>"},{"location":"delete-prefix/","title":"Delete prefix and its supporting resources in OCI","text":"<p>Users can delete an existing prefix if they are not using it anymore to ensure no prefix-specific residual resources or components remain and to avoid naming conflicts in future executions. This is also beneficial for users who want to re-run <code>createTenancyConfig.py</code> with the same prefix after an unsuccessful execution.</p> <p></p> <p>Resources created with createTenancyConfig.py execution</p> <p>When executing createTenancyConfig.py during Connect Container to OCI, the below components are created:</p> <ul> <li>Config files under <code>/cd3user/tenancies/&lt;prefix&gt;</code> folder</li> </ul> <p>Additional Resources created with Jenkins</p> <p>When using Jenkins, the following additional components are created:</p> <ul> <li>Jenkins files under <code>/cd3user/tenancies/jenkins_home</code> folder. The prefix configurations are added to <code>jenkins.properties</code> and <code>git_config</code> files.</li> <li>OCI Devops Project and repository named <code>&lt;prefix&gt;-automation-toolkit-project</code> to store terraform files</li> <li>OCI Topic needed for Devops Project named <code>&lt;prefix&gt;-automation-toolkit-topic</code></li> <li>OCI bucket named <code>&lt;prefix&gt;-automation-toolkit-bucket</code> to store terraform state file.</li> <li>Customer Secret Key for the user specified in tenancyconfig.properties file. This is used as S3 credential for the bucket storing remote state.</li> </ul> <p></p> <p>Steps to Delete the above prefix-specific Resources</p> <p>Step 1 - Login (Exec) into the Container:</p> <ul> <li>Login to the existing CD3 container using either RM Stack or Manual Launch.</li> </ul> <p>Step 2 - Navigate to user-scripts folder:</p> <pre><code>cd /cd3user/oci_tools/cd3_automation_toolkit/user-scripts/\n</code></pre> <p>Step 3 - Run the Deletion Script:</p> <pre><code>python deleteTenancyConfig.py tenancyconfig_&lt;prefix&gt;.properties\n</code></pre> <p>This script will remove:</p> <ul> <li>OCI Devops Project and Repository</li> <li>OCI Topic</li> <li>OCI Bucket</li> <li>Customer Secret Key for the user</li> <li>Prefix configuration from jenkins.properties and git_config files under /cd3user/tenancies/jenkins_home folder</li> <li>/cd3user/tenancies/jenkins_home/jobs/ folder  <li>/cd3user/tenancies/&lt;prefix&gt; folder</li> <p>Step 4 - Restart Jenkins:</p> <p>This will remove the prefix from Jenkins Dashboard.</p> <ul> <li>Command to get Jenkins process id:</li> </ul> <pre><code>ps -ef | grep jenkins\n</code></pre> <ul> <li>Command to kill process:</li> </ul> <pre><code>kill -9 &lt;process_id&gt;\n</code></pre> <ul> <li>Start Jenkins using:</li> </ul> <pre><code>/usr/share/jenkins/jenkins.sh &amp;\n</code></pre>"},{"location":"download-excel/","title":"Download the CD3 Excel file","text":"<p>Note</p> <p>The CD3 Excel file is available as an artifact for each build of the setUpOCI pipeline after successful completion of 'Execute setUpOCI' stage.</p> <p>For create_resources (Greenfield) workflow, this will be the same Excel file which was uploaded to create resources in OCI. </p> <p>For export_resources (Non-Greenfield) workflow, this will be the updated Excel file with exported OCI resource data.</p> <p>Click on the Build number to the left corner of the setupoci pipeline as shown in below image. Under Build Artifacts, click on the Excel file name to download it. </p> <p> </p>"},{"location":"excel-templates/","title":"Excel Sheet Templates","text":"<p>CD3 Excel templates serve as the main input to the Automation Toolkit. </p> <p>The CD3 templates for the latest release as per CIS Foundations Benchmark for Oracle Cloud are listed in the tables below.</p> <p>Instructions on how to fill data into the Excel sheet can be found in the Blue section of each sheet within the Excel file. Make appropriate changes to the parameter values eg: Region, Compartment etc., as required for deployment.</p> <p>Important</p> <ul> <li> <p>Anything after &lt;END&gt; tag in the sheet is not processed by the toolkit. </p> </li> <li> <p>If a row is deleted from the Excel sheet and the toolkit is rerun, it will be removed from tfvars.</p> </li> <li> <p>After deploying the Infrastructure using any of the templates, run CIS compliance checker script to validate it.</p> </li> </ul> <p></p> <p>CD3 Excel templates for OCI core services:</p> <p>Note: Click on the Download button towards the right end of each page to download the respective Excel template.</p> Excel Sheet Purpose CD3-Blank-template.xlsx Choose this template while exporting the existing resources from OCI into the CD3 and Terraform. CD3-CIS-template.xlsx This template has auto-filled in data of CIS Landing Zone for DRGv2. Choose this template to create Core OCI Objects (IAM, Tags, Networking, Instances, LBR, Storage, Databases) CD3-HubSpoke-template.xlsx This template has auto-filled in data for a Hub and Spoke model of networking. Choose this template to create Core OCI Objects (IAM, Tags, Networking, Instances, LBR, Storage, Databases) CD3-SingleVCN-template.xlsx This template has auto-filled in data for a Single VCN model of networking. Choose this template to create Core OCI Objects (IAM, Tags, Networking, Instances, LBR, Storage, Databases) <p></p> <p>CD3 Excel template for OCI Network Firewall:</p> Excel Sheet Purpose CD3-Network-Firewall-template.xlsx This template has sample data for deploying Network Firewall in OCI. Use separate sheets to deploy firewalls in separate regions of the tenancy. <p></p> <p>CD3 Excel template for OCI Observability and Management services:</p> Excel Sheet Purpose CD3-CIS-ManagementServices-template.xlsx This template has auto-filled in data of CIS Landing Zone. Choose this template while creating the components of Events, Alarms, Notifications and Service Connectors <p>Note</p> <p>The Excel Templates can also be found at \"/cd3user/oci_tools/cd3_automation_toolkit/example\" folder  inside the container.</p>"},{"location":"faq/","title":"Frequently Asked Questions","text":"<p>1. Is there a way to verify my input CD3 Excel sheet for any typos/miskates?         Yes, choose 'Validate CD3' option in setUpOCI menu in create_resources (GreenField) workflow. It validates specific tabs of the excel sheet. Check out CD3 Validator Features for more details.</p> <p>2. Can I use an existing outdir to export the data from OCI? </p> <p>Make sure to use a clean outdir without any .tfvars or .tfstate file. Also use a blank CD3 Excel sheet as export process will overwrite the data in the    respective tab.</p> <p>3. If I am already using the toolkit and my OCI tenancy has been subscribed to a new region, how do i use the new region with toolkit?  Re-run createTenancyConfig.py with same details in tenancyConfig.properties file. It will keep existing region directories as is and create new directory for newly subscribed region.</p> <p>4. How do I upgrade an existing version of the toolkit to the new one without disrupting my existing tenancy files/directories?   Check out Steps to Upgrade Your Toolkit</p> <p>5. How do I export instances in batches using different filters?  Follow below steps:</p> <ul> <li>Modify the setUpOCI.properties file to set non_gf_tenancy to \"true\".</li> <li>Choose \"Export Compute\".</li> <li>Specify the filter - prefix of the instances or specific AD to export.</li> <li>Once the execution completes, take a backup of the files generated for instances in out directory( &lt;prefix&gt;_instances.     tfvars and import_cmds _instances_.sh) and a backup of the 'Instances' tab of the Input CD3 Excel Sheet.</li> <li>Repeat steps from 1 to 4 to export next set of Instances using another filter.</li> <li>After exporting all the required instances using multiple filters, move the files from backup to the out directory, and then execute all the shell scripts generated for instances. Consolidate the data of exported instances from the Excel sheet backups.</li> </ul> <p>6. How do I delete a compartment from OCI using the toolkit? </p> <p>Terraform destroy on compartments or removing the compartments details from &lt;prefix&gt;_compartments.auto.tfvars will not delete them from OCI Console by default. Inorder to destroy them from OCI .  Either -             - Add an additional column - enable_delete to Compartments Tab of CD3 Excel sheet with the value TRUE for the compartments that needs to be deleted on terraform destroy. Execute the toolkit menu option to Create Compartments. (OR)            - Add enable_delete = true parameter to each of the compartment that needs to be deleted in &lt;prefix&gt;_compartments.auto.tfvars</p>"},{"location":"greenfield-cli/","title":"Create and Manage Resources in OCI (Greenfield Workflow)","text":"<p>Step 1:  Choose the appropriate excel sheet template from Excel Templates. Fill the Excel with appropriate values and copy at /cd3user/tenancies/&lt;prefix&gt; Step 2: Modify <code>/cd3user/tenancies /&lt;prefix&gt;/&lt;prefix&gt;_setUpOCI.properties</code>. Update parameters: cd3file parameter to the location of CD3 excel file and  workflow_type  to create_resources as shown below.  The other parameters are already updated with correct values. <pre><code>#Input variables required to run setUpOCI script\n\n#path to output directory where terraform file will be generated. eg /cd3user/tenancies/&lt;prefix&gt;/terraform_files\noutdir=/cd3user/tenancies/demo/terraform_files/\n\n#prefix for output terraform files eg &lt;customer_name&gt; like demo\nprefix=demo\n\n#auth mechanism for OCI APIs - api_key,instance_principal,session_token\nauth_mechanism=api_key\n\n#input config file for Python API communication with OCI eg /cd3user/tenancies/&lt;prefix&gt;/.config_files/&lt;prefix&gt;_config;\nconfig_file=/cd3user/tenancies/demo/.config_files/demo_oci_config\n\n#Leave the field blank if you want a single outdir or specify outdir_structure_file.properties containing the directory structure for OCI services.\noutdir_structure_file=/cd3user/tenancies/demo/demo_outdir_structure_file.properties\n\n#IaC Tool to be configured - Terraform(specify terraform) or OpenTofu(specify tofu)\ntf_or_tofu=terraform\n\n#path to cd3 excel eg /cd3user/tenancies/&lt;prefix&gt;/CD3-Customer.xlsx\ncd3file=/cd3user/tenancies/demo/CD3-demo.xlsx\n\n#specify create_resources to create new resources in OCI(greenfield workflow)\n#specify export_resources to export resources from OCI(non-greenfield workflow)\nworkflow_type=create_resources\n</code></pre></p> <p>Step 3: Execute the setUpOCI.py script to start creating the terraform/tofu configuration files.</p> <p>Command to Execute: <pre><code>cd /cd3user/oci_tools/cd3_automation_toolkit/\n</code></pre> <pre><code>python setUpOCI.py /cd3user/tenancies/&lt;prefix&gt;/&lt;prefix&gt;_setUpOCI.properties\n</code></pre></p> <p>Example Execution</p> <p>Updated OCI_Regions file !!!</p> <p>Script to fetch the compartment OCIDs into variables file has not been executed. Do you want to run it now? (y|n):</p> <p>\u2192 This prompt appears when executing the toolkit for the very first time or when any new compartments are created using the toolkit. Enter 'y' to fetch the details of compartment OCIDs into variables file.</p> <p>Note</p> <p>Execute \"Fetch Compartments OCIDs to variables file\" from CD3 Services in setUpOCI menu after creating Compartments. This step is required every time a compartment is created via the toolkit or via the OCI console.</p> <p>\u2192 After fetching the compartment details, the toolkit will display the menu options as shown below:</p> <p>Example Execution</p> <p> </p> <p>Choose the resources by specifying a single option (for choosing one of these resources) or comma-separated values (to choose multiple resources) as shown in the sample screenshot above.</p> <p>Expected Outputs: It will generate tfvars files for the services selected at /cd3user/tenancies/&lt;prefix&gt;/terraform_files/&lt;region_dir&gt;/&lt;service_dir&gt;/</p> <p>Step 4: Change the directory to  <code>/cd3user/tenancies/&lt;prefix&gt;/terraform_files/&lt;region_dir&gt;/&lt;service_dir&gt;</code> .</p> <ul> <li> <p>If terraform is selected as the IaC tool initially, execute:</p> <p><code>terraform init</code>  - To initialize and prepare the working/out directory so Terraform can run the configuration.</p> <p><code>terraform plan</code>  - To preview any changes before applying them. Run the plan against OPA policies for compliance against CIS.</p> <p><code>terraform apply</code> - To make the changes defined by Terraform configuration to create, update, or destroy resources in OCI.</p> </li> <li> <p>If tofu is selected, execute:</p> <p><code>tofu init</code>  - To initialize and prepare the working/out directory so tofu can run the configuration.</p> <p><code>tofu plan</code>  - To preview any changes before applying them. Run the plan against OPA policies for compliance against CIS.</p> <p><code>tofu apply</code> - To make the changes defined by tofu configuration to create, update, or destroy resources in OCI.</p> </li> </ul>"},{"location":"greenfield-jenkins/","title":"Create and Manage Resources in OCI (Greenfield Workflow)","text":""},{"location":"greenfield-jenkins/#execute-setupoci-pipeline","title":"Execute setUpOCI Pipeline","text":"<p>Step 1:  Choose the appropriate CD3 Excel sheet template from Excel Templates. Fill the CD3 Excel with appropriate values.</p> <p>Step 2: Login to Jenkins URL with user created after initialization. On the dashboard, a folder with &lt;prefix&gt; name is present.  Click on it. It has the corresponding setupoci pipeline and terraform_files folder. </p> <p>Click on the setupoci pipeline and select Build with Parameters from left side menu.</p> <p></p> <p>Note</p> <p>Only one user at a time using the Jenkins setup is supported in the current release of the toolkit.</p> <p>Step 3: Upload the above filled Excel sheet in Excel_Template section.</p> <p></p> <p>Info</p> <p>This will copy the Excel file at <code>/cd3user/tenancies/&lt;prefix&gt;</code> inside the container. It will also take backup of existing Excel on the container by appending the current datetime if same filename is uploaded in multiple executions.</p> <p>Step 4: Select the workflow as Create New Resources in OCI(Greenfield Workflow). Choose single or multiple MainOptions as required and then corresponding SubOptions.  Check out Provisioning of multiple services together  page while selecting multiple options simultaneously. Below screenshot shows creation of Compartments (under Identity) and Tags (under Governance).</p> <p></p> <p>Click on Build at the bottom.</p> <p>Step 5: setUpOCI pipeline is triggered and stages are executed as shown below. This will run the python script to generate the auto.tfvars.  Once created, it will commit to the OCI Devops GIT Repo and then it will also launch apply pipelines for the services chosen (Stage:ashburn/identity and Stage:ashburn/tagging in the below screenshot).</p> <p></p>"},{"location":"greenfield-jenkins/#execute-terraformtofu-pipelines","title":"Execute terraform/tofu Pipelines","text":"<p>Terraform/tofu pipelines are auto triggered parallely from setupoci pipeline based on the services selected (shown in the last two stages of the above screenshot). </p> <p>Step 1: </p> <p>Click on 'Logs' for Stage: ashburn/identity and click on the pipeline link. </p> <p>Note - Navigating to Dashboard displays pipelines that are in running state at the bottom left corner. Or you can also navigate from Dashboard using the region based view (Dashboard \u2192 prefix \u2192 ashburn View \u2192 service specific pipeline) In this example it would be: cd3toolkit-demo \u00bb terraform_files \u00bb ashburn \u00bb identity \u00bb apply cd3toolkit-demo \u00bb terraform_files \u00bb ashburn \u00bb tagging \u00bb apply </p> <p>Step 2:  Stages of the terraform/tofu pipeline for apply are shown below:</p> <p></p> <p>Step 3: Review Logs for Plan and OPA stages by clicking on the stage and then 'Logs'. </p> <p></p> <p>Step 4:  'Get Approval' stage has timeout of 24 hours, if no action is taken the pipeline will be aborted after 24 hours. Click on this stage and click 'Proceed' to proceed with apply or 'Abort' to cancel the apply.</p> <p></p> <p>Step 5: Below screenshot shows Stage View after clicking on 'Proceed'. Login to the OCI console and verify that resources got created as required.</p> <p></p> <p>Step 6: Similarly click on 'Logs' for Stage: ashburn/tagging and click on the pipeline link and 'Proceed' or 'Abort' the apply</p> <p></p>"},{"location":"group-tf-files/","title":"Grouping set of resources into a single TF state file","text":"<p>The CD3 Automation Toolkit was previously built to generate all the output Terraform files within a designated region directory. OCI components like - Network, Instances, LBaaS, Databases etc., were maintained in a single tfstate file. This was not a viable option for tenancies requiring huge infrastructure.</p> <p>Starting with the Automation Toolkit release v10.1, it is now possible to select separate directories for each Oracle Cloud Infrastructure (OCI) service supported by the toolkit.</p> <p>This can be configured while connecting CD3 container to the OCI tenancy.</p> <p>A new parameter 'outdir_structure_file' has been introduced in tenancyconfig.properties,  which can be used to configure single outdir or different outdir for each service.</p> <p>To enable independent service directories for the generated Terraform files, follow the below steps:</p> <ol> <li> <p>Go to <code>/cd3user/oci_tools/cd3_automation_toolkit/user-scripts/tenancyconfig.properties</code>. Enter required config details. </p> <p>Users have the option to enable or disable multiple service outdirectories based on their specific requirements.</p> <p>To enable it, outdir_structure_file parameter which has the pre-defined path to outdir_structure_file.properties should be uncommented. Refer to the screenshot below:    </p> </li> <li> <p>Under the same user-scripts folder, open outdir_structure_file.properties and modify the directory names if required. They are in the format: OCI_Service_Name=Directory_Name.</p> </li> </ol> <p>Note</p> <ul> <li>Do not modify the OCI service Names specified on the left hand side.Modify the directory name specified on Right Hand Side only.</li> <li>Directory will be created for that service under  directory. Do not provide absolute path. <li>To make any changes to the directory structure later, it is necessary to rerun the \"createTenancyConfig.py\" script from scratch.</li> <li>It is mandatory to specify the directory name for each service.</li> <p></p> <p>Here, the network and nsg directories have been renamed to demo_network and demo_nsg respectively. The next steps to run the toolkit remain the same as specified in Greenfield workflow</p> <ol> <li> <p>Run <code>python createTenancyConfig.py tenancyconfig.properties</code> from user-scripts folder.</p> </li> <li> <p>Go to <code>/cd3user/tenancies/&lt;prefix&gt;/&lt;prefix&gt;_setUpOCI.propertiesfile</code> and add the CD3 Excel path. </p> <p>Change to the below directory  <code>cd /cd3user/oci_tools/cd3_automation_toolkit/</code></p> <p>Run the script<code>python setUpOCI.py /cd3user/tenancies/&lt;prefix&gt;/&lt;prefix&gt;_setUpOCI.properties</code></p> <p>Select required options. (Here,\"Network\", \"nsg\" options have been selected to verify the files under the \"demo_network\", \"demo_nsg\" folders)</p> <p>auto.tfvars for the respective services are created.</p> </li> <li> <p>Go to the region directory <code>/cd3user/tenancies/&lt;prefix&gt;/terraform_files/&lt;region&gt;/</code> . It is clear that all the service-specific folders have been created              successfully.</p> <p></p> </li> <li> <p>Navigate to the demo-network folder. All the auto.tfvars and tfstate files related to Network service can be seen within the demo_network folder. Terraform operations like        terraform init, terraform plan, terraform apply etc., will be executed from within these folders.</p> <p></p> <p>Similarly for all the services, their respective auto.tfvars and tfstate files get grouped under their assigned directories. This makes it much easier to manage OCI resources using          terraform for large-scale infrastructures.</p> <p>Likewise, While doing an export from OCI to terraform, update the tenancyconfig.properties file with path to outdir_structure_file.properties similar to step1 and then follow the  steps to run the toolkit for Non-green field tenancies. With this, all the .sh files with import  commands of a particular OCI service are grouped and can be easily managed.</p> </li> </ol>"},{"location":"install-cd3/","title":"Install CD3","text":"<ol> <li>Configure Prerequisites</li> <li>Launch CD3 Container</li> <li>Connect CD3 Container to OCI</li> </ol> <p> At the end of the installation, a fully configured container will be available to start generating terraform for OCI resources.</p> <p> </p>"},{"location":"isv/","title":"Isv","text":"Export and Clone OCI Infrastructure across tenancies"},{"location":"isv/#table-of-contents","title":"Table of contents:","text":"<p>\u2022  Problem Statement</p> <p>\u2022 How CD3 can help?</p> <p>\u2022 Cloning process</p> <p>\u00a0\u00a0\u00a0 \u2022  Method 1: Using the Excel sheet of source tenancy</p> <p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u2022 Task1.1 :Export resources from Source tenancy</p> <p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u2022 Task1.2: Create resources in Target tenancy</p> <p>\u00a0\u00a0\u00a0  \u2022 Method 2: Using the tfvars of source tenancy</p> <p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u2022 Task2.1: Export resources from Source tenancy</p> <p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u2022 Task2.2: Create resources in Target tenancy</p>"},{"location":"isv/#problem-statement","title":"\u26a0\ufe0f Problem Statement","text":"<p>ISVs or System Integrators often encounter a typical situation of cloning OCI infrastructure in one environment (tenancy/compartment/region) to another environment. It takes few days to months to clone the whole infrastructure manually.</p>"},{"location":"isv/#how-cd3-can-help","title":"\ud83d\udca1 How CD3 can help?:","text":"<p>Using CD3, environments can be cloned within minutes without much effort. </p> <p>There are two ways to do this: </p> <ol> <li>Export infrastructure from source environment to the CD3 toolkit and the exported Excel file is used as an input to create the same infrastructure in target environment.</li> <li>Export infrastructure from source environment to the CD3 toolkit and the generated resources auto.tfvars files are copied to the service specific directories in target container. Generate the plan and execute terraform apply. </li> </ol>"},{"location":"isv/#cloning-process","title":"\u2705 Cloning Process","text":"<p>For both the ways, set up 2 new CD3 containers and connect them to Source Tenancy and Target Tenancy each using steps mentioned in the install-cd3 document. </p> <p>\u2705 Note: Same process should be used to clone Infrastructure resources from one Compartment/Region to another Compartment/Region within the same Tenancy.</p> <p>Important</p> <p>Ensure to have required service limits in the target environment before cloning.</p> <p></p> <p>After the containers are successfully connected to the source and target tenancies, follow the below steps for cloning. This document uses the names source and target for tenancy specific folder and files within source tenancy container and target tenancy container respectively.  </p>"},{"location":"isv/#method-1-using-the-excel-sheet-of-source-tenancy","title":"Method 1: Using the Excel sheet of source tenancy","text":""},{"location":"isv/#task11-export-resources-from-source-tenancy","title":"Task1.1: Export resources from Source tenancy","text":"<ol> <li>Download CD3-Blank-template.xlsx, rename it to source_template.xlsx and place it in the <code>/cd3user/tenancies/source/</code> folder inside the source tenancy container. </li> <li> <p>Open the setUpOCI.properties file.        <pre><code>vi /cd3user/tenancies/source/source_setUpOCI.properties\n</code></pre>    Under cd3_file parameter, add the path to source_template.xlsx:<code>/cd3user/tenancies/source/source_template.xlsx</code>. Set the workflow_type to <code>export_resources</code> and save the file.</p> <p></p> </li> <li> <p>Navigate to cd3_automation_toolkit folder and execute the setUpOCI.py script:    <pre><code>cd /cd3user/oci_tools/cd3_automation_toolkit/\npython setUpOCI.py /cd3user/tenancies/source/source_setUpOCI.properties\n</code></pre></p> <p></p> </li> <li> <p>For the prompt asking to specify region, provide the region in the source tenancy from where the resources have to exported. To export from multiple regions, provide comma separated region values. Eg: <code>ashburn,phoenix</code> . Leave empty to export from all regions.</p> </li> <li>Select required resource options and sub-options from the setUpOCI menu. Select the compartment from which these resources have to be exported. Provide comma separated compartment names to export from multiple compartments. Leave empty to export from all compartments.</li> <li>The source_template.xlsx is now populated with the exported resources data. <p>\u2139\ufe0f Note: The generated shell scripts with terraform import commands need not be executed.</p> </li> </ol> <p></p>"},{"location":"isv/#task12-create-resources-in-target-tenancy","title":"Task1.2: Create resources in Target tenancy","text":"<ol> <li>In the source_template.xlsx, make required changes to match region or other parameters in the target tenancy and rename the Excel file to target_template.xlsx.  <p>\u2139\ufe0f Note: Remove any Oracle-tags from the resource tabs in source_template.xlsx. If custom tags are required, clone them first to the target environment and then proceed with other tagged resources.</p> </li> <li>Switch to the target container. Place target_template.xlsx under the <code>/cd3user/tenancies/target/</code> folder . </li> <li> <p>Open the setUpOCI.properties file.</p> <pre><code>vi /cd3user/tenancies/target/target_setUpOCI.properties\n</code></pre> <p>Under cd3_file parameter, add the path to the target_template.xlsx: <code>/cd3user/tenancies/target/target_template.xlsx</code>. Set the workflow_type to <code>create_resources</code> and save the file.</p> <p></p> <p>\u2139\ufe0f Important:</p> <p>\u25b6 When cloning Network resources, obj_names.safe file under <code>/cd3user/tenancies/source/terraform_files/&lt;region_dir&gt;/network/</code>  in source container has to be copied to same location in target container.</p> <p>\u25b6 The obj_names.safe file contains details about DRGs and their attachments. Hence, if any changes are made to 'VCN name'/'DRG name'/'DRG RT name attached to VCN' in the target_template,  ensure to also update these details in the  obj_names.safe file in target container.   </p> <p>\u25b6 Below are the example obj_names.safe file contents for cross region cloning from Ashburn to Phoenix region with modified VCN and DRG names:</p> <p>obj_names.safe in Source Container:   </p> <p>obj_names.safe in Target Container:   </p> </li> <li> <p>Execute the setUpOCI.py script:    <pre><code>cd /cd3user/oci_tools/cd3_automation_toolkit/\npython setUpOCI.py /cd3user/tenancies/target/target_setUpOCI.properties\n</code></pre></p> </li> <li> <p>From the output menu, select the required resource options and sub-options to generate the respective tfvars.</p> <p></p> </li> <li> <p>Navigate to <code>/cd3user/tenancies/target/terraform_files/&lt;region_dir&gt;/&lt;service_directory/</code> for all required services. Execute the below terraform commands in sequence from each of the service directories to create the resources in target OCI tenancy.</p> <pre><code>   terraform init\n\n   terraform plan\n\n   terraform apply\n</code></pre> </li> </ol>"},{"location":"isv/#method-2-using-the-tfvars-of-source-tenancy","title":"Method 2: Using the tfvars of source tenancy","text":""},{"location":"isv/#task21-export-resources-from-source-tenancy","title":"Task2.1: Export resources from Source tenancy:","text":"<ol> <li>Download CD3-Blank-template.xlsx, rename it to source_template.xlsx and place it in the <code>/cd3user/tenancies/source/</code> folder inside the source tenancy container. </li> <li> <p>Open the setUpOCI.properties file. </p> <p><code>vi /cd3user/tenancies/source/source_setUpOCI.properties</code>.</p> <p>Under the cd3_file parameter, add the path to source_template.xlsx: <code>/cd3user/tenancies/source/source_template.xlsx</code>. Set the workflow_type to <code>export_resources</code> and save the file.</p> <p></p> </li> <li> <p>Execute the setUpOCI.py script:    <pre><code>cd /cd3user/oci_tools/cd3_automation_toolkit/\npython setUpOCI.py /cd3user/tenancies/source/source_setUpOCI.properties\n</code></pre></p> </li> <li>For the prompt asking to specify region, provide the region in the source tenancy from where the resources have to exported. To export from multiple regions, provide  comma separated region values. Eg: <code>ashburn,phoenix</code>. Leave empty to export from all regions.</li> <li>Select required options from the setUpOCI menu. Select the compartments from which these resources have to be exported. Provide comma separated compartment names to export from multiple compartments. Leave empty to export from all compartments. <p>\u2139\ufe0f Note: The generated shell scripts with terraform import commands need not be executed.</p> </li> <li> <p>Navigate to each of the required service folders under the region directory:</p> <p><pre><code>cd /cd3user/tenancies/source/terraform_files/&lt;region_dir&gt;/\n</code></pre>    Copy the generated *.auto.tfvars from each service folder.</p> </li> </ol> <p></p>"},{"location":"isv/#task22-create-resources-in-target-tenancy","title":"Task2.2: Create resources in Target tenancy:","text":"<ol> <li>In the target tenancy container, navigate to <code>/cd3user/tenancies/target/terraform_files/&lt;region_dir&gt;/</code>. Paste the above copied source tfvars files to the respective service folders in each of the regions.</li> <li> <p>In the tfvars files, make any parameter value changes if required for the target tenancy. Make use of 'sed' commands for multiple changes.</p> <p>\u2139\ufe0f Note: Ensure to remove any Oracle-tags from the tfvars files. If custom tags are required, first clone them to the target environment and then proceed with other tagged resources.</p> </li> <li> <p>Execute the below commands in sequence from each of the service directories to create the resources in target OCI tenancy.</p> <pre><code>   terraform init\n\n   terraform plan\n\n   terraform apply\n</code></pre> </li> <li> <p>The target tenancy resources can also be exported to the CD3 Excel template for further management. </p> </li> </ol> <p></p> <p>This is how the CD3 toolkit enables ISVs or any individual users to achieve effortless, error-free cloning of OCI infrastructure across tenancies/compartments. This approach ensures consistent infrastructure across your deployments. </p>"},{"location":"isv_jenkins/","title":"Clone OCI Environments across Tenancies using CD3 automation toolkit through Jenkins Pipelines","text":""},{"location":"isv_jenkins/#introduction","title":"Introduction","text":"<p>ISVs or System Integrators or Partners often encounter a typical situation while cloning OCI Resources from one environment (Tenancy/Compartment/Region) to another environment. It takes few days/months to clone the whole infrastructure manually, which can be achieved seamlesly using CD3 automation toolkit within minutes</p> <p>CD3 stands for Cloud Deployment Design Deliverable. The CD3 Automation toolkit enables you to effortlessly Build, Export and Manage OCI (Oracle Cloud Infrastruture) resources by converting Excel templates to fully functional Terraform modules within minutes. Please click here to know more about CD3 automation toolkit.</p>"},{"location":"isv_jenkins/#objectives","title":"Objectives","text":"<p>\u2022 Clone or Export OCI infrastructure in one environment (Tenancy/Compartment/Region) to another environment using Cloud Deployment Design Deliverable (CD3) automation toolkit through Jenkins Pipelines</p>"},{"location":"isv_jenkins/#prerequisites","title":"Prerequisites","text":"<p>\u2022 Oracle Cloud Infrastructure Identity and Access Management (OCI IAM) policy to allow user to manage the services that are required to be exported/created using CD3 automation toolkit</p> <p>\u2022 The user executing the CD3 should have access to launch OCI Resource Manager stack, atleast READ access in Source OCI Tenancy and Manage Access for required OCI resources (Compute, Network, Storage, etc.) in Target OCI Tenancy</p> <p>\u2022 Set up 2 Compute Instances (Work VM) on OCI and connect one Work VM to Source OCI Tenancy and other to Target OCI Tenancy. Please follow the steps below to deploy the Work VMs and connect to OCI Tenancies.</p> <p>\u2022 A beginner level of understanding of Jenkins is required</p> <p>!!! Important     Ensure to have required service limits in the target environment before cloning</p>"},{"location":"isv_jenkins/#deployment-of-work-vm-using-oci-resource-manager-stack","title":"Deployment of Work VM using OCI Resource Manager Stack","text":"<p>OCI Resource Manager Stack will automatically launch the a linux compute VM in OCI tenancy and configure Podman container on the VM.</p> <ol> <li> <p>Click on below button to directly navigate to OCI Resource Manager stack and fill in required details to launch CD3 Work VM &amp; Container. </p> </li> <li> <p>This action will initiate the deployment of the Work VM in the tenancy after logging in to OCI and will configure the Automation Toolkit on a Podman container within that Work VM. </p> </li> <li> <p>Enter the required details in the Resource manager stack and click on Create</p> </li> <li> <p>After the Apply job is successful, click on it and scroll down to the end of logs and find the details for the created VM, and commands to be executed to login to the toolkit container</p> </li> <li>Login to the VM using private key corresponding to the public key provided during stack creation. Use 'cd3user' or 'opc' user to connect to the VM. Same key has been copied for both the users</li> <li>Please use scp command to copy the excel file to and from the container while executing the toolkit. Below is an example of copying excel file to Work VM <pre><code>scp -i &lt;privaye key pushed to VM while creating stack&gt; &lt;path to excel file on local&gt; cd3user@&lt;Public/Private IP of the VM&gt;:/cd3user/mount_path/&lt;customer_name&gt;\n</code></pre></li> <li>Verify if container is launched using below command. If this command does not return any running container, wait for the stack to finish processing. The progress logs are available at /cd3user/mount_path/installToolkit.log <pre><code>sudo podman ps -a\n</code></pre></li> <li>If above command shows a running CD3 container then exec into the container using below command <pre><code>sudo podman exec -it cd3_toolkit bash\n</code></pre></li> </ol> <p>Important</p> <p>Path /cd3user/mount_path/ on the Work VM is mapped to /cd3user/tenancies inside the container. This local path on Work VM can be used to transfer any data to and from the container to the local laptop</p>"},{"location":"isv_jenkins/#connect-container-to-oci-tenancy","title":"Connect container to OCI Tenancy","text":"<ol> <li>Login to the Container using <code>sudo podman exec -it cd3_toolkit bash</code></li> <li> <p>Choose preferred Authentication Mechanism for OCI SDK</p> <ul> <li>Click here to configure any one of the available authentication mechanisms.</li> </ul> </li> <li> <p>Edit tenancyconfig.properties</p> </li> <li> <p>Change the Directory to below    <pre><code>cd /cd3user/oci_tools/cd3_automation_toolkit/user-scripts/\n</code></pre></p> </li> <li> <p>Fill/Update the input parameters in <code>tenancyconfig.properties</code> file.</p> </li> </ol> <p>tenancyconfig.properties</p>  Parameter Description  Parameter Description Example customer_name Friendly name for the Customer Tenancy demo tenancy_ocid OCID of the tenancy ocid1.tenancy.oc1..aaaaaa...5t region OCI Region identifier us-phoenix-1 auth_mechanism Auth Mechanism for OCI APIs api_key, instance_principal, session_token user_ocid Required only if ${auth_mechanism} is selected as api_key. Leave empty if 'instance_principal' or 'session_token' is used ocid1.user.oc1..aaaaa...6a key_path Required only if ${auth_mechanism} is selected as api_key. Leave empty if 'instance_principal' or 'session_token' is used. Path of API Private Key (PEM Key) File  Defaults to /cd3user/tenancies/keys/oci_api_private.pem when left empty fingerprint Required only if ${auth_mechanism} is selected as api_key. Leave empty if 'instance_principal' or 'session_token' is used 9f:20:0b:....:8c outdir_structure_file The outdir_structure_file defines the grouping of the terraform auto.tf.vars for the various generated resources.To group resources into different directories within each region - specify the absolute path to the file.To have all the files generated in a single directory in the corresponding region, leave this variable blank. Defaults to /cd3user/oci_tools/cd3_automation_toolkit/user-scripts/outdir_structure_file.properties ssh_public_key SSH Key for launched instances; Use '\\n' as the delimiter to add multiple ssh keys. \"ssh-rsa AAXXX......yhdlo\\nssh-rsa AAxxskj...edfwf\"  Advanced Parameters - Fill this to use toolkit with Jenkins  Parameter Description Example compartment_ocid Compartment OCID where Bucket and DevOps Project/repo will be created; defaults to root if left empty. ocid1.compartment.oc1..aaaaaaaa7....ga use_remote_state Remote state configuration: Enter yes if remote state needs to be configured, else tfstate will be stored on local filesystem. Needs to be set as \"yes\" for Jenkins.  yes/no remote_state_bucket_name Specify bucket name if you want to use existing bucket else leave empty.If left empty, Bucket with name ${customer_name}-automation-toolkit-bucket will be created/reused in ${region}. demo_bucket use_oci_devops_git OCI DevOps GIT configuration: Enter yes if generated terraform_files need to be stored in OCI DevOps GIT Repo else they will be stored on local filesystem. Will enforce 'yes' for use_remote_state in case this value is set to 'yes'. Needs to be set as \"yes\" for Jenkins.  yes/no oci_devops_git_repo_name Specify Repo name if you want to use existing OCI Devops GIT Repository else leave empty Format: . If left empty, DevOps items  with names ${customer_name}-automation-toolkit-project/repo/topic will be created/reused in ${region}. demo_repo oci_devops_git_user User Details to perform GIT operations in OCI Devops GIT Repo.          Mandatory when using $(auth_mechanism) as instance_principal or session_token.          Format: &lt;domainName&gt;/&lt;userName&gt;@&lt;tenancyName&gt;         When left empty, it will be fetched from $(user_ocid) for $(auth_mechanism) as api_key.          Customer Secret Key will also be configured for this user for S3 credentials of the bucket when $(auth_mechanism) is instance_principal or session_token oracleidentitycloudservice/devopsuser@oracle.com@ocitenant oci_devops_git_key When left empty, same key file from $(key_path) used for $(auth_mechanism) as api_key will be copied to /cd3user/tenancies/&lt;customer_name&gt;/ and used for GIT Operations. Make sure the api key file permissions are rw(600) for cd3user /cd3user/tenancies/keys/oci_api_private.pem <p>Important</p> <ul> <li>Have the details ready for Authentication mechanism you are planning to use</li> <li>Review outdir_structure_file parameter as per requirements. It is recommended to use separate outdir structure to manage a large number of resources</li> <li>Review Advanced Parameters Section for CI/CD setup. Specifying these parameters as 'yes' in properties file will create Object Storage Bucket and Devops Git Repo/Project/Topic in OCI and enable toolkit usage with Jenkins. The toolkit supports users in primary IDCS stripes or default domains only for DevOps GIT operations</li> </ul> <ul> <li> <p>Initialise the environment to use the Automation Toolkit. <pre><code>python createTenancyConfig.py tenancyconfig.properties\n</code></pre></p> <p>Note</p> <ul> <li>Running the above command immediately after adding API key to the user profile in OCI might result in  Authentication Errors. In such cases, retry after a minute.</li> </ul> </li> <li> <p>Example execution of the script with Advanced Parameters for CI/CD</p> <p></p> </li> </ul> <p>After the containers are successfully connected to the source and target OCI Tenancies, follow the steps below for cloning. </p>"},{"location":"isv_jenkins/#initiate-and-access-jenkins","title":"Initiate and Access Jenkins","text":"<ul> <li> <p>Execute below cmd to start Jenkins -  <code>/usr/share/jenkins/jenkins.sh &amp;</code></p> </li> <li> <p>Access Jenkins URL using: <code>https://&lt;IP of the Jenkins Host&gt;:&lt;Port&gt;</code> </p> </li> </ul> <p>Note</p> <ul> <li><code>&lt;Port&gt;</code> is the port mapped with local system while docker container creation Eg: 8443.</li> <li>Network Connectivity should be allowed on this host and port.</li> <li>Please make sure to use a private server or a bastion connected server with restricted access(i.e. not publicly available).</li> </ul> <ul> <li>It will prompt to create the first user to access Jenkins URL. This will be the admin user.</li> <li>The Automation Toolkit only supports a single user Jenkins setup in this release.</li> <li>After logging in, Jenkins Dashboard will be displayed.</li> </ul>"},{"location":"isv_jenkins/#step-1-export-oci-network-and-compute-resources-to-an-excel-sheet-from-source-oci-tenancy","title":"Step 1 : Export OCI Network and Compute Resources to an Excel sheet from Source OCI Tenancy","text":"<ol> <li> <p>After logging in to Jenkins, click Dashboard, setUpOCI pipeline and Build with Parameters</p> </li> <li> <p>Download the CD3 blank template from here:CD3-Blank-template.xlsx and upload it under the Excel Template section</p> </li> <li> <p>Under Workflow, select Export Existing Resources from OCI (Non-Greenfield Workflow; Import into excel and tfstate)</p> </li> <li> <p>Under MainOptions, select Export Network and Export Compute</p> </li> <li> <p>Under SubOptions, select Export all Network Components for network and Export Instances (excludes instances launched by OKE) for compute</p> </li> </ol> <p></p>"},{"location":"isv_jenkins/#step-2-create-oci-network-and-compute-resources-to-target-oci-tenancy","title":"Step 2 : Create  OCI Network and Compute Resources to Target OCI Tenancy","text":"<ol> <li> <p>Click Dashboard, setUpOCI pipeline and Build with Parameters</p> </li> <li> <p>Under the Excel Template section, upload the updated Excel File from Step 1 above</p> </li> <li> <p>Under Workflow, select Create New Resources in OCI (Greenfield Workflow)</p> </li> <li> <p>Under MainOptions, select Network and Compute.</p> </li> <li> <p>Under SubOptions, select Create Network, Add/Modify/Delete Instances/Boot Backup Policy</p> </li> <li> <p>Click Build. The setUpOCI pipeline stages are executed in order</p> </li> </ol> <p></p> <p>Please Select appropriate MainOptions and SubOptions to export or create other OCI Resources.</p> <p>This is how the CD3 automation toolkit enables ISVs or any individual users to achieve effortless, error-free cloning of OCI infrastructure across tenancies/compartments using Jenkin Pipelines. This approach ensures consistent infrastructure across your deployments.</p>"},{"location":"jenkinsintro/","title":"Jenkins Dashboard","text":"<p>Important</p> <p>Check out the Must Read section for managing network, compute and oci firewall resources.</p> <p></p> <p></p> <p></p> <p></p> <p> <ol> <li> <p>setupoci Pipeline</p> </li> <li> <p>terraform_files Folder</p> </li> <li> <p>Region based Views (including Global directory)</p> </li> </ol> <p></p>"},{"location":"jenkinsintro/#1-setupoci-pipeline","title":"1. setupoci Pipeline","text":"<p>This is equivalent to running setupoci.py from CLI. This will generate the .auto.tfvars files based on the CD3 Excel sheet input for the services chosen and commit them to OCI Devops GIT repo. Additionally, it also triggers apply pipelines for the corresponding services chosen in setupoci pipeline.</p> <p>Below table shows the stages executed in this pipeline along with their description:</p> <p>setupoci Pipeline Stages</p> Stage Name Description Possible Outcomes Validate Input Parameters Validates input file name/size, selected parameters Displays Unstable if any of the  validation fails. Pipeline stops  further execution in that case. Update setupoci.properties Updates &lt;prefix&gt;_setupoci.properties  with input filename and workflow_type Displays Failed if any issue during execution Execute setupoci Executes python code to generate required  tfvars files. The console output for this  stage is similar to setupoci.py execution via CLI. Multiple options selected will  be processed sequentially in this stage. The Excel sheet can be downloaded from Build artifacts of the setupoci pipeline. Displays Failed if any issue occurs   during its execution. Further stages  are skipped in that case. Run Import Commands Based on the workflow_type as 'Export Existing Resources from OCI',  this stage invokes execution of  import_commands_&lt;resource&gt;.sh  shell scripts which will import the   exported objects into tfstate. import_commands for  multiple options selected will be   processed sequentially in this stage.  This stage is skipped for 'Create New Resources in OCI' workflow  Displays Failed if any issue occurs during its execution.   Further stages are skipped in that case. Git Commit to develop Commits the terraform_files folder to OCI DevOps GIT Repo develop branch.  This will trigger respective terraform pipelines Pipeline stops further execution if there is nothing to commit. In some cases when tfvars was generated in previous execution,  navigate to  apply pipeline and trigger that manually  Trigger Pipelines Corresponding terraform/tofu apply pipelines  are auto triggered based on the service chosen"},{"location":"jenkinsintro/#a-download-cd3-excel-file","title":"a. Download CD3 Excel File","text":"<p> Click here  for the steps to download excel file after successful completion of 'Execute setupoci' stage of the pipeline. The Excel file is available as an artifact for each build of the setupoci pipeline.</p> <p>Note: For create_resources (Greenfield workflow), this will be the same Excel file which was uploaded to create resources in OCI. For export_resoucres (Non-Greenfield workflow), this will be the updated Excel file with exported OCI resource data.</p>"},{"location":"jenkinsintro/#2-terraform_files-folder","title":"2. terraform_files Folder","text":"<p>This is equivalent to <code>/cd3user/tenancies/&lt;prefix&gt;/terraform_files</code> folder on your local system. The region directories along with all service directories, are present under this terraform_files folder. The toolkit will generate the .tfvars files for all resources under the service directory. Inside each service directory, pipelines for terraform/tofu apply and destroy are present.</p> <p>The pipelines are either triggered automatically from setupoci pipeline or they can be triggered manually by navigating to any service directory path. </p> <p>apply Pipeline Stages</p> Stage Name Description Possible Outcomes Checkout SCM Checks out the latest terraform_files  folder from DevOps GIT repo develop branch Set Environment Variables Sets the environment variables for region and service name Plan Runs plan against the  checked out code and saves it in tfplan.out Pipeline stops further execution if the plan shows no changes.  Displays Failed if any issue while executing the plan OPA Runs the above generated plan against  Open Policies and displays the violations if any Displays Unstable if any OPA rule is violated Get Approval Approval Stage for reviewing the plan.  There is 24 hours timeout for this stage. Proceed - goes ahead with Apply stage.  Abort - pipeline is aborted and stops further execution Apply Applies the terraform/tofu configurations Displays Failed if any issue  while executing apply Git Commit to main Commit to main branch Stage is skipped if any issue while executing apply <p>destroy Pipeline Stages</p> Stage Name Description Possible Outcomes Checkout SCM Checks out the latest terraform_files  folder from DevOps GIT repo develop branch Set Environment Variables Sets the environment variables for region and service name Plan Runs <code>terraform plan -destroy</code> or  <code>tofu plan -destroy</code> against the checked out code Displays Failed if any issue in plan output Get Approval Approval Stage for reviewing the plan.  There is 24 hours timeout for this stage. Proceed - goes ahead with  Destroy stage.  Abort - pipeline is aborted and stops furter execution Destroy Destroys the terraform/tofu configurations Displays Failed if any issue  while executing destroy Git Commit to main Removes tfvars from respective directory in main branch of repo Stage is skipped if any issue while executing apply"},{"location":"jenkinsintro/#3-region-based-views","title":"3. Region Based Views","text":"<p>Clicking on any of the views displays all apply and destroy pipelines in a single screen. This can also be used to trigger the terraform/tofu pipelines. This also includes Global view for global services like RPC.</p>"},{"location":"jobs-migration/","title":"Migrate Jobs from Automation Toolkit Jenkins to Customer Jenkins Environment","text":"<ol> <li> <p>Copy Jobs Folder</p> <ul> <li> <p>Copy the folders from the Automation Toolkit Jenkins home path <code>/cd3user/tenancies/jenkins_home/jobs/</code> to the corresponding home directory in the Customer Jenkins instance (typically <code>/var/jenkins_home</code>).</p> <p></p> </li> </ul> </li> <li> <p>Set up OCI Devops repository SSH Authentication</p> <ul> <li> <p>Ensure SSH authentication is configured and operational on the Customer Jenkins instance. For detailed instructions, refer to the OCI Code Repository documentation.</p> <p>Note - Steps to change the GIT repo are explained in next section.</p> </li> <li> <p>Ensure the Git repository has all the generated terraform code and branches for the terraform deployment pipelines to work properly for customer prefixes. </p> <p>Copy or create the SSH configuration file from the CD3 Jenkins instance to the customer's Jenkins instance. The file is located at /cd3user/.ssh/config on the CD3 Jenkins instance.</p> </li> </ul> </li> <li> <p>Ensure Availability of Ansi Color Plugin</p> <ul> <li>Confirm the presence of the Ansi color plugin in the Customer Jenkins instance. This plugin is utilized in Automation Toolkit pipeline Groovy code and is necessary if not already installed. Plugin link: Ansicolor Plugin.</li> </ul> </li> <li> <p>Install Terraform Binary</p> <ul> <li>Make sure the Terraform binary is installed and accessible for the Jenkins user within the Jenkins instance. Installation guide: Terraform Installation.</li> </ul> </li> <li> <p>Update Optional Attribute Field inside Terraform Provider Block at <code>/cd3user/tenancies/&lt;prefix&gt;/terraform_files/&lt;region&gt;&lt;service_dir&gt;/provider.tf</code></p> <ul> <li> <p>Include an  attribute as highlighted below within the Terraform provider block. This is optional but necessary in case Terraform plan encounters an error.</p> <pre><code>  experiments = [module_variable_optional_attrs]\n</code></pre> <p></p> </li> </ul> </li> <li> <p>Update the correct value for private_key_path variable in <code>/cd3user/tenancies/&lt;prefix&gt;/terraform_files/&lt;region&gt;&lt;service_dir&gt;/variables_&lt;region&gt;.tf</code></p> </li> <li> <p>Configure S3 Backend Credentials in Customer Jenkins Instance</p> <ul> <li> <p>Update the correct path within the <code>backend.tf</code> file for Terraform.</p> <p></p> </li> </ul> </li> <li> <p>Push the above changes to Devops GIT repository so that pipline can get the latest commits/changes and execute it.</p> </li> <li> <p>Stop/Start the Customer Jenkins Instance for the changes to take effect. This is applicable for any configuration changes in Jenkins.</p> <p>Additionally, copy the init.groovy.d folder from the jenkins_home directory of the CD3 Jenkins instance to the jenkins_home directory of the customer's instance</p> </li> <li> <p>Job and Pipeline Configuration</p> <ul> <li> <p>Verify that the specified jobs and pipelines, initialized by the Automation Toolkit, are visible in the Customer Jenkins instance.</p> <p></p> </li> </ul> </li> <li> <p>Pipeline Job Output         </p> </li> </ol> <p></p>"},{"location":"jobs-migration/#update-the-git-url-for-all-pipeline-jobs-in-the-customer-jenkinsif-required","title":"Update the Git URL for all pipeline jobs in the Customer Jenkins(if required).","text":"<ol> <li>Remove terraform_files folder under /jobs folder <li> <p>Create <code>jenkins.properties</code> File</p> <ul> <li> <p>Copy the <code>jenkins.properties</code> file from Automation Toolkit Jenkins home folder <code>/cd3users/tenancies/jenkins_home/</code> to the customer jenkins home (typically <code>/var/jenkins_home/</code>) directory in customer Jenkins Instance (Below is sample content):</p> <p>git_url= \"ssh://devops.scmservice.us-phoenix-1.oci.oraclecloud.com/namespaces//projects/toolkitdemo-automation-toolkit-project/repositories/toolkitdemo-automation-toolkit-repo\"   regions=['london', 'phoenix']   services=['identity', 'tagging', 'network', 'loadbalancer', 'vlan', 'nsg', 'compute', 'database', 'fss', 'oke', 'ocvs', 'security', 'managementservices', 'budget', 'cis', 'oss', 'dns']   outdir_structure=[\"Multiple_Outdir\"] <li> <p>Update the <code>git_url</code> in the <code>jenkins.properties</code> File</p> <ul> <li>Open the <code>jenkins.properties</code> file located in the <code>/var/jenkins_home/</code> directory.</li> <li> <p>Update the <code>git_url</code> in the file with the new Git server URL.</p> <p></p> </li> </ul> </li> <li> <p>Copy <code>01_jenkins-config.groovy</code> File</p> <ul> <li>Copy the <code>01_jenkins-config.groovy</code> file from the Automation Toolkit Jenkins path (<code>/cd3user/tenancies/jenkins_home/init.groovy.d</code>) to the init path of the Customer Jenkins instance.</li> <li> <p>Update the path to the groovy file accordingly.</p> <p></p> </li> </ul> </li> <li> <p>Restart Customer Jenkins Instance</p> <ul> <li>Stop and start the Customer Jenkins instance to apply the changes.</li> <li> <p>After that, all Git URLs will be updated and point to new Git Url inside pipeline jobs.</p> <p></p> </li> </ul> </li> <li> <p>Ensure SSH Authentication</p> <ul> <li>Confirm that SSH authentication is enabled for the new GIT repository from the Jenkins instance.</li> <li>Alternatively, use the respective authentication method if relying on other methods.</li> </ul> </li>"},{"location":"knownbehaviour/","title":"Expected Behaviour Of Automation Toolkit","text":"<p>Note</p> <ol> <li>Automation Tool Kit DOES NOT support the creation/export of duplicate resources.</li> <li>Automation Tool Kit DOES NOT support sharing of Block Volumes.</li> <li>As of the CD3 v2025.1.0, the export of FSS is supported only by Regions and Compartments, not based on Tags. </li> </ol> <p>Warning</p> <ol> <li>DO NOT modify/remove any commented rows or column names. You may re-arrange the columns if needed.</li> <li>A double colon (::) or Semi-Colon (;) has a special meaning in the Tool Kit. Do not use them in the OCI data / values.</li> <li>Do not include any unwanted space in cells you fill in; do not place any empty rows in between.</li> <li>Any entry made/moved post \\ in any of the tabs of CD3 will not be processed. Any resources created by the automation &amp; then moved after the \\ will cause the resources to be removed. <p>Important</p> <ol> <li>The components that get created as part of VCNs Tab (Example: IGW, SGW, LPG, NGW, DRG) will have the same set of Tags attached to them.</li> <li>Some points to consider while modifying networking components are:</li> <li>Converting the exported VCN to Hub/Spoke/Peer VCN is not allowed. Route Table rules based on the peering for new LPGs to existing VCNs will not be auto populated. Users are requested to add an entry to the RouteRulesInOCI sheet to support the peering rules.</li> <li>Adding a new VCN as Hub and other new VCNs as Spoke/Peer is allowed. Gateways will be created as specified in VCNs sheet.</li> <li>Adding new VCNs as None is allowed. Gateways will be created as specified in VCNs sheet.</li> <li>The addition of new Subnets to exported VCNs and new VCNs is allowed.</li> <li>You might come across below error during export of NSGs(while runnig terraform import commands for NSGs). It occurs when NSG and the VCN are in different compartments. In such cases,  modify \\&lt;prefix&gt;_nsgs.auto.tfvars, specify the compartment name of the VCN in network_compartment_id field of the problematic NSG.</li> </ol> <p> </p> <p>8.. When you have exported Identity and Network services together in single outdirectory for the first time and executing identity import script. You might see import failure with below error message. Execute Major network import script first then run Identity import script. </p> <p> !!!!!!!!!!!!!!!!!!!!!!!!!!! TERRAFORM CRASH !!!!!!!!!!!!!!!!!!!!!!!!!!!!  4 problems: - Failed to serialize resource instance in state: Instance data.oci_core_drg_route_distributions.drg_route_distributions[\"DRG-ASH_Autogenerated-Import-Route-Distribution-for-ALL-routes\"] has status ObjectPlanned, which cannot be saved in state. - Failed to serialize resource instance in state: Instance data.oci_core_drg_route_distributions.drg_route_distributions[\"DRG-ASH_Autogenerated-Import-Route-Distribution-for-VCN-Routes\"] has status ObjectPlanned, which cannot be saved in state.  </p>"},{"location":"knownbehaviour/#terraform-behavior","title":"Terraform Behavior","text":"<p>1. Create a Load Balancer with Reserved IP: When you create a LBaaS with reserved ip as \"Y\" and do a terraform apply, everything will go smooth and be in sync for the first time. If you do a terraform plan immediately (post apply), you will find that the plan changes the private ip of load balancer to null.</p> <p></p> <p>This is a behaviour of Terraform.  In these scenarios, add the private ip ocid to the auto.tfvars as shown below before you run a terraform plan again.</p> <p></p> <p>Once you do the above change, and then execute a terraform plan/apply, you will get the below error and it can be ignored.</p> <p></p> <p>2.  While exporting and synching the tfstate file for LBaaS Objects, the user may be notified that a few components will be modified on apply. In such scenarios, add the attributes that the Terraform notifies to be changed to the appropriate CD3 Tab of Load Balancer and uncomment the parameter from Jinja2 Templates and Terraform (.tf) files. Re-run the export.</p> <p>3. Add a new column - \"Freeform Tags\" to the CD3 Excel Sheets as per necessity, to export the tags associated with the resource as well. If executed as-is, Terraform may prompt you to modify resources based on Tags.</p> <p>Example:</p> <p></p> <p>4. Toolkit will create TF for only those DRGs which are part of CD3 and skip Route Tables for the DRGs created outside of CD3. This will also synch DRG rules in your tenancy with the terraform state.</p> <p>Note When there are changes made in the OCI console manually, the above options of export and modify can be helpful to sync up the contents/objects in OCI to TF.</p> <p>5. Match All criteria specified for Route Distribution Statement In DRGs sheet will show below output each time you do terraform plan:</p> <p></p> <p>The service api is designed in such a way that it expects an empty list for match all. And it sends back an empty list in the response every time. Hence this behaviour from terraform side. This can be safely ignored.</p> <p>6. Export process for non greenfield tenancies v6.0 or higher will try to revert SGW for a VCN to point to all services if it was existing for just object storage. You will get output similiar to below when terraform plan is run (Option 3 with workflow_type set to export_resources).</p> <pre><code>   # oci_core_service_gateway.VCN_sgw will be updated in-place\n\n   ~ resource \"oci_core_service_gateway\" \"VCN_sgw\" {\n\n\n                block_traffic  = false\n\n                compartment_id = \"ocid1.compartment.oc1..aaaaaaaahsesjfw5hhftccsvndbufdlf5ca2c3q3clyvwg4wngj4ej26i3ya\"\n\n                display_name   = \"VCN_sgw\"\n                freeform_tags  = {}\n\n                id             = \"ocid1.servicegateway.oc1.iad.aaaaaaaajqtpjqy7ihgikmug5kbz55pztymt7m6t4ijlqek5ujqg3qxeaxma\"\n\n                state          = \"AVAILABLE\"\n\n                time_created   = \"2019-03-19 16:46:33.859 +0000 UTC\"\n\n                vcn_id         = \"ocid1.vcn.oc1.iad.aaaaaaaazjup6ahpesjgrjyaxr2bcnx44tpn3ygvx2tjylytgkub5ikl6rha\"\n\n\n              - services {\n\n                  - service_id   = \"ocid1.service.oc1.iad.aaaaaaaa74z6sqsezqf6znyomdp5jkvfwb4j2ol33abgosvnhxcqphyl3eaq\" -&gt; null\n\n                  - service_name = \"OCI IAD Object Storage\" -&gt; null\n\n                }\n\n              + services {\n\n                  + service_id   = \"ocid1.service.oc1.iad.aaaaaaaam4zfmy2rjue6fmglumm3czgisxzrnvrwqeodtztg7hwa272mlfna\"\n\n                  + service_name = (known after apply)\n\n                }\n\n                timeouts {}\n\n}\n</code></pre> <p>7. If the description field is having any newlines in the tenancy then the export of the component and tf synch will show output similar to below:</p> <pre><code>      # module.iam-policies[\u201cConnectorPolicy_notifications_2023-03-06T21-54-41-655Z\u201d].oci_identity_policy.policy will be updated in-place\n      ~ resource \u201coci_identity_policy\u201d \u201cpolicy\u201d {\n      ~ description  = &lt;&lt;-**EOT**\n          This policy is created for the \u2018OCI_To_Sentinel\u2019 service connector\n          Date: Mon, 06 Mar 2023 21:54:41 GMT\n          User: oracleidentitycloudservice/abc@oracle.com\n          Tenant: test\n          Connection Source: notifications\n        **EOT**\n        id       = \u201cocid1.policy.oc1..aaaaaaaa5gct2n6vz4arggmeow27rivu5vro6jjb6ccuq5u2phulghgwx\u201d\n        name      = \u201cConnectorPolicy_notifications_2023-03-06T21.54.41.655Z\u201d\n        # (9 unchanged attributes hidden)\n        # (1 unchanged block hidden)\n      }\n      Plan: 0 to add, 1 to change, 0 to destroy.\n</code></pre> <p>This is how terraform handles newlines in the fields. Pleage ignore this and proceed with terraform apply.</p> <p>8. Terraform ordering changes observed during plan phase for OCI compute plugins.</p> <p></p> <p>It changes the order of plugin's in terraform state file and doesn't change anything in OCI console for compute resource.</p> <p>9. After executing import_commands during export of service connectors, the terraform plan will show log-sources ordering as changes and it rearranges the order for log-sources for that service connector if source/target kind is logging. This can be ignored and you can proceed with terraform apply.</p> <p></p> <p>10. When exporting Virtual Private Vault's Replica to terraform, after executing the import_commands_kms.sh script,  the terraform plan indicates the creation of a new OCI vault replication resource. This happens because there is no terraform import command for replication resource. </p> <p>As a temporary work-around, open the &lt;prefix&gt;_kms_auto.tfvars file and remove the replica_region parameter from the replica's source vault dictionary. This will allow users to add or modify other resources without creating a new replica. Check below image for reference.</p> <p></p> <p>11.</p> <ul> <li> <p>When exporting groups (normal and dynamic) from IAM domains, post executing the import_commands_groups.sh script, the plan shows changes for matching rules and members. This is because those values are not getting imported to the state.</p> <p>Ignore this and proceed with apply as it will not change anything in the OCI console for groups.</p> <pre><code>    # module.groups[\"default_CD3-Test-DG-Group\"].oci_identity_domains_dynamic_resource_group.dynamic_group[0] will be updated in-place\n      ~ resource \"oci_identity_domains_dynamic_resource_group\" \"dynamic_group\" {\n            + attribute_sets          = [\n            + \"all\",\n              ]\n            + attributes              = \"matching_rule\"\n            id                        = \"2b8b98646c2e40179a3ae4743ddfdfde\"\n            + matching_rule           = \"Any {instance.compartment.id = 'ocid1.compartment.oc1..aaaaaaaaqu7vgfvtkvghrza3xs2qjogkgervv3pwrbdxf5tlcgdjkwwivnrq'}\"\n            # (14 unchanged attributes hidden)        # (2 unchanged blocks hidden)\n        }\n\n    # module.groups[\"default_Test_Group\"].oci_identity_domains_group.group[0] will be updated in-place\n      ~ resource \"oci_identity_domains_group\" \"group\" {\n          + attribute_sets      = [\n              + \"all\",\n              ]\n              + attributes           = \"members\"\n              id  = \"6383c6a3c75c49289ec0bcc7042a83b7\"\n              # (12 unchanged attributes hidden)      + members {\n              + type  = \"User\"\n              + value = \"69db38ed20b9438f94e2fca7bd39736a\"\n            }        # (3 unchanged blocks hidden)\n        }\n\n  Plan: 0 to add, 2 to change, 0 to destroy.\n</code></pre> </li> <li> <p>When exporting groups (normal and dynamic) from IDCS, post executing the import_commands_groups.sh script, the plan shows a replacement for group membership.    Ignore this and proceed with apply as it will not change anything in the OCI console for groups.</p> <pre><code>  # module.iam-groups[\"grp1\"].oci_identity_user_group_membership.user_group_membership[\"abc@oracle.com\"] must be replaced\n  -/+ resource \"oci_identity_user_group_membership\" \"user_group_membership\" {\n        ~ compartment_id = \"ocid1.tenancy.oc1..aaaaaaaa5ob2e73i4bavdqrbrch25oldljvpmbcuxiies2dgpwdinmrmel3a\" -&gt; (known after apply)\n        ~ id             = \"ocid1.groupmembership.oc1..aaaaaaaaijpj3ezbultskrut4dnwworwuzn3htixjtpbt3cn3xkyq3oy4dka\" -&gt; (known after apply)\n        + inactive_state = (known after apply)\n        ~ state          = \"ACTIVE\" -&gt; (known after apply)\n        ~ time_created   = \"2024-08-07 09:54:16.596 +0000 UTC\" -&gt; (known after apply)\n        ~ user_id        = \"ocid1.user.oc1..aaaaaaaawkqkcpjkmjsirt7vko6iwyhcdvubrwrcjae77zhv6gzz7t6yrpya\" # forces replacement -&gt; (known after apply) # forces replacement\n          # (1 unchanged attribute hidden)\n      }\n</code></pre> </li> </ul> <p>12.   - When exporting events, post executing the import_commands_events.sh script, the plan shows changes as below. Ignore this and proceed with apply as it will not change anything in the OCI console for events.     </p>"},{"location":"launch-container/","title":"Launch CD3 Container","text":"<p>Launch CD3 container either using Resource Manager Stack(preferred method) or manually.</p> <p></p> <p>Launch with Resource Manager Stack Manual Container Launch</p>"},{"location":"launch-from-local/","title":"Manual Container Launch","text":"<p>Tip</p> <ul> <li>Launching CD3 container using OCI Resource Manager stack is preferred method as it reduces the manual effort.</li> <li>With below method, users are required to clone the Devrel GitHub repo and execute commands to build and run the docker container.</li> </ul> <p> Prerequisites</p> <ul> <li>Git</li> <li>Any docker CLI compatible platform such as Docker or Rancher. See How to Install and Configure Rancher Desktop for reference.</li> <li>Local Directory - A directory in your local system that will be shared with the container to hold the generated Terraform files.</li> <li>OCI Tenancy Access as defined in Prerequisistes.</li> </ul>  Additional Steps needed while launching Container on a Linux Platform manually  Below commands create a user local user called cd3user on the VM and configures it. Also sets SELINUX to Permissive.  <pre><code>useradd --u 1001 cd3user\nsudo echo cd3user ALL=\\(root\\) NOPASSWD:ALL &gt; /etc/sudoers.d/cd3user\nchmod 0440 /etc/sudoers.d/cd3user\n\nsudo setenforce 0\nsudo sed -c -i \"s/\\SELINUX=.*/SELINUX=permissive/\" /etc/sysconfig/selinux\nsudo getenforce\n\nsudo mkdir -p /cd3user/mount_path\nsudo chmod 775 -R /cd3user\nsudo chown -R cd3user:cd3user /cd3user\nsudo mkdir /home/cd3user/.ssh\nsudo cp /home/opc/.ssh/authorized_keys /home/cd3user/.ssh/authorized_keys\nsudo chown -R cd3user:cd3user /home/cd3user/.ssh\nsudo chmod 700 /home/cd3user/.ssh\n</code></pre> <p>Step 1 - Clone the repo</p> <ul> <li>Open the terminal and navigate to the directory where the Git repo will be downloaded.</li> <li>Run the git clone command as shown below: \u00a0 \u00a0 \u00a0 \u00a0  <pre><code>git clone https://github.com/oracle-devrel/cd3-automation-toolkit\n</code></pre></li> <li>Once the cloning command is executed successfully, the repo will replicate to the local directory. </li> </ul> <p>Step 2 - Build an image</p> <ul> <li>Change directory to 'cd3-automation-toolkit'(i.e. the cloned repo in your local).</li> <li> <p>If you are using mac, Edit Dockerfile to update uid for cd3user to match with uid of the user on local host to avoid permission issues. This step is needed if you plan to use toolkit with Jenkins or OCI DevOps GIT repo. <pre><code>vi Dockerfile\n</code></pre></p> <p>Search for the line <code>ARG USER_UID=1001</code> and replace <code>1001</code> with uid of the user on local host eg 503 for Mac users.</p> </li> <li> <p>Optional:  If you do not want to use CD3 toolkit with Jenkins, you can skip the installation of Jenkins during image build. <pre><code>vi Dockerfile\n</code></pre>      Search for the line <code>ARG USE_DEVOPS=YES</code> and replace <code>YES</code> with <code>NO</code>.</p> </li> <li> <p>Run  <pre><code>docker build --platform linux/amd64 -t cd3toolkit:${image_tag} -f Dockerfile --pull --no-cache .\n</code></pre></p> </li> </ul> <p>Note</p> <p>${image_tag} should be replaced with suitable tag as per your requirements/standards. eg v2024.4.1 The period (.) at the end of the docker build command is required.</p> <p>Step 3 - Save the image (Optional)</p> <ul> <li>Run <pre><code>docker save cd3toolkit:${image_tag} | gzip &gt; cd3toolkit_${image_tag}.tar.gz\n</code></pre></li> </ul> <p>Step 4 - Run the container alongwith VPN (Applicable for VPN users only)</p> <ul> <li>Connect to the VPN.</li> <li>Make sure to use version 1.9 for Rancher deskop, if not, install the latest.</li> <li> <p>Make sure to Enable Networking Tunnel under Rancher settings as shown in the screenshot below,</p> <p></p> </li> <li> <p>Login to the CD3 docker container using next section and set the proxies(if any) which helps to connect internet from the container.</p> </li> </ul> <p>Step 5 - Run the container</p> <ul> <li>Run <pre><code>docker run --name cd3_toolkit --platform linux/amd64 -it -p &lt;port_number_in_local_system&gt;:8443 -d -v &lt;directory_in_local_system_where_the_files_must_be_generated&gt;:/cd3user/tenancies &lt;image_name&gt;:&lt;image_tag&gt;\n</code></pre></li> </ul> Example for MacExample for Windows  <pre><code>docker run --name cd3_toolkit --platform linux/amd64 -it -p 8443:8443 -d -v /Users/&lt;user_name&gt;/mount_path:/cd3user/tenancies cd3toolkit:v2024.1.0\n</code></pre> <pre><code>docker run --name cd3_toolkit --platform linux/amd64 -it -p 8443:8443 -d -v D:/mount_path:/cd3user/tenancies cd3toolkit:v2024.1.0\n</code></pre> <p>Caution</p> <p>If launching the container in cloud, make sure to use a private server or a bastion connected server with restricted access(i.e. not publicly available) to host the container.</p> <ul> <li> <p>Run  <code>docker ps</code> to see running containers on the system.</p> </li> <li> <p>Run <code>docker exec -it cd3_toolkit bash</code> to exec into the running container. </p> </li> <li> <p> Follow Connect container to tenancy for next steps. </p> </li> </ul>"},{"location":"launch-from-rmstack/","title":"One Click Deployment","text":"<p>This method will automatically launch the linux compute VM in OCI tenancy and configure Podman container on the VM.  Prerequisites</p> <ul> <li>The user deploying the stack should have access to launch OCI Resource Manager stack, compute instance and network resources.</li> </ul> <p>Sample Policies</p> <p>Allow group &lt;group_name&gt; to manage orm-stacks in compartment &lt;name&gt;   Allow group &lt;group_name&gt; to manage orm-jobs in compartment &lt;name&gt;.  Allow group &lt;group_name&gt; to manage instance-family in compartment &lt;name&gt;  Allow group &lt;group_name&gt; to manage virtual-network-family in compartment &lt;name&gt; </p> <p></p> <ul> <li> Click on below button to directly navigate to Resource Manager stack in the OCI Tenancy and fill in required details to launch CD3 Work VM and Container. </li> </ul>  Alternate way to deploy the stack if above button does not work (eg for Gov tenancies)       -  Clone the repo using 'Download the Zip' link as shown below:                 -  Login to OCI Console and navigate to 'Developer Services' -&gt; Stacks under 'Resource Manager' and click on Create Stack. Chose .zip file and select the downloaded zip file as shown below:           <ul> <li> <p> This action will initiate the deployment of the Work VM in the tenancy after logging in to OCI and will configure the Automation Toolkit on a Podman container within that VM. </p> </li> <li> <p> Enter the required details in the Resource manager stack and click on create.</p> </li> </ul> <p>Warning</p> <p>To maintain a secure environment, provide a specific source CIDR range to access the VM. Do not use 0.0.0.0/0.</p> <p>Note</p> <p>In case existing network is chosen to launch Work VM, it needs to have outbound internet connectivity. See URLs that need to be whitelisted for outbound connectivity.</p> <ul> <li> After the Apply job is successful, click on it and scroll down to the end of logs and find the details for the created VM, and commands to be executed to login to the toolkit container. </li> </ul> <p>Note</p> <p>The VM launched using RM stack will have v1 IMDS endpoints disabled, PV encryption and the bastion plugin enabled.</p> <ul> <li> Login to the VM using private key corresponding to the public key provided during stack creation. Use 'cd3user' or 'opc' user to connect to the VM. Same key has been copied for both the users.</li> <li> <p> Follow Steps to transfer the CD3 Excel file to and from the container while executing the toolkit.</p> </li> <li> <p> Verify if container is launched using below command. If this command does not return any running container, wait for the stack to finish processing. The progress logs are available at /cd3user/mount_path/installToolkit.log</p> </li> </ul> <pre><code>sudo podman ps -a\n</code></pre> <p>Important</p> <p>Path /cd3user/mount_path/ on the VM is mapped to /cd3user/tenancies inside the container. This local path on VM can be used to transfer any data to and from the container to the local laptop.</p> <ul> <li> If above command shows a running CD3 container then exec into it using below command - </li> </ul> <pre><code>sudo podman exec -it cd3_toolkit bash\n</code></pre> <ul> <li> Follow Connect CD3 Container to OCI for next steps. </li> </ul>"},{"location":"learningvideos/","title":"Automation Toolkit Learning Videos","text":"<ul> <li>CD3 Automation Toolkit- A Quick Overview</li> <li>Part 1 - Introduction to CD3 Automation Toolkit</li> <li>Part 2 - Setup CD3 toolkit in a single click using OCI Resource Manager Stack</li> <li>Part 3a - How to install and configure Rancher Desktop with CD3</li> <li>Part 3b - How to create the image and run the container with CD3</li> <li>Part 4 - Connect CD3 Automation toolkit container to OCI tenancy</li> <li>Part 5 - How to use CD3 Excel Sheets</li> <li>Part 6 - Execute the CD3 Automation toolkit using CLI to create resources in OCI</li> <li>Part 7 - Execute the CD3 Automation Toolkit using CLI to export resources in OCI</li> <li>Part 8 - Execute the CD3 Automation toolkit using Jenkins to create resources in OCI</li> <li>Part 9 - Execute the CD3 Automation toolkit using Jenkins to export resources from OCI</li> <li>Part 10 - Support for Additional Attributes - CD3 Automation toolkit</li> </ul> <p>Here is the Youtube playlist  link for all these videos.</p>"},{"location":"manage-compute/","title":"Manage Compute","text":""},{"location":"manage-compute/#create-new-compute-instances-in-ocigreenfield-workflow","title":"Create New Compute Instances in OCI(Greenfield Workflow)","text":"<p>Provisioning of compute instances using Automation Toolkit involves the below steps:</p> <ul> <li>Adding the VM details to the \"Instances\" Excel Sheet.</li> <li>Updating the <code>/cd3user/tenancies/&lt;prefix&gt;/terraform_files/&lt;region&gt;/&lt;service_dir&gt;/variables_&lt;region&gt;.tf</code> file with information about ssh key, source ocid. </li> <li>Running the toolkit with 'Create Resources' workflow to generate *.auto.tfvars.</li> <li>Executing Terraform/Tofu to provision the resources in OCI.</li> </ul> <p>1. Update Excel Sheet</p> <ul> <li> <p>\"Display Name\" column is case sensitive. Specified value will be the display name of Instance in OCI console. </p> </li> <li> <p>Optional columns can also be left blank - like Fault Domain, IP Address. They will take default values when left empty. </p> </li> <li> <p>Leave columns: Backup Policy, NSGs, DedicatedVMHost blank if instance doesn't need to be part of any of these. Instances can be made a part of Backup Policy and NSGs later by choosing appropriate option in setUpOCI menu. </p> </li> <li> <p>Enter subnet name column value as: <code>&lt;network-compartment-name&gt;@&lt;vcn-name&gt;::&lt;subnet-name&gt;</code> </p> </li> <li> <p>Create_Is PV Encryption In Transit Enabled attribute should be set to True to enable encryption for new instances. Default is False. </p> </li> <li> <p>Update_Is PV Encryption In Transit Enabled attribute should be set to True to enable encryption for existing instances. </p> </li> <li> <p>Add any additional attributes (not part of excel sheet already) following this link. </p> </li> <li> <p>To enable or disable a plugin for the instance add new column with name as <code>Plugin &lt;plugin-name-in-console&gt;</code> eg 'Plugin Bastion'.     Valid values are Enabled or Disabled </p> </li> <li> <p>Mention shape to be used in Shape column of the excel sheet. If Flex shape is to be used format is: <code>shape::ocpus</code> eg <code>VM.Standard.E3.Flex::5</code></p> </li> <li> <p>Custom Policy Compartment Name: Specify the compartment name where the Custom Policy is created.</p> </li> </ul> <p>Managing Remote Execution</p> <p>Note</p> <p>Before configuring remote execution for OCI instance(s), ensure network connectivity through Bastion host or direct reach to the OCI instance(s) from where terraform is being invoked.</p> <p>Remote execution should be used as the last resort or only during initial provisioning for a given OCI instance(s). This feature cannot be used for export of instances.</p> <ul> <li>Add the 'Remote Execute' columm to the excel sheet for the corresponding instance entry. Format is: bastion_ip@ <li>Skip bastion_ip if there is direct connectivity with target servers via VPN.</li> <li>Scripts folder should have the ansible script files or shell script files and ssh-keys for instances and bastion host. The *.yaml or *.yml extensions will be considered for the ansible script files and .sh extensions will be considered for shell scripts files.</li> <li>For block-volume attachment configuration via ansible playbook the device name is must, and it's currently set to \"/dev/oracleoci/oraclevdb\" in the sample ansible playbook.</li> <li>Common scenarios like security hardening and other common shell scripts can be executed against the OCI instances during provisioning.</li> <li>Running the CD3 automation toolkit will generate auto.tfvars.</li> <li>Execute Terraform/Tofu commands to provision the instances in OCI. Remote executioner will also run after the instance provisioning.</li> <p>The users can refer to the <code>default.yaml</code> file which is inside <code>/cd3user/tenancies/&lt;prefix&gt;/terraform_files/&lt;region&gt;/&lt;service_dir&gt;/scripts</code> dir for provisioning the custom playbooks.</p> <p>Managing Cloud Init</p> <ul> <li>Add the 'Cloud Init Script' column to the excel sheet for the corresponding instance entry.</li> <li>Scripts folder should have the relevant script files for instances. The *.sh extension(s) will be considered for the script files.</li> <li>Common scenarios like security hardening and other common scripts can be executed against the OCI instances during provisioning.</li> <li>Running the CD3 automation toolkit will generate auto.tfvars.</li> <li>Execute Terraform commands to provision the instances in OCI and run cloud-init scripts during provisioning.</li> </ul> <p>2. Update variables_&lt;region&gt;.tf</p> <ul> <li>Location of the file - <code>/cd3user/tenancies/&lt;prefix&gt;/terraform_files/&lt;region&gt;/&lt;service_dir&gt;/variables_&lt;region&gt;.tf</code></li> <li> <p>The \"SSH Key Var Name\" column accepts either the SSH key value directly or the name of a variable declared in variables.tf under the instance_ssh_keys variable that contains the key value. Ensure there is an entry in the variables_&lt;region&gt;.tf file with the name entered in the SSH Key Var Name field of the Excel sheet, and set the value to the SSH key value.</p> <p>Example</p> <p>If the SSH Key Var Name is entered as ssh_public_key in the Excel sheet, make an entry in the variables_&lt;region&gt;.tf file as shown below.</p> <pre><code> variable  'instance_ssh_keys'  {\n type = map(any)\n default = {\n ssh_public_key = \"&lt;SSH PUB KEY STRING HERE&gt;\"\n # Use '\\n' as the delimiter to add multiple ssh keys.\n # Example: ssh_public_key = \"ssh-rsa AAXXX......yhdlo\\nssh-rsa AAxxskj...edfwf\"\n #START_instance_ssh_keys#\n # exported instance ssh keys\n #instance_ssh_keys_END#\n   }\n } \n</code></pre> </li> <li> <p>Source Details column of the excel sheet accepts both image and boot volume as the source for instance to be launched.  <pre><code>image::\\&lt;variable containing ocid of image&gt; or\nbootVolume::\\&lt;variable containing ocid of boot volume&gt;. \n</code></pre> Ensure there is an entry in the variables_&lt;region&gt;.tf file for the value entered in the Source Details field of the Excel sheet.</p> <p>Example</p> <p>If the source details is entered as image::Linux, an entry should be made in the variables_&lt;region&gt;.tf file under the instance_source_ocids variable as shown below:</p> <pre><code>variable 'instance_source_ocids' {\n type = map(any)\n Linux    = \"&lt;LATEST LINUX OCID HERE&gt;\"\n Windows  = \"&lt;LATEST WINDOWS OCID HERE&gt;\"\n PaloAlto = \"Palo Alto Networks VM-Series Next Generation Firewall\"\n #START_instance_source_ocids#\n # exported instance image ocids\n #instance_source_ocids_END#\n}\n</code></pre> <p>Important</p> <p>Execute GIT commands to sync these variables_&lt;region&gt;.tf file changes  with DevOps GIT Repo in case toolkit is being used with Jenkins, Here are the Steps.</p> </li> </ul> <p>3.  Execute setUpOCI and terraform/tofu apply</p> <p>On choosing \"Compute\" in the SetUpOCI menu and \"Add/Modify/Delete Instances/Boot Backup Policy\" submenu will allow to launch the VM on OCI tenancy.</p> <p>Output tfvars file generated: <code>&lt;outdir&gt;/&lt;region_dir&gt;/&lt;service_dir&gt;&lt;prefix&gt;_instances.auto.tfvars</code> and <code>&lt;outdir&gt;/&lt;region_dir&gt;/&lt;service_dir&gt;/&lt;prefix&gt;_boot-backup-policy.auto.tfvars</code> </p> <p>Once the terraform/tofu apply is complete, view the resources under Compute -&gt; Instances for the region.</p> <p>Upon re-running the same option, the previously existing files will be backed up under the directory \u2192   <code>&lt;outdir&gt;/&lt;region_dir&gt;/&lt;service_dir&gt;/backup_instances/&lt;Date&gt;-&lt;Month&gt;-&lt;Time&gt;.</code></p>"},{"location":"manage-compute/#export-existing-compute-resources-from-oci-non-greenfield-workflow","title":"Export Existing Compute Resources from OCI (Non-Greenfield Workflow)","text":"<ol> <li> <p>Use the CD3-Blank-Template.xlsx to export existing OCI VM details into the \"Instances\" sheet. </p> </li> <li> <p>Add any additional attributes (not part of excel sheet already) which needs to be exported . </p> </li> <li> <p>Make sure to export the VCNs and Subnets in which the Instances are present prior to exporting the Instance. </p> </li> <li> <p>Execute the setupOCI with Workflow Type as Export Resources <code>python setUpOCI.py /cd3user/tenancies/&lt;prefix&gt;/&lt;prefix&gt;_setUpOCI.properties</code> </p> </li> <li> <p>Provide the region from where the Instances have to be exported. Specify comma separated values for multiple regions. </p> </li> <li> <p>From the output menu, select Export Compute &gt;&gt; Export Instances. </p> </li> <li> <p>Enter the compartment to which the Instances belong to. When exporting instances from multiple compartments, specify the compartment values as comma-separated values.  Specify the compartment name along with hierarchy in the below format:</p> <pre><code>Parent Compartment1::Parent Compartment2::MyCompartment\n</code></pre> </li> <li> <p>To export only specific instances, specify the required filter values</p> <ul> <li>Enter comma separated list of display name patterns of the instances: </li> <li>Enter comma separated list of ADs of the instances eg AD1,AD2,AD3: </li> </ul> </li> <li> <p>Upon executing, the \"Instances\" sheet in input CD3 Excel is populated with the VMs details. </p> </li> <li> <p>The import_commands_instances.sh script, tfvars file are generated for the Instances under folder <code>/cd3user/tenancies/&lt;prefix&gt;/terraform_files/&lt;region_dir&gt;/&lt;service_dir&gt;</code>. </p> </li> <li> <p>The associated ssh public keys are placed under variables_&lt;region&gt;.tf under the \"instance_ssh_keys\" variable.  </p> </li> <li> <p>While export of instances, it will fetch details for only the primary VNIC attached to the instance. </p> </li> <li> <p>Execute the .sh file (sh import_commands_instances.sh) to generate terraform state file.  This will be automatically executed while using the toolkit with Jenkins.</p> </li> <li> <p>Check out the known behaviour of toolkit for export of instances having multiple plugins.</p> </li> </ol>"},{"location":"manage-firewall/","title":"Manage OCI Network Firewall","text":""},{"location":"manage-firewall/#create_resources-greenfield-workflow","title":"create_resources (Greenfield) Workflow","text":"<p>Below sub-options appear under OCI Firewall option-</p> <p>1. Validate Firewall CD3 Excel </p> <ul> <li> <p>This is the validator for all tabs of CD3 Excel sheet for Firewall. It is a comprehensive list of validations performed on firewall tabs. </p> </li> <li> <p>Log file containing CD3 firewall validator checks is generated at: /cd3user/tenancies/&lt;prefix&gt;/&lt;prefix&gt;_cd3FirewallValidator.log</p> </li> </ul> <p>2. Add/Modify/Delete Firewall Policy</p> <ul> <li>Reads the Firewall-Policy-* tabs of the excel and generates tfvars.</li> </ul> <p>3. Add/Modify/Delete Firewall</p> <ul> <li>Reads the Firewall tab of the excel and generates tfvars.</li> </ul> <p>Note</p> <ul> <li>Specify Subnet Name as <code>&lt;subnet-name&gt;::&lt;vcn-name&gt;</code>. This service does not need Network details to be existing in the excel sheet.</li> </ul> <p>4. Clone Firewall Policy</p> <ul> <li> <p>On choosing this option, specify the region, compartment name and source policy names that need to be cloned.</p> </li> <li> <p>The toolkit will export the data from OCI console for each source policy specified and append it to the end of CD3 firewall sheet with a new name.</p> </li> <li> <p>It will then generate *.auto.tfvars for this modified excel sheet.</p> </li> <li>Execute terraform plan and apply to create the cloned policy in OCI console.</li> </ul>"},{"location":"manage-firewall/#export_resources-non-greenfield-workflow","title":"export_resources (Non-Greenfield) Workflow","text":"<ul> <li>Specify region and compartment to export OCI Network Firewall objects from a tenancy.</li> <li>Display name pattern can also be supplied to export firewall policies with a particular pattern in their name.</li> </ul>"},{"location":"manage-network/","title":"Manage Network","text":""},{"location":"manage-network/#create-new-network-resources-in-oci-greenfield-workflow","title":"Create New Network Resources in OCI (Greenfield Workflow)","text":"<ul> <li>Create Network</li> <li>Use an existing DRG in OCI while creating the network</li> <li>Modify Network</li> <li>Modify Security Rules, Route Rules and DRG Route Rules</li> <li>Sync manual changes done in OCI of Security Rules, Route Rules and DRG Route Rules with CD3 Excel Sheet and Terraform</li> <li>Add/Modify/Delete NSGs</li> <li>Add/Modify/Delete VLANs</li> <li>RPCs</li> </ul> <p>Note</p> <p>Make sure to execute \"Fetch Compartments OCIDs to variables file\" from CD3 Services in setUpOCI menu before starting with Network Creation.</p>"},{"location":"manage-network/#create-network","title":"Create Network","text":"<p>Creation of Networking components using Automation Toolkit involves four simple steps.</p> <ul> <li>Add the networking resource details to appropriate Excel Sheets.</li> <li>Running the toolkit with 'Create Resources' workflow to generate *.auto.tfvars.</li> <li>Executing Terraform to provision resources in OCI.</li> <li>Exporting the automatically generated Security Rules and Route Rules by the toolkit to CD3 Excel Sheet.</li> </ul> <p>Important</p> <p>'Create Network' generates custom security rules and route rules in OCI along with default ones. Make sure to export them all into excel sheet after running Create Network.</p> <p>Below are the steps in detail to create Network that includes VCNs, Subnets, DHCP, DRG, Security List, Route Tables, DRG Route Tables, NSGs, etc.</p> <ol> <li> <p>Choose appropriate excel sheet from Excel Templates and fill the required Network details in the Networking Tabs - VCNs, DRGs, VCN Info, DHCP, Subnets, NSGs tabs. </p> </li> <li> <p>Execute setupOCI with Create Resources workflow.</p> </li> <li> <p>Choose option 'Validate CD3' and then 'Validate Networks' to check for syntax errors in Excel sheet. Examine the log file generated at <code>/cd3user/tenancies/&lt;prefix&gt;/&lt;prefix&gt;_cd3validator.log.</code> If there are errors,  rectify them accordingly and proceed to the next step. </p> </li> <li> <p>Choose option 'Create Network' under 'Network' from the displayed menu. Once the execution is successful, multiple .tfvars related to networking like _major-objects.auto.tfvars and more will be generated under the folder <code>/cd3user/tenancies/&lt;prefix&gt;/terraform_files/&lt;region_dir&gt;/&lt;service_dir&gt;</code> <li> <p>Look at the terraform plan and apply. Running terraform apply completes the creation of Networking components in OCI. Verify the components in console. However the details of the security lists and route tables may not be available in the CD3 Excel sheet yet. In order to export that data, follow the below steps: </p> </li> <li> <p>Execute setupOCI with Create Resources workflow:</p> </li> <li> <p>Choose 'Network' from the displayed menu. Choose below sub-options: (Make sure to choose all the three options for the first time) <code>Security Rules</code>    - Export Security Rules (From OCI into SecRulesinOCI sheet)      - Add/Modify/Delete Route Rules (Reads SecRulesinOCI sheet) <code>Route Rules</code>    - Export Route Rules (From OCI into RouteRulesinOCI sheet)      - Add/Modify/Delete Route Rules (Reads RouteRulesinOCI sheet) <code>DRG Route Rules</code>    - Export DRG Route Rules (From OCI into DRGRouteRulesinOCI sheet)      - Add/Modify/Delete Route Rules (Reads DRGRouteRulesinOCI sheet)</p> <p>Note</p> <ul> <li>When using the toolkit with Jenkins, this will be automatically executed.</li> <li>This will run export of rules for all compartments/tags. Security rules/Route rules for only those VCNs which are part of CD3 VCNs tab will be written to the excel. Similarly DRG Route Rules for only those DRGs which are part of CD3 DRGs tab will be written to the excel.</li> <li> <p>VCNs/DRGs having duplicate names in tenancy is not supported.</p> </li> <li> <p>Make sure to download updated CD3 excel sheet under artifacts. </p> </li> </ul> </li> <li> <p>Executing terraform plan for network shows 'Up-to-Date' with no changes.</p> </li> <p>This completes the steps for Creating the Network in OCI and exporting the rules to the CD3 Excel Sheet using the Automation Toolkit.</p>"},{"location":"manage-network/#use-an-existing-drg-in-oci-while-creating-the-network","title":"Use an existing DRG in OCI while creating the network","text":"<p>In some scenarios, a DRG has already been created in the tenancy and rest of the Network components still need to be created. In such cases, generate the networking related tfvars using same process mentioned above till Step 4. Use same name for DRG in DRGs tab as present in OCI console.</p> <ul> <li>For Step 5, Navigate to the outdir path and execute the terraform commands: <pre><code> terraform init\n</code></pre> <pre><code> terraform import \"module.drgs[\\\"&lt;&lt;drgs terraform variable name&gt;&gt;\\\"].oci_core_drg.drg\" &lt;&lt;drg_ocid&gt;&gt;\n</code></pre>        \u2192 This will Import the DRG into the state file.      <pre><code> terraform plan\n</code></pre>        \u2192 Terraform Plan will indicate to add all the other components except DRG.        <pre><code> terraform apply\n</code></pre></li> </ul> <p>Continue executing the remaining steps (from Step 6) of Create Network.</p> <p>Note</p> <p>When using the toolkit with Jenkins, the apply pipeline for network will need to be stopped before running terraform import command for DRG. After terraform import cmd has been executed successfully, re-launch the apply pipeline for network folder.</p>"},{"location":"manage-network/#modify-security-rules-route-rules-and-drg-route-rules","title":"Modify Security Rules, Route Rules and DRG Route Rules","text":"<p>Follow the below steps to add, update or delete the following components: - Security Lists and Security Rules - Route Table and Route Rules - DRG Route Table and DRG Route Rules</p> <ol> <li> <p>Modify the Excel sheet to update required data in the Tabs - RouteRulesInOCI, SecRulesInOCI, DRGRouteRulesInOCI tabs. </p> </li> <li> <p>Execute setupOCI with Create Resources workflow.</p> </li> <li> <p>Choose 'Network' from the displayed menu. Choose below sub-options: <code>Security Rules</code>  - Add/Modify/Delete Security Rules (Reads SecRulesinOCI sheet) <code>Route Rules</code>  - Add/Modify/Delete Route Rules (Reads RouteRulesinOCI sheet) <code>DRG Route Rules</code>  - Add/Modify/Delete DRG Route Rules (Reads DRGRouteRulesinOCI sheet)</p> <p>Once the execution is successful, &lt;prefix&gt;_seclists.auto.tfvars, &lt;prefix&gt;_routetables.auto.tfvars and &lt;prefix&gt;_drg-routetables.auto.tfvars file will be generated under the folder <code>/cd3user/tenancies/&lt;prefix&gt;/terraform_files/&lt;region_dir&gt;.</code> Existing files will move into respective backup folders.</p> <p>Note</p> <p>This will create TF for only those Security Lists and Route Tables in VCNs which are part of cd3 and skip any VCNs that have been created outside of cd3 execution.</p> </li> <li> <p>Look at the terraform plan and apply. Running terraform apply completes the modification of Security Rules, Route Rules and DRG Route Rules in OCI. Verify the components in console.</p> </li> </ol>"},{"location":"manage-network/#modify-network","title":"Modify Network","text":"<p>Modifying the Networking components using Automation Toolkit involves three simple steps.</p> <ul> <li>Add/modify the details of networking components like the VCNs, Subnets, DHCP and DRG in Excel Sheet.</li> <li>Running the toolkit with 'Create Resources' workflow to generate *.auto.tfvars.</li> <li>Executing Terraform to provision/modify resources in OCI.</li> </ul> <p> Follow these Steps to modify Security Rules, Route Rules and DRG Route Rules.</p> <ol> <li> <p>Modify the Excel sheet to update required data in the Tabs - VCNs, DRGs, VCN Info, DHCP and Subnets. </p> </li> <li> <p>Execute setupOCI with Create Resources workflow.</p> </li> <li> <p>To Validate the CD3 excel Tabs - choose option 'Validate CD3' and 'Validate Networks' from sub-menu to check for syntax errors in Excel sheet. Examine the log file generated at <code>/cd3user/tenancies/&lt;prefix&gt;/&lt;prefix&gt;_cd3validator.logs.</code> If there are errors, rectify them accordingly and proceed to the next step. </p> </li> <li> <p>Choose option 'Modify Network' under 'Network' from the displayed menu. Once the execution is successful, multiple .tfvars related to networking like &lt;prefix&gt;_major-objects.auto.tfvars and more will be generated under the folder <code>/cd3user/tenancies/&lt;prefix&gt;/terraform_files/&lt;region_dir&gt;/&lt;service_dir&gt;</code>. Existing files will move into respective backup folders.</p> <p>Note-: Make sure to export Sec Rules, Route Rules, DRG Route Rules to CD3 Excel Sheet before executing this option. </p> </li> <li> <p>Look at the terraform plan and apply. Running terraform apply completes the modification of Networking components in OCI. Verify the components in console.</p> </li> <li> <p>Export rules again into excel sheet to get it in synch with console. Note-: Rules will be automatically exported when using toolkit with Jenkins.</p> </li> </ol>"},{"location":"manage-network/#sync-manual-changes-done-in-oci-of-security-rules-route-rules-and-drg-route-rules-with-cd3-excel-sheet-and-terraform","title":"Sync manual changes done in OCI of Security Rules, Route Rules and DRG Route Rules with CD3 Excel Sheet and Terraform","text":"<p>Follow the below process to export the rules to the same CD3 Excel Sheet as the one used to Create Network, and to sync the Terraform files with OCI whenever a user adds, modifies or deletes rules in OCI Console manually.</p> <p>Note</p> <p>Make sure to close the Excel sheet during the export process.</p> <ol> <li> <p>Execute setupOCI with Create Resources workflow.</p> </li> <li> <p>Choose 'Network' from the displayed menu. Choose below sub-options: <code>Security Rules</code>  - Export Security Rules (From OCI into SecRulesinOCI sheet) <code>Route Rules</code>  - Export Route Rules (From OCI into RouteRulesinOCI sheet) <code>DRG Route Rules</code>  - Export DRG Route Rules (From OCI into DRGRouteRulesinOCI sheet)</p> <p>Once the execution is successful, 'RouteRulesInOCI', 'SecRulesInOCI', 'DRGRouteRulesInOCI' tabs of the excel sheet will be updated with the rules exported from OCI. At this point, we only have our Excel sheet Tabs updated, proceed to the next step to create the Terraform Files for the same.</p> </li> <li> <p>Choose 'Network' from the displayed menu. Choose below sub-options: <code>Security Rules</code>  -Add/Modify/Delete Security Rules (Reads SecRulesinOCI sheet) <code>Route Rules</code>  - Add/Modify/Delete Route Rules (Reads RouteRulesinOCI sheet) <code>DRG Route Rules</code>  - Add/Modify/Delete DRG Route Rules (Reads DRGRouteRulesinOCI sheet)</p> <p>Once the execution is successful, &lt;prefix&gt;_seclists.auto.tfvars,  &lt;prefix&gt;_routetables.auto.tfvars and  &lt;prefix&gt;drg-routetables.auto.tfvars files will be generated under the folder <code>/cd3user/tenancies/&lt;prefix&gt;/terraform_files/&lt;region_dir&gt;/&lt;service_dir&gt;</code></p> </li> <li> <p>Look at the terraform plan and apply. Running terraform apply completes the export of Security Rules, Route Rules and DRG Route Rules from OCI. Terraform plan/apply should be in sync with OCI.</p> </li> </ol>"},{"location":"manage-network/#addmodifydelete-nsgs","title":"Add/Modify/Delete NSGs","text":"<ol> <li> <p>Modify the Excel sheet to update required data in the Tabs - NSGs. </p> </li> <li> <p>Execute setupOCI with Create Resources workflow.</p> </li> <li> <p>Choose 'Network' from the displayed menu. Choose below sub-option: <code>Network Security Groups</code>  - Add/Modify/Delete NSGs (Reads NSGs sheet)</p> <p>Once the execution is successful,  <code>&lt;prefix&gt;_nsgs.auto.tfvars</code> will be generated under the folder <code>/cd3user/tenancies/&lt;prefix&gt;/terraform_files/&lt;region_dir&gt;/&lt;service_dir&gt;</code>. Existing files will move into respective backup folders.</p> </li> <li> <p>Look at the terraform plan and apply. Running terraform apply completes the modification of NSGs in OCI. Verify the components in console.</p> </li> </ol>"},{"location":"manage-network/#addmodifydelete-vlans","title":"Add/Modify/Delete VLANs","text":"<ol> <li> <p>Modify the Excel sheet to update required data in the Tabs - SubnetsVLANs. </p> </li> <li> <p>Make sure that the RouteRulesinOCI sheet and corresponding terraform is in synch with route rules in OCI console. If not, follow the procedure specified in Sync manual changes done in OCI of Security Rules, Route Rules and DRG Route Rules with CD3 Excel Sheet and Terraform</p> </li> <li> <p>Execute setupOCI with Create Resources workflow.</p> </li> <li> <p>Choose 'Network' from the displayed menu. Choose below sub-option:  <code>- Add/Modify/Delete VLANs (Reads SubnetsVLANs sheet)</code></p> <p>Once the execution is successful, <code>&lt;prefix&gt;\\_vlans.auto.tfvars</code> will be generated under the folder   <code>/cd3user/tenancies/&lt;prefix&gt;/terraform_files/&lt;region_dir&gt;/&lt;service_dir&gt;.</code> Existing files will move into respective backup folders.<code>&lt;prefix&gt;_routetables.auto.tfvars</code> file will also be updated with the route table information specified for each VLAN.</p> </li> <li> <p>Look at the terraform plan and apply. Run terraform apply.</p> </li> <li> <p>Again make sure to export the Route Rules in OCI into excel and terraform. Follow the procedure specified in Sync manual changes done in OCI of Security Rules, Route Rules and DRG Route Rules with CD3 Excel Sheet and Terraform</p> </li> </ol> <p>This completes the modification of VLANs in OCI. Verify the components in console.</p>"},{"location":"manage-network/#rpcs","title":"RPCs","text":"<p>Remote VCN peering is the process of connecting two VCNs in different regions (but the same tenancy). The peering allows the VCNs' resources to communicate using private IP addresses without routing the traffic over the internet or through your on-premises network.</p> <ul> <li>Modify the Excel sheet to update required data in the Tabs - DRGs.</li> <li>The source and target RPC details to be entered in DRG sheet for establishing a connection. Check the example in excel file for reference.</li> <li>Make sure that the DRGRouteRulesinOCI sheet and corresponding terraform is in synch with DRG route rules in OCI console. If not, follow the procedure specified in Sync manual changes done in OCI of Security Rules, Route Rules and DRG Route Rules with CD3 Excel Sheet and Terraform</li> <li>Global directory which is inside the customer outdir will have all RPC related files and scripts.</li> <li>The RPC resources(modules,provider configurations etc) are generated dynamically for the tenancy and can work along only with CD3 automation toolkit.</li> <li>Choose option 'Network' and then 'Customer Connectivity' for creating RPC in create_resources (GreenField) workflow.</li> <li>Output files are created under <code>/cd3user/tenancies/&lt;prefix&gt;/terraform_files/global/rpc</code> directory</li> </ul>"},{"location":"manage-network/#export-existing-network-resources-from-oci-non-greenfield-workflow","title":"Export Existing Network Resources from OCI (Non-Greenfield Workflow)","text":"<ul> <li>Export Network</li> <li>Add a new or modify the existing networking components</li> </ul> <p>Note</p> <p>Make sure to execute \"Fetch Compartments OCIDs to variables file\" from CD3 Services in setUpOCI menu before starting with Network Creation.</p>"},{"location":"manage-network/#export-network","title":"Export Network","text":"<p>Follow the below steps to export the Networking components that includes VCNs, Subnets, DHCP, DRG, Security List, Route Tables, DRG Route Tables, NSGs, etc to CD3 Excel Sheet and create the Terraform state.</p> <ol> <li> <p>Use the CD3-Blank-Template.xlsx to export the networking resources into the Tabs - VCNs, DRGs, VCN Info, DHCP, Subnets, NSGs, RouteRulesInOCI, SecRulesInOCI,DRGRouteRulesInOCI tabs. </p> </li> <li> <p>Execute setupOCI with Export Resources workflow.</p> </li> <li> <p>Choose one of the below available sub-options from 'Export Network' of the main menu. </p> <ul> <li>Export all Network Components</li> <li>Export Network components for VCNs/DRGs/DRGRouteRulesinOCI Tabs</li> <li>Export Network components for DHCP Tab</li> <li>Export Network components for SecRulesinOCI Tab</li> <li>Export Network components for RouteRulesinOCI Tab</li> <li>Export Network components for SubnetsVLANs Tab</li> <li>Export Network components for NSGs Tab</li> </ul> <p>Once the execution is successful, networking related *.auto.tfvars files and .sh files containing import statements will be generated under the folder <code>/cd3user/tenancies/&lt;prefix&gt;/terraform_files/&lt;region_dir&gt;/&lt;service_dir&gt;</code></p> <p>Also,The RPC related .tfvars and .sh files containing import statements will be generated in global directory which is inside the <code>/cd3user/tenancies/&lt;prefix&gt;/terraform_files/</code> folder. </p> </li> <li> <p>Execute import_commands_network_major-objects.sh and then rest of the sh files. These will be automatically executed while using the toolkit with Jenkins.</p> </li> </ol> <p>Note</p> <p>The oci_core_drg_attachment_management for RPC resources will be shown as created at the end of import process, but it doesn't actually create any resources and can be safely ignored.</p> <p></p> <p>5.Running  terraform plan must show that all the components are in sync. This completes the export of Networking components from OCI.</p> <p>Sample of CD3 Excel after export: (DO NOT Modify the highlighted columns)</p> <p>(Showing old images below) VCNs tab: </p> <p>Subnets tab: </p>"},{"location":"manage-network/#add-a-new-or-modify-the-existing-networking-components","title":"Add a new or modify the existing networking components","text":"<ol> <li>Export the Networking components by following the above Steps. (Note that here Workflow Type is set to Export Resources)</li> <li>Follow  this process to add new components such as VCN/DHCP/DRG/IGW/NGW/SGW/LPG/Subnet etc. (Note that here Workflow Type is set to Create Resources)</li> </ol>"},{"location":"multiple-prefixes/","title":"Connect container to OCI Tenancy - Multiple Prefixes","text":"<p>The toolkit allows independent management of multiple environments using the same container. This enables better resource control and custom configurations for each environment. </p> <p>Note</p> <ul> <li>With the toolkit release v2024.4.1, the toolkit supports executing createTenancyConfig.py with different values for prefix per container when using Jenkins.</li> </ul> <p></p> <p>Use Case</p> <ul> <li>Managing Multiple Environments (Prod, Non-Prod etc.,) as separate entities within a single container.</li> </ul> <p>Steps</p> <ul> <li>Edit the tenancyconfig.properties file according to Connect CD3 Container to OCI. Use a unique prefix that differs from the ones used previously. Eg:  demo_prod,  demo_nonprod.</li> </ul> <p>Tip</p> <p>You can copy tenancyconfig.properties file as tenancyconfig_&lt;prefix&gt;.properties and edit this file instead of directly editing tenancyconfig.properties. This will help retain the input properties files used for different executions of the createTenancyConfig.py</p> <ul> <li>Different values can be specified for other parameters as well. For instance, one prefix can be configured to have multiple outdir structure for the generated terraform files, while another prefix can be set with a single outdir structure.</li> <li>Execute createTenancyConfig.py with modified tenancyconfig.properties or tenancyconfig_&lt;prefix&gt;.properties.</li> <li>After executing createTenancyConfig.py, the following screenshots show how the environment specific out directories look like when using the toolkit with CLI and with Jenkins.</li> </ul> <p></p> <p>Multi Prefix with CLI</p> <p>In the container, folders named after the specified prefix values will be created under the /cd3user/tenancies directory. Each environment specific folder is created with its own unique configuration specified in above steps.</p> <p></p> <p></p> <p>Multi Prefix with Jenkins</p> <p>The Jenkins dashboard appears as follows when configured with two prefixes.</p> <p></p> <p>Check  Important Note to enable jenkins for multiple prefixes.</p>"},{"location":"multiple-services-jenkins/","title":"Provisioning of multiple services together","text":"<p>Note</p> <p>For services that require network details, such as compute, database, and load balancers, the 'network' apply pipeline must be executed before launching the service pipeline, as explained below.</p> <ul> <li> <p>Multiple options can be selected simultaneously while creating resources in OCI using setUpOCI pipeline . In scenarios where one service depends on another service's availability, such as 'Network' (Create Network) and 'Compute' (Add Instances), the apply pipeline for compute will fail. Check the below image.</p> <p></p> </li> <li> <p>Clicking on 'Logs' for Stage: london/compute and clicking on the pipeline will display below -</p> <p></p> </li> <li> <p>Clicking on 'Logs' for Stage Terraform Plan displays - </p> <p></p> </li> <li> <p>This is expected because pipeline for 'compute' expects network to be already existing in OCI to launch a new instance.</p> </li> <li> <p>To resolve this, Proceed with apply pipeline for 'network' and once it is successfuly completed, trigger apply pipeline for 'compute' manually by clicking on 'Build Now' from left menu.</p> <p></p> </li> </ul>"},{"location":"must-read-prerequisites/","title":"Must Read","text":"<p>Important</p> <ul> <li>Read high level steps for toolkit Use with CLI or Use with Jenkins before reading this section.</li> </ul>"},{"location":"nongreenfield-cli/","title":"Export and Manage Resources from OCI (Non-Greenfield Workflow)","text":"<p>Important</p> <ul> <li>Toolkit will over-write the data in specific tabs of CD3 Excel sheet with exported content from OCI while the other tabs remain intact.</li> <li>Differential state import of the objects will be performed, ie the import statements will be generated only for the objects which are not already there in state file.</li> <li>While exporting same service multiple times, be cautious to review the terraform plan changes and then apply.</li> </ul> <p>Step 1: Choose the Blank CD3 Excel sheet template from Excel Templates  and copy at /cd3user/tenancies/&lt;prefix&gt;/ Step 2: Modify <code>/cd3user/tenancies/&lt;prefix&gt;/&lt;prefix&gt;_setUpOCI.properties</code> Add the location of CD3 excel file under cd3file parameter and set workflow_type to export_resources  as shown below.  The other parameters are already updated with correct values. <pre><code>#Input variables required to run setUpOCI script\n\n#path to output directory where terraform files will be generated. eg /cd3user/tenancies/&lt;prefix&gt;/terraform_files\noutdir=/cd3user/tenancies/demotenancy/terraform_files/\n\n#prefix for output terraform files eg &lt;customer_name&gt; like demo\nprefix=demo\n\n#auth mechanism for OCI APIs - api_key,instance_principal,session_token\nauth_mechanism=api_key\n\n#input config file for Python API communication with OCI eg /cd3user/tenancies/&lt;prefix&gt;/.config_files/&lt;prefix&gt;_config;\nconfig_file=/cd3user/tenancies/demotenancy/.config_files/demotenancy_oci_config\n\n#Leave it blank if you want single outdir or specify outdir_structure_file.properties containing directory structure for OCI services.\noutdir_structure_file=/cd3user/tenancies/demotenancy/demotenancy_outdir_structure_file.properties\n\n#IaC Tool to be configured - Terraform(specify terraform) or OpenTofu(specify tofu)\ntf_or_tofu=terraform\n\n#path to cd3 excel eg /cd3user/tenancies/&lt;prefix&gt;/CD3-Customer.xlsx\ncd3file=/cd3user/tenancies/demo/CD3-demo.xlsx\n\n#specify create_resources to create new resources in OCI(greenfield workflow)\n#specify export_resources to export resources from OCI(non-greenfield workflow)\nworkflow_type=export_resources\n</code></pre></p> <p>Step 3: Execute the setUpOCI.py script to start exporting the resources to CD3 and creating the terraform/tofu configuration files.</p> <p>Command to Execute: <pre><code>cd /cd3user/oci_tools/cd3_automation_toolkit/\n</code></pre></p> <pre><code>python setUpOCI.py /cd3user/tenancies/&lt;prefix&gt;/&lt;prefix&gt;_setUpOCI.properties\n</code></pre> <p>Example Execution</p> <p>Updated OCI_Regions file !!!</p> <p>Script to fetch the compartment OCIDs into variables file has not been executed. Do you want to run it now? (y|n):</p> <p>\u2b06\ufe0f The above prompt appears when executing the toolkit for the very first time or when any new compartments are created using the toolkit. Enter 'y' to fetch the details of compartment OCIDs into variables file.</p> <p>Note</p> <p>Execute \"Fetch Compartments OCIDs to variables file\" from CD3 Services in setUpOCI menu after creating Compartments. This step is required every time a compartment is created via the toolkit or via the OCI console.</p> <p>\u2b07\ufe0f After fetching the compartment details, users have options to export their resources only from specific regions, compartments, and resources with specific Tags if required. The toolkit will display the menu options as shown below:</p> <p>Example Execution</p> <p></p> <p>Choose the resources by specifying a single option (for choosing one of these resources) or comma-separated values (to choose multiple resources) as shown in the sample screenshot above.</p> <p>Expected Outputs:</p> <p>a. Excel sheet with the resource details from OCI.  b. Configuration files - *.auto.tfvars   c. Shell Script with import commands - import_commands_<code>&lt;resource&gt;</code>.sh</p> <p>Step 4: </p> <p>Execute the import_commands_<code>&lt;resource&gt;</code>.sh files that are generated in the outdir. The terraform/tofu plan should show that infrastructure is up-to-date with no changes required for all regions.</p> <p>Note</p> <ul> <li>Once the export (including the execution of import_commands_<code>&lt;resource&gt;</code>.sh) is complete, switch the value of workflow_type back to create_resources. This allows the toolkit to modify these resources or create new ones on top of them.</li> </ul>"},{"location":"nongreenfield-jenkins/","title":"Export and Manage Resources from OCI (Non-Greenfield Workflow)","text":"<p>Important</p> <ul> <li>Toolkit will over-write the data in specific tabs of CD3 Excel sheet with exported content from OCI while the other tabs remain intact.</li> <li>Differential state import of the objects will be performed, i.e., the import statements will be generated only for the objects not already present in state file.</li> <li>While exporting same service multiple times, be cautious to review the terraform plan changes and then apply.</li> </ul> <p>Step 1:  Choose the Blank CD3 Excel sheet template from Excel Templates.</p> <p>Step 2: Login to Jenkins URL with user created after initialization. On the dashboard, a folder with &lt;prefix&gt; name is present.  Click on it. It has the corresponding setupoci pipeline and terraform_files folder. </p> <p>Click on the setupoci pipeline and select Build with Parameters from left side menu.</p> <p></p> <p>Note: - Only one user at a time using the Jenkins setup is supported in the current release of the toolkit.</p> <p>Step 3: Upload the above chosen Excel sheet in Excel_Template section.</p> <p></p> <p>This will copy the Excel file at <code>/cd3user/tenancies/&lt;prefix&gt;</code> inside the container. It will also take backup of existing Excel on the container by appending the current datetime if same filename is uploaded in multiple executions.</p> <p>Step 4: Select the workflow as Export Existing Resources from OCI (Non-Greenfield Workflow). Choose single or multiple MainOptions as required and then corresponding SubOptions. Below screenshot shows export of Network and Compute.</p> <p></p> <p>Step 5: Specify region and compartment from where the data has to be exported. Multiple options can be selected to export from multiple regions/compartments. If resources have to be exported from all regions/compartments, do not select any option from the dropdown.  It also asks for service specific filters like display name patterns for compute. Leave empty if no filter is needed.</p> <p> Click on Build at the bottom.</p> <p>Step 6: setUpOCI pipeline is triggered and stages are executed as shown below: </p> <p> </p> <p>Expected Output of 'Execute setUpOCI' stage:</p> <ol> <li> Overwrites the specific tabs of Excel sheet with the exported resource details from OCI. Here are the  steps to download the exported Excel file. </li> <li> Generates Configuration files - *.auto.tfvars.</li> <li> Generates shell scripts with import commands - import_commands_&lt;resource&gt;.sh </li> </ol> <p>Note:     The updated Excel sheet is also present at <code>/cd3user/tenancies/&lt;prefix&gt;</code> inside the container.</p> <p>Expected Output of 'Run Import Commands' stage:</p> <ol> <li>Executes shell scripts with import commands(import_commands_&lt;resource&gt;.sh) generated in the previous stage </li> </ol> <p>Expected Output of terraform/tofu Pipelines:</p> <ol> <li>Respective pipelines will get triggered automatically from setUpOCI pipeline based on the services chosen for export. You could also trigger manually when required.</li> <li> If 'Run Import Commands' stage was successful (ie.. import_commands_&lt;resource&gt;.sh ran successfully for all services chosen for export), respective pipelines triggered should have 'Plan' stage show as 'No Changes'  </li> </ol> <p>Note</p> <ul> <li>Make sure to execute Fetch Compartments OCIDs to variables file from CD3 Services in setUpOCI menu at least once. This will ensure that the variables file in outdir is updated with the OCID information of all the compartments.</li> <li>Once the export (including the execution of import_commands_.sh) is complete, switch the value of workflow_type back to create_resources. This allows the toolkit to modify these resources or create new ones on top of them."},{"location":"opa-integration/","title":"Open Policy Agent for Terraform","text":"<p>OPA is a powerful policy-as-code framework that enables you to define and enforce policies across your infrastructure-as-code (IaC) deployments. With OPA, you can seamlessly integrate policy checks into your Terraform workflows, ensuring that your infrastructure deployments adhere to your organization's security, compliance, and operational requirements.</p> <p>By leveraging OPA for Terraform, you can automate policy enforcement, eliminate manual checks, and enforce best practices consistently across your infrastructure-as-code projects. With OPA, you gain enhanced visibility and control over your Terraform deployments, reducing the risk of misconfigurations, security vulnerabilities, and compliance issues. </p> <p>As part of CD3, we have meticulously developed an initial set of policies. These policies serve as your initial starting point, ensuring that any Infrastructure-as-Code (IAC) deployments made for Oracle Cloud Infrastructure (OCI) meet the organisation's security and compliance standards.</p> <p>Run OPA inside CD3 container</p> <ol> <li> <p>Open your command line interface inside CD3 container and run OPA. You should see all available options for OPA.</p> <pre><code>opa --help\n</code></pre> <p>Currently CD3 container has OPA version 0.55.0 installed.</p> </li> <li> <p>Generate the terraform/tofu plan output in json format since OPA accepts that format alone for evaluation. Use tofu command instead of terraform if OpenTofu is configured as the IaC tool.</p> <pre><code> terraform plan -out tfplan.binary\n terraform show -json tfplan.binary &gt; tfplan.json\n</code></pre> </li> <li> <p>Run the terraform plan against all the available OPA rules. It should return an empty array which means the plan has no non-compliant action against CIS benchmarks.</p> <pre><code>opa eval -f pretty -b /cd3user/oci_tools/cd3_automation_toolkit/user-scripts/OPA -i tfplan.json data.terraform.deny --fail-defined\n</code></pre> </li> </ol> <p>Alternatively, run the following command to evaluate just a sinle OPA rule say \"deny_ingress_for_sl.rego\" policy with a pretty output format:</p> <pre><code>    opa eval -f pretty -d /cd3user/oci_tools/cd3_automation_toolkit/user-scripts/OPA/Networking/oci_deny_ingress_for_sl.rego -i tfplan.json data.terraform.deny\n</code></pre> <p>This command will analyze the \"tfplan.json\" input file against the policy and display the evaluation results with a user-friendly format.</p> <p></p>"},{"location":"other-oci-tools/","title":"Other OCI Tools","text":""},{"location":"other-oci-tools/#cis-compliance-checker-script","title":"CIS compliance checker script","text":"<p>The Automation toolkit provides an option to run the CIS compliance checker script against your tenancy.</p> <p>In the setupoci Greenfield menu, select Other OCI Tools \u2192 CIS Compliance Check Script. Users can either choose to download the latest script or execute the script.  </p> <p>A folder named <code>&lt;prefix&gt;_cis_report</code> is created under <code>/cd3user/tenancies/&lt;prefix&gt;/othertools_files</code>, containing all the reports generated by the script.</p> <p>As a best practice, the script should be executed after every deployment in the tenancy. The output report should be analyzed to minimize the reported anomalies according to the design requirements.</p> <p>When using CLI, report can be copied to local system using - <code>scp -i &lt;private_key&gt; cd3user@&lt;workVM IP&gt;:/cd3user/mount_path/&lt;prefix&gt;/othertools_files/&lt;prefix&gt;_cis_report .</code> When using Jenkins, the report is available under Build Artifacts of the setUpOCI build </p> <p></p>"},{"location":"other-oci-tools/#showoci-script","title":"showOCI script","text":"<p>The Automation toolkit also provides an option to run the showoci script against your tenancy.</p> <p>In the setupoci Greenfield menu, select Other OCI Tools \u2192 ShowOCI Report. Users can either choose to download the latest showoci script or execute the script. </p> <p>After successful execution, the report can be found under <code>/cd3user/tenancies/&lt;prefix&gt;/othertools_files/&lt;prefix&gt;_showoci_report</code> folder. </p> <p>When using CLI, report can be copied to local system using - <code>scp -i &lt;private_key&gt; cd3user@&lt;workVM IP&gt;:/cd3user/mount_path/&lt;prefix&gt;/othertools_files/&lt;prefix&gt;_showoci_report .</code> When using Jenkins, the report is available under Build Artifacts of the setUpOCI build.</p> <p></p>"},{"location":"other-oci-tools/#oci-fsdr","title":"OCI FSDR","text":"<p>CD3 enables users to export and update DR plans. Different DR plans can be exported into separate tabs of the Excel.</p> <p>DR Plan's steps can be updated in Excel and then applied to the console using the toolkit.</p> <p>Common Use cases:</p> <ul> <li>Clone User-Defined Steps from one plan to another within the same region or across regions.</li> <li>Manage User-Defined Steps in DR plans with Excel Spreadsheet.</li> <li>As of today, if a member of an existing Disaster Recovery (DR) Protection group is updated in the OCI FSDR service, the Plan Steps are deleted (the product team is actively working on a fix for this issue). To handle this, export all user-defined steps to CD3 Excel and use this data to recreate the new DR plan after updating a member.</li> </ul> <p>Features:</p> <ul> <li>Easy to manage and update User-Defined Steps.</li> <li>The order of  DR Plan's steps is preserved in the Excel sheet, allowing Steps to be created in the same sequence as desired in the console.</li> <li>Single Excel sheet can manage all DR Switchover and Failover plans.</li> </ul> <p>IAM Policies to update DR plans in OCI:</p> <pre><code>    Allow group &lt;group-name&gt; to manage dr-protection-groups in compartment &lt;compartment-name&gt;\n    Allow group &lt;group-name&gt; to manage instances in compartment &lt;compartment-name&gt;\n    Allow group &lt;group-name&gt; to read buckets in compartment &lt;compartment-name&gt;\n</code></pre> <p>Steps to execute:</p> <ol> <li> <p>In the setupoci menu for the create_resources workflow, select Other OCI Tools \u2192 OCI FSDR.</p> </li> <li> <p>Fill in the required details for excel file name, sheet name and DR Plan OCID.</p> </li> <li> <p>The Excel file is created at <code>/cd3user/tenancies/&lt;prefix&gt;/othertools_files</code>.</p> <ul> <li> <p>When using CLI, Excel can be copied to local system using -</p> <pre><code>scp -i &lt;private_key&gt; cd3user@&lt;workVM IP&gt;:/cd3user/mount_path/&lt;prefix&gt;/othertools_files/&lt;excel_file_name&gt; .\n</code></pre> </li> <li> <p>When using Jenkins, the Excel file is available under Build Artifacts of the corresponding setupoci build.</p> </li> </ul> </li> </ol>"},{"location":"prerequisites/","title":"Prerequisites to use Toolkit","text":"<ul> <li> <p>IAM policy to allow user/instance principal to manage the services that need to be created/exported using the toolkit.</p> </li> <li> <p>Minimum requirement is to have read access to the tenancy.</p> </li> </ul> <p>Sample Policies</p> <p>Allow group &lt;cd3_group&gt; to read all resources in tenancy  Allow group &lt;cd3_group&gt; to manage all-resources in tenancy where any {target.resource = 'instance-family', target.resource = 'object-family', target.resource = 'volume-family', target.resource = 'virtual-network-family', target.resource = 'database-family', target.resource = 'dns', target.resource = 'file-family'}</p> <p>Additional policies needed when using toolkit with Jenkins</p> <p>Allow group &lt;group_name&gt; to read devops-project in tenancy  Allow group &lt;group_name&gt; to manage devops-repository-family in tenancy  Allow group &lt;group_name&gt; to read buckets in tenancy  Allow group &lt;group_name&gt; to manage objects in tenancy </p>"},{"location":"queries/","title":"CD3 Slack Channel","text":"<p>CD3 Public Slack Channel is available on the Oracle Developers workspace. Click here to sign in .</p> <p>Once you are signed into the workspace, you can join the channel  #cd3-toolkit-users </p> <p>Important</p> <p>CD3 Automation Toolkit is an open source tool. Please post your queries on the slack channel or Raise Issue on Github</p>"},{"location":"remotestate/","title":"Store Terraform State into Object Storage Bucket","text":"<p>Caution</p> <ul> <li> <p>The option to upload to Resource Manager is not available when using Jenkins. When using it via CLI, with remote state configured,  it is required to remove backend.tf from the directory, bring the remote state into local and then upload the stack.</p> </li> <li> <p>If this is not done, attempting to execute terraform plan/apply directly from OCI Resource Manager may result in below error.</p> </li> </ul> <p></p> <p></p> <ul> <li>Toolkit provides the option to store terraform state file(tfstate) into Object Storage bucket.</li> <li>This can be achieved by setting <code>use_remote_state=yes</code> under Advanced Parameters in <code>tenancyconfig.properties</code> file while executing <code>createTenancyConfig.py</code>.</li> <li> <p>Upon setting above parameter the script will -</p> <ul> <li>create a versioning enabled bucket in OCI tenancy in the specified region(if you don't specify anything in <code>remote_state_bucket_name</code> parameter to use an existing bucket)</li> <li>create a new customer secret key for the user, and configure it as S3 credentials to access the bucket. Before executing the createTenancyConfig.py script, ensure that the specified user in the DevOps User Details or identified by the user OCID does not already have the maximum limit of two customer secret keys assigned. </li> </ul> </li> <li> <p>backend.tf file that gets generated -</p> </li> </ul> <pre><code>terraform {\nbackend \"s3\" {\n  key      = \"&lt;region_name&gt;/&lt;service_dir_name&gt;/terraform.tfstate\"\n  bucket   = \"&lt;prefix&gt;-automation-toolkit-bucket\"\n  region   = \"&lt;region&gt;\"\n  endpoint = \"https://&lt;namespace&gt;.compat.objectstorage.&lt;region&gt;.oraclecloud.com\"\n  shared_credentials_file     = \"/cd3user/tenancies/&lt;prefix&gt;/.config_files/&lt;prefix&gt;_s3_credentials\"\n  skip_region_validation      = true\n  skip_credentials_validation = true\n  skip_metadata_api_check     = true\n  force_path_style            = true\n  }\n}  \n</code></pre> <ul> <li> <p>For single outdir, tfstate for all subscribed regions will be stored as <code>&lt;region&gt;/terraform.tfstate</code> eg <code>london/terraform.tfstate</code> for london <code>phoenix/terraform.tfstate</code> for phoenix. See below screenshot showing objects in the bucket storing remote state:   </p> </li> <li> <p>For multi outdir, tfstate for all services in all subscribed regions will be stored as <code>&lt;region&gt;/&lt;service_dir_name&gt;/terraform.tfstate</code> eg <code>london/tagging/terraform.tfstate</code> for tagging dir in london region. See below screenshot showing objects in the bucket storing remote state:     </p> </li> </ul>"},{"location":"resource-manager-upload/","title":"OCI Resource Manager Upload","text":"<p>On choosing \"Developer Services\" in the SetUpOCI menu, choose \"Upload current terraform files/state to Resource Manager\" sub-option to upload the terraform outdir into OCI Resource Manager.</p> <p>This option will upload the created Terraform files &amp; the tfstate (if present) to the OCI Resource Manager.</p> <p>When prompted, specify the Region to create/upload the terraform files to Resource Manager Stack. Multiple regions can be specified as comma separated values. Specify 'global' to upload RPC related components which reside in 'global' directory.</p> <p>On the next prompt, enter the Compartment where the Stack should be created if it is for the first time. The toolkit will create a Stack for the region specified previously under the specified compartment. For global resources, stack will be created in the home region.</p> <p>The Stack created will use Terraform 1.5.x. The upload includes terraform.tfstate file as well, if present. This is to sync the OCI Resource Manager Stack to that of your outdir.</p> <p>The toolkit also creates a rm_ocids.csv file in the outdir/&lt;region_dir&gt; which has the information on the Resource Manager stack that is created. The format of the data in rm_ocids.csv is as follows - </p> <p>Example:</p> <p> </p> <p>The toolkit will use an existing Resource Manager stack when data is present in the above format in <code>outdir/&lt;region_dir&gt;/rm_ocids.csv</code> file. </p> <p>Sample Execution:</p> <p> </p> <p>Important</p> <ul> <li>Upload current terraform files/state to Resource Manager under Developer Services is not enabled if OpenTofu is configured for the prefix during Connecting CD3 Container to Tenancy.</li> <li> <p>If remote state is being used and try to upload the stack to OCI Resource Manager using Upload current terraform files/state to Resource Manager under Developer Services, then running terraform plan/apply from OCI Resource Manager will not work and show below error:</p> <p></p> <p>Remove backend.tf from the directory, bring the remote state into local and then re-upload the stack.</p> </li> </ul>"},{"location":"supportedservices/","title":"Services Supported","text":"OCI Services Grid IAM <p>IAM/Identity</p> <p>Compartments, Groups, Dynamic Groups, Policies, Users, Network Sources</p> Governance <p>Tagging</p> <p>Tags (Namespaces, Tag Keys, Default Tags, Cost Tracking Tags)</p> <p>Quotas</p> <p>Quota policies</p> Cost Management <p>Budgets</p> <p>Budgets, Budget Alert Rules</p> Network and Connectivity <p>Network</p> <p>VCNs, Subnets, VLANs, DRGs, IGWs, NGWs, LPGs, Route Tables, DRG Route, Tables, Security Lists, Network Security Groups, Remote Peering Connections</p> <p>OCI Network Firewall</p> <p>OCI Network Firewall and Policy</p> <p>DNS Management</p> <p>Private DNS - Views, Zones, RRSets/Records and Resolvers</p> Infrastructure <p>Compute</p> <p>Instances supporting Market Place Images, Remote Exec, Cloud-Init scripts, Dedicated VM Hosts</p> <p>Storage</p> <p>FSS, Block and Boot Volumes, Backup Policies, Object Storage Buckets</p> Databases <p>Oracle Database</p> <p>Exa Infra, ExaCS, DB Systems VM and BM, ATP, ADW</p> <p>MySQL Database</p> <p>MySQL(DB Systems and configurations)</p> Load Balancers <p>Load Balancer</p> <p>Application Load Balancers, Network Load Balancers</p> Developer Services <p>Developer Services</p> <p>Upload to Resource Manager, Oracle Kubernetes Engine (OKE)</p> OCVS <p>SDDCs</p> <p>Oracle Cloud VMWare Solutions</p> Security <p>Policy Enforcement</p> <p>OPA - Open Policy Agent</p> <p>KMS</p> <p>Vaults and Keys</p> <p>Cloud Guard</p> <p>Cloud Guard</p> Observability &amp; Management <p>Monitoring</p> <p>Events, Notifications, Alarms, Service Connector Hub (SCH)</p> <p>Logging Services</p> <p>VCN Flow Logs, LBaaS access and error Logs, OSS Buckets Logs, Firewall Logs, FSS Logs</p> Other OCI Tools <p>CIS Landing Zone Compliance</p> <p>Download and Execute CIS Compliance Check Script</p> <p>Show OCI Report</p> <p>Download and Execute showOCI Script</p> <p>OCI FSDR</p> <p>Export and Update DR Plans</p>"},{"location":"sync-cli-jenkins/","title":"Commit Local changes to GIT","text":"<p>Note</p> <p>It is recommended to stick to using the toolkit either via CLI or via Jenkins.</p> <p>Note</p> <p>The below process will push the updated files to the develop branch of the GIT Repository. Successful completion of the resource specific terraform-apply pipeline in Jenkins will update to the main branch.</p> <p>There can be scenarios when updating the terraform_files folder manually via CLI is necessary. Below are some examples:</p> <ul> <li>The setUpOCI script is executed to generate tfvars for some resources via CLI.</li> <li>The variables_&lt;region&gt;.tf file is modified to update image OCID or SSH Key for Compute or Database etc.</li> </ul> <p>Follow below steps to sync local terraform_files folder to OCI DevOps GIT Repo:</p> <p>Step 1: <pre><code>  cd /cd3user/tenancies/&lt;prefix&gt;/terraform_files\n</code></pre> Step 2: <pre><code>  git status\n</code></pre>  Below screenshot shows changes in variables_phoenix.tf file under phoenix/compute folder.</p> <p></p> <p>Step 3: <pre><code> git add -A .\n</code></pre> Step 4: <pre><code> git commit -m \"msg\"\n</code></pre></p> <p></p> <p>Step 5: <pre><code>  git push\n</code></pre></p> <p></p>"},{"location":"tabs/","title":"Tabs","text":""},{"location":"tabs/#compartments-tab","title":"Compartments Tab","text":"<p>Use this Tab to create compartments in the OCI tenancy. On choosing \"Identity\" in the SetUpOCI menu will allow to create compartments in the OCI tenancy.</p> <p>Output terraform file generated at:  <code>&lt;outdir&gt;/&lt;region&gt;/&lt;service_dir&gt;/&lt;prefix&gt;_compartments.auto.tfvars</code> where &lt;region&gt; directory is the home region.</p> <p>Once terraform apply is done, you can view the resources under Identity -&gt; Compartments in OCI console.</p> <p>On re-running the same option you will find the previously existing files being backed up under directory    <code>&lt;outdir&gt;/&lt;region&gt;/&lt;service_dir&gt;/backup_compartments/&lt;Date&gt;-&lt;Month&gt;-&lt;Time&gt;</code>.</p> <p>Note</p> <ul> <li>If some compartment specified in excel is already existing in OCI, then Terraform Apply indicates creation of that compartment - this can be ignored as Terraform will only modify the existing Compartments (with additional information, if there are any eg: description) and not create a new/duplicate one.</li> <li>Terraform destroy on compartments or removing the compartments details from *_compartments.auto.tfvars will not delete them from OCI Console by default. Inorder to destroy them from OCI either - </li> <li>Add an additional column - enable_delete in Compartments Tab of CD3 Excel sheet with the value \"true\" for the compartments that needs to be deleted on terraform destroy. Execute the toolkit menu option to Create Compartments.</li> (OR) <li>Add enable_delete = true parameter to each of the compartment that needs to be deleted in *_compartments.auto.tfvars</li> </ul> <p> </p>"},{"location":"tabs/#groups-tab","title":"Groups Tab","text":"<p>Use this Tab to create groups and dynamic Groups in the OCI tenancy. On choosing \"Identity\" in the SetUpOCI menu will allow to create groups/dynamic groups in the OCI tenancy.</p> <p>The toolkit supports groups in IDCS, default and custom IAM domains now. </p> <p>Note:</p> <ol> <li>Use this tab to assign users to different groups respectively. Mention the usernames as comma separated values under the column \"Members\".</li> <li>Domain details should be mentioned in column \"Domain Name\" in the format of compartment@domain.</li> <li> <p>Entire path of the compartment can be mentioned with double column (::) separated. Format given below</p> <p><code>root::subcompartment1:subcompartment2@domain</code></p> </li> <li> <p>Domain Name can be left blank for group creation in IDCS and default domain.</p> </li> <li>Name is a mandatory field.</li> <li>The Default Administrator groups (\"Domain_Administrators\", \"All Domain Users\", \"Administrators\")  are skipped while export of groups from Identity Domain tenancies.</li> </ol> <p>Output terraform file generated at:  <code>&lt;outdir&gt;/&lt;region&gt;/&lt;service_dir&gt;/&lt;prefix&gt;_groups.auto.tfvars</code> where &lt;region&gt; directory is the home region.</p> <p>Once terraform apply is done, you can view the resources under Identity -&gt; Groups in OCI console.</p> <p>On re-running the same option you will find the previously existing files being backed up under directory \u2192   <code>&lt;outdir&gt;/&lt;region&gt;/&lt;service_dir&gt;/backup_groups/&lt;Date&gt;-&lt;Month&gt;-&lt;Time&gt;</code>.</p> <p>Important</p> <p>Check point no: 11 in the Known Behaviour section for details on Terraform's behavior when exporting normal and dynamic groups.</p>"},{"location":"tabs/#policies-tab","title":"Policies Tab","text":"<p>Use this Tab to create policies in the OCI tenancy. On choosing \"Identity\" in the SetUpOCI menu will allow to create policies in the OCI tenancy.</p> <p>Output terraform files generated at: <code>&lt;outdir&gt;/&lt;region&gt;/&lt;service_dir&gt;/&lt;prefix&gt;_policies.auto.tfvars</code> where &lt;region&gt; directory is the home region.</p> <p>Once terraform apply is done, you can view the resources under Identity -&gt; Policies in OCI console.</p> <p>On re-running the same option you will find the previously existing files being backed up under directory \u2192   <code>&lt;outdir&gt;/&lt;region&gt;/&lt;service_dir&gt;/backup_policies/&lt;Date&gt;-&lt;Month&gt;-&lt;Time&gt;</code>.</p>"},{"location":"tabs/#users-tab","title":"Users Tab","text":"<p>Use this Tab to create local users in the OCI tenancy. On choosing \"Identity\" in the SetUpOCI menu and \"Add/Modify/Delete Users\" submenu will allow to create users in the OCI tenancy.</p> <p>The toolkit supports users in IDCS, default and custom IAM domains now. </p> <p>Note:</p> <ol> <li>Domain details should be mentioned in column \"Domain Name\" in the format of compartment@domain.</li> <li> <p>Entire path of the compartment can be mentioned with double column (::) separated. Format given below</p> <p><code>root::subcompartment1:subcompartment2@domain</code></p> </li> <li> <p>Domain Name can be left blank for group creation in IDCS and default domain.</p> </li> <li>User Name, Family Name and User Email are mandatory fields for IAM domains.</li> <li>User Name and Description are mandatory fields for IDCS. User Email is optional.</li> <li>Mention the capabilities which needs to be enabled under \"Enable Capabilities\" column and the rest will be disabled. Currently terraform doesn't support Database Passwords and Oauth 2.0 Client Credentials in IDCS, so by default those will be enabled.</li> </ol> <p>Output terraform file generated: <code>&lt;outdir&gt;/&lt;region&gt;/&lt;service_dir&gt;/&lt;prefix&gt;_users.auto.tfvars</code> where &lt;region&gt; directory is the home region.</p> <p>Once terraform apply is done, you can view the resources under Identity &amp; Security -&gt; Users in OCI console.</p> <p>On re-running the same option you will find the previously existing files being backed up under directory \u2192 <code>&lt;outdir&gt;/&lt;region&gt;/&lt;service_dir&gt;/backup_users/&lt;Date&gt;-&lt;Month&gt;-&lt;Time&gt;</code>.</p>"},{"location":"tabs/#network-sources-tab","title":"Network Sources Tab","text":"<p>Use this Tab to create Network Source in the OCI tenancy. On choosing \"Identity\" in the SetUpOCI menu and \"Add/Modify/Delete Network Sources\" submenu will allow to create Network Sources in the OCI tenancy.</p> <p>Output terraform file generated: <code>&lt;outdir&gt;/&lt;region&gt;/&lt;service_dir&gt;/&lt;prefix&gt;_networksources.auto.tfvars</code> where &lt;region&gt; directory is the home region.</p> <p>Once terraform apply is done, you can view the resources under Identity &amp; Security -&gt; Network Sources in OCI console.</p> <p>On re-running the same option you will find the previously existing files being backed up under directory \u2192 <code>&lt;outdir&gt;/&lt;region&gt;/&lt;service_dir&gt;/backup_networksources/&lt;Date&gt;-&lt;Month&gt;-&lt;Time&gt;</code>.</p> <p>Note - Network Source creation/updation is supported only in the home region.  </p>"},{"location":"tabs/#tags-tab","title":"Tags Tab","text":"<p>Use this Tab to create tags - Namespaces, Key-Value pairs, Default and Cost Tracking Tags. On choosing \"Tags\" in the SetUpOCI menu will allow to create Tags in the OCI tenancy.</p> <p>Once this is complete you will find the generated output terraform files in below locations :</p> <p><pre><code> &lt;outdir&gt;/&lt;region&gt;/&lt;service_dir&gt;/&lt;prefix&gt;_tags-defaults.auto.tfvars\n\n &lt;outdir&gt;/&lt;region&gt;/&lt;service_dir&gt;/&lt;prefix&gt;_tags-namespaces.auto.tfvars\n\n &lt;outdir&gt;/&lt;region&gt;/&lt;service_dir&gt;/&lt;prefix&gt;_tags-keys.auto.tfvars \n</code></pre> under &lt;region&gt; directory.</p> <p>Once terraform apply is done, you can view the resources under Governance -&gt; Tag Namespaces for the region.</p> <p>On re-running the same option you will find the previously existing files being backed up under directory \u2192   <code>&lt;outdir&gt;/&lt;region&gt;/&lt;service_dir&gt;/backup_Tagging/&lt;Date&gt;-&lt;Month&gt;-&lt;Time&gt;</code>.</p>"},{"location":"tabs/#a-vcns-tab","title":"a. VCNs Tab","text":"<p>Note:</p> <ol> <li> <p>Mention value for column 'Hub/Spoke/Peer/None' in VCNs tab as None for utilising DRGv2 functionality (where DRG is directly attached to all VCNs and hub/spoke model is not required)</p> </li> <li> <p>Declare the DRG for the VCN in 'DRG Required' column of VCNs tab and then declare the attachment in DRGs tab also. Toolkit verifies the declaration in VCNs tab and then creates the DRG while reading the DRGs tab.</p> </li> </ol>"},{"location":"tabs/#b-drgs-tab","title":"b. DRGs Tab","text":"<p>Note:</p> <ol> <li>Only VCN and RPC attachments are supported via CD3 as of now for DRGv2. Create attachments for VC and IPSec via OCI console.</li> <li>Network export will also export only VCN and RPC attachments to CD3 excel sheet as of now.</li> <li>Create a Route Table for DRG which is not attached to any attachment by keeping 'Attached To' column in DRGs tab empty.</li> <li>Create an Import Route Distribution which is attached to some Route Table in DRG.</li> </ol>"},{"location":"tabs/#c-vcn-info-tab","title":"c. VCN Info tab","text":"<p>This is an important tab and contains general information about networking to be setup.</p>"},{"location":"tabs/#d-dhcp-tab","title":"d. DHCP tab","text":"<p>This contains information about DHCP options to be created for each VCN.</p>"},{"location":"tabs/#e-subnetsvlans-tab","title":"e. SubnetsVLANs tab","text":"<p>Notes:</p> <ol> <li>Name of the VCNs, subnets etc are all case-sensitive. Specify the same names in all required places. Avoid trailing spaces for a resource Name.</li> <li>A subnet or a vlan will be created based on the column - 'Subnet or VLAN'. When VLAN is specified, vlan tag can also be specified with sytanx as <code>VLAN::&lt;vlan_tag&gt;</code></li> <li>Column NSGs is read only for type VLAN.</li> <li>Columns - DHCP Option Name, Seclist Names, Add Default Seclist and DNS Label are applicable only for type Subnet.</li> <li> <p>Default Route Rules created are :</p> <p>a. Based on the values entered in columns \u2018configure SGW route\u2019, \u2018configure NGW route\u2019, \u2018configure IGW route\u2019, 'configure Onprem route' and 'configure VCNPeering route'  in Subnets sheet; if the value entered is \u2018y\u2019, it will create a route for the object in that subnet.</p> <p>Eg if \u2018configure IGW\u2019 in Subnets sheet is \u2018y\u2019 then it will read parameter \u2018igw_destination\u2019 in VCN Info tab and create a rule in the subnet with destination object as IGW of the VCN and destination CIDR as value of igw_destnation field.</p> <p>If comma separated values are entered in the igw_destination in VCN Info tab then the tool creates route rule for each destination cidr for IGW in that subnet.Tool works similarly for \u2018configure NGW\u2019 in Subnets tab and \u2018ngw_destination\u2019 in VCN Info tab. For SGW, route rule is added either 'all services' or object storage in that region.</p> <p>b.  For a hub spoke model, tool automatically creates route tables attached with the DRG and each LPG in the hub VCN peered with spoke VCN.  \u2018onprem_destinations\u2019 in VCN Info tab specifies the On Prem Network CIDRs.</p> </li> <li> <p>The below Default Security Rules are created:</p> <p>a.  Egress rule allowing all protocols for 0.0.0.0/0 is opened.</p> <p>b.  Ingress rule allowing all protocols for subnet CIDR is opened. This is to allow communication between VMs with in the same subnet.</p> </li> <li> <p>Default Security List of the VCN is attached to the subnet if \u2018add_default_seclist\u2019 parameter in Subnets tab is set to \u2018y\u2019.</p> </li> <li> <p>Components- IGW, NGW, DRG, SGW, LPGs and NSGs are created in same compartment as the VCN.</p> </li> <li> <p>VCN names need to be unique for the same region. Automation ToolKit does not support duplicate values at the moment. However you can have same VCN names across different regions.</p> </li> </ol> <p>Output terraform files are generated under &lt;outdir&gt;/&lt;region&gt; directory.</p> <p>Once terraform apply is done, you can view the resources under Networking -&gt; Virtual Cloud Networks in OCI console.</p> <p>Output files generated:</p> File name Description &lt;prefix&gt;_major-objects.auto.tfvars Contains TF for all VCNs and components- IGW, NGW, SGW, DRG, LPGs. &lt;prefix&gt;_custom-dhcp.auto.tfvars Contains TF for all DHCP options for all VCNs. &lt;prefix&gt;_routetables.auto.tfvars&lt;prefix&gt;_default-routetables.auto.tfvars&lt;prefix&gt;_drg-routetables.auto.tfvars&lt;prefix&gt;_drg-distributions.auto.tfvars&lt;prefix&gt;_drg-data.auto.tfvars Contains TF for route rules for each route table. &lt;prefix&gt;_seclists.auto.tfvars&lt;prefix&gt;_default-seclists.auto.tfvars Contains TF for security rules for each security list. &lt;prefix&gt;_subnets.auto.tfvars Contains TF for all subnets for all VCNs. &lt;prefix&gt;_vlans.auto.tfvars Contains TF for all VLANs for all VCNs. &lt;prefix&gt;_default-dhcp.auto.tfvars Contains TF for default DHCP options of each VCN in each region &lt;prefix&gt;_nsgs.auto.tfvars&lt;prefix&gt;_nsg-rules.auto.tfvars Contains TF for NSGs in each region"},{"location":"tabs/#f-rules","title":"f. Rules","text":"<p>After running Create Network, export the Security Rules, Route Rules, DRG Route Rules (using create_resources (Greenfield) Workflow) into the excel sheet and then modify the respective sheet to do any further modification to the rules.</p>"},{"location":"tabs/#g-nsgs","title":"g. NSGs","text":"<p>Use NSGs tab to add/modify/delete NSG rules and NSGs.</p>"},{"location":"tabs/#dns-views-zones-records-tab","title":"DNS-Views-Zones-Records-Tab","text":"<p>Below are the details about specific columns to fill the sheet for DNS-Views-Zones-Records-Tab</p> <ol> <li> <p>\"Compartment Name\"- Compartment name for the  Views/Zones</p> </li> <li> <p>\"View Name\"- Should be unique in a region</p> </li> <li> <p>\"Zone\" - Zone Name under the specified view</p> </li> <li> <p>\"Domain\" - Full domain name (including zone name)</p> </li> <li> <p>\"RType\" -  Select the RType from the list</p> </li> <li> <p>\"RDATA\" - Provide multi values as supported by the specified RType, separated by newline.     Click here to read more about RType and RDATA.  </p> </li> <li> <p>\"Defined Tags\" - Specify the defined tag key and its value in the format - &lt;Namespace&gt;.&lt;TagKey&gt;=&lt;Value&gt;  else leave it empty.     Multiple Tag Key , Values can be specified using semi-colon (;) as the delimeter.      Example: Operations.CostCenter=01;Users.Name=user01</p> </li> <li> <p>There must be only Single Row  for Domain and RType combination</p> </li> <li> <p>Rows are duplicated in case of multiple child resources</p> </li> </ol> <p>Output terraform files are generated under &lt;outdir&gt;/&lt;region&gt; directory.</p> <p>Once terraform apply is done, you can view the resources under Networking -&gt; DNS management in OCI console </p>"},{"location":"tabs/#firewall-tabs","title":"Firewall Tabs","text":"<p>OCI Network Firewall can be created using CD3-Firewall-template.xlsx. After the required details are filled in, choose \"OCI Firewall\" under the SetUpOCI menu to create the Firewall and its policy. </p> <p>It is recommended to execute the validator script for Firewall, to validate the input values before proceeding to create.</p> <p>Once the toolkit execution is complete,  output terraform files are generated at : <code>&lt;outdir&gt;/&lt;region&gt;/&lt;service_dir&gt;/&lt;prefix&gt;_firewall*.auto.tfvars</code></p> <p>Once terraform apply is done, you can view the resources under Identity and Security -&gt; Network Firewalls for the region.</p>"},{"location":"tabs/#dns-resolvers-tab","title":"DNS-Resolvers-Tab","text":"<p>Existing Resolvers need to be exported first before making any changes to those. Below are the details about specific columns to fill the sheet for DNS-Resolvers-Tab</p> <ol> <li> <p>\"Compartment Name\" - Compartment name for VCN</p> </li> <li> <p>\"Display Name\" -  Display Name is same as the VCN Name by default.</p> </li> <li> <p>\"Associated Private Views\" - Format: &lt;view_compartment&gt;@&lt;view_name&gt;. Multiple views are seperated by newline in the same cell(\\n is not supported).</p> </li> <li> <p>\"Endpoint Display Name\" - Provide endpoint display name, new row need to be created for each endpoint in a resolver. Duplicate Names are not allowed for a single resolver.</p> </li> <li> <p>\"Endpoint Type:IP Address\" - Format Type:IP, Type could be Forwarding or Listening. IP can be left as null if not predefined.</p> </li> <li> <p>\"Endpoint NSGs\"- NSGs attached to the endpint.</p> </li> <li> <p>\"Rules\" - Format: Type::Clients::Destination IP. Multiple rules are seperated by newline in the same cell(\\n is not supported)(Rules are processed only for Forwarding Endpoints)</p> </li> <li> <p>\"Defined Tags\" - Specify the defined tag key and its value in the format - &lt;Namespace&gt;.&lt;TagKey&gt;=&lt;Value&gt;  else leave it empty.    Multiple Tag Key , Values can be specified using semi colon (;) as the delimeter.     Example: Operations.CostCenter=01;Users.Name=user01 </p> </li> <li> <p>Associated Private Views can be null/blank</p> </li> </ol> <p>Output terraform files are generated under &lt;outdir&gt;/&lt;region&gt; directory.</p> <p>Once terraform apply is done, you can view the resources under Networking -&gt; Virtual Cloud Network -&gt; VCN Information in OCI console</p>"},{"location":"tabs/#dedicatedvmhosts-tab","title":"DedicatedVMHosts Tab","text":"<p>Fill up the details in 'DedicatedVMHosts' sheet and follow the options below.</p> <p>On choosing \"Compute\" in the SetUpOCI menu and \"Add/Modify/Delete Dedicated VM Hosts\" submenu will allow to launch your VM on a dedicated host.</p> <p>Output terraform file generated: <code>&lt;outdir&gt;/&lt;region&gt;/&lt;service_dir&gt;/&lt;prefix&gt;_dedicatedvmhosts.auto.tfvars</code>.</p> <p>Once terraform apply is done, you can view the resources under Compute -&gt; Dedicated Virtual Machine Hosts for the region.</p> <p>If you want to update or add new dedicated VM hosts, update the 'DedicatedVMHosts' tab in cd3 and rerun using setUpOCI.</p> <p>On re-running the same option you will find the previously existing files being backed up under directory \u2192   <code>&lt;outdir&gt;/&lt;region&gt;/&lt;service_dir&gt;/backup_dedicatedvmhosts/&lt;Date&gt;-&lt;Month&gt;-&lt;Time&gt;</code>.</p>"},{"location":"tabs/#instances-tab","title":"Instances Tab","text":"<p>CD3 Tab Specifications:</p> <ol> <li> <p>\"Display Name\" column is case sensitive. Specified value will be the display name of Instance in OCI console.</p> </li> <li> <p>Optional columns can also be left blank - like Fault Domain, IP Address. They will take default values when left empty.</p> </li> <li> <p>Leave columns: Backup Policy, NSGs, DedicatedVMHost blank if instance doesn't need to be part of any of these. Instances can be made a part of Backup Policy and NSGs later by choosing appropriate option in setUpOCI menu.</p> <p>Note: The column \"SSH Key Var Name\" accepts SSH key value directly or the name of variable declared in variables.tf under the  instance_ssh_keys variable containing the key value. Make sure to have an entry in variables_&lt;region&gt;.tf file with the name you enter in SSH Key Var Name field of the Excel sheet and put the value as SSH key value.</p> <p>For Eg: If you enter the SSH Key Var Name as ssh_public_key, make an entry in variables_&lt;region&gt;.tf file as shown below:</p> <pre><code>  variable  'instance_ssh_keys'  {\n  type = map(any)\n  default = {\n  ssh_public_key = \"&lt;SSH PUB KEY STRING HERE&gt;\"\n  # Use '\\n' as the delimiter to add multiple ssh keys.\n  # Example: ssh_public_key = \"ssh-rsa AAXXX......yhdlo\\nssh-rsa AAxxskj...edfwf\"\n  #START_instance_ssh_keys#\n  # exported instance ssh keys\n  #instance_ssh_keys_END#\n    }\n  }\n</code></pre> </li> <li> <p>Enter \"Network Details\" column value as: <code>&lt;compartment-name&gt;@&lt;vcn-name&gt;::&lt;subnet-name&gt;</code></p> </li> <li> <p>Enter remote execute script(Ansible/Shell) name. Shell scripts should be named with *.sh and ansible with *.yaml or *.yml inside 'scripts' folder within the region/service dir. This feature is tested against OL8.  </p> </li> <li> <p>Create a column called 'Cloud Init Script' to execute scripts (located under 'scripts' folder within the region/service dir) as part of cloud-init.   </p> </li> <li> <p>Source Details column of the excel sheet accepts both image and boot volume as the source for instance to be launched. Format -    <pre><code>  image::&lt;variable containing ocid of image&gt; or\n  bootVolume::&lt;variable containing ocid of boot volume&gt;\n</code></pre></p> </li> <li> <p>Make sure to have an entry in variables_&lt;region&gt;.tf file for the value you enter in Source Details field of the Excel sheet.   Ex: If you enter the Source Details as image::Linux, make an entry in variables_&lt;region&gt;.tf file under the instance_source_ocids variable as shown below:</p> <pre><code>variable 'instance_source_ocids' {\ntype = map(any)\nLinux    = \"&lt;LATEST LINUX OCID HERE&gt;\"\nWindows  = \"&lt;LATEST WINDOWS OCID HERE&gt;\"\nPaloAlto = \"Palo Alto Networks VM-Series Next Generation Firewall\"\n#START_instance_source_ocids#\n# exported instance image ocids\n#instance_source_ocids_END#\n}\n</code></pre> </li> <li> <p>Mention shape to be used in Shape column of the excel sheet. If Flex shape is to be used format is:<code>shape::ocpus</code></p> <p>eg: <code>VM.Standard.E3.Flex::5</code></p> </li> <li> <p>Custom Policy Compartment Name : Specify the compartment name where the Custom Policy is created.</p> </li> <li> <p>While export of instances, it will fetch details for only the primary VNIC attached to the instance</p> </li> </ol> <p>On choosing \"Compute\" in the SetUpOCI menu and \"Add/Modify/Delete Instances/Boot Backup Policy\" submenu will allow to launch your VM on OCI tenancy.</p> <p>Output terraform file generated: <code>&lt;outdir&gt;/&lt;region&gt;/&lt;service_dir&gt;/&lt;prefix&gt;_instances.auto.tfvars</code> and <code>&lt;outdir&gt;/&lt;region&gt;/&lt;service_dir&gt;/&lt;prefix&gt;_boot-backup-policy.auto.tfvars</code>  under  appropriate &lt;region&gt; directory.</p> <p>Once the terraform apply is complete, view the resources under Compute -&gt; Instances for the region.</p> <p>On re-running the same option you will find the previously existing files being backed up under directory \u2192   <code>&lt;outdir&gt;/&lt;region&gt;/&lt;service_dir&gt;/backup_instances/&lt;Date&gt;-&lt;Month&gt;-&lt;Time&gt;</code>.</p>"},{"location":"tabs/#blockvolumes-tab","title":"BlockVolumes Tab","text":"<p>This tab in cd3 excel sheet is used when you need to create block volumes and attach the same to the instances in the OCI tenancy. </p> <p>Automation Tool Kit does not support sharing of volumes at the moment. While export of block volumes, if the block volume is attached to multiple instances, it will just fetch details about one attachment.</p> <p>On choosing \"Storage\" in the SetUpOCI menu and \"Add/Modify/Delete Block Volumes/Block Backup Policy\" submenu will allow to create block volumes in OCI Tenancy.</p> <p>On completion of execution, you will be able to find the output terraform file generated at : </p> <p><code>&lt;outdir&gt;/&lt;region&gt;/&lt;service_dir&gt;/&lt;prefix&gt;_blockvolumes.auto.tfvars</code></p> <p><code>&lt;outdir&gt;/&lt;region&gt;/&lt;service_dir&gt;/&lt;prefix&gt;_block-backup-policy.auto.tfvars</code>  under  appropriate &lt;region&gt; directory.</p> <p>Once terraform apply is done, you can view the resources under Block Storage -&gt; Block Volumes  in OCI console.</p> <p>On re-running the option to create Block Volumes you will find the previously existing files being backed up under directory:</p> <p><code>&lt;outdir&gt;/&lt;region&gt;/&lt;service_dir&gt;/backup_blockvolumes/&lt;Date&gt;-&lt;Month&gt;-&lt;Time&gt;</code>   and   <code>&lt;outdir&gt;/&lt;region&gt;/&lt;service_dir&gt;/backup_BlockBackupPolicy/&lt;Date&gt;-&lt;Month&gt;-&lt;Time&gt;</code>.</p>"},{"location":"tabs/#fss-tab","title":"FSS Tab","text":"<p>On choosing \"Storage\" in the SetUpOCI menu and \"Add/Modify/Delete File Systems\" submenu will allow to create file system storage on OCI tenancy.</p> <p>Note:   Freeform and Defined Tags - If specified, applies to FSS object only and not to other components like Mount Target.</p> <p>Once this is complete you will find the generated output terraform files in location :</p> <p><code>&lt;outdir&gt;/&lt;region&gt;/&lt;service_dir&gt;/&lt;prefix&gt;_fss.auto.tfvars</code></p> <p>Once terraform apply is done, you can view the resources under File Storage \u2192 File Systems for the region.</p> <p>On re-running the same option you will find the previously existing files being backed up under directory \u2192   <code>&lt;outdir&gt;/&lt;region&gt;/&lt;service_dir&gt;/backup_FSS/&lt;Date&gt;-&lt;Month&gt;-&lt;Time&gt;</code>.</p> <p>Important</p> <p>As of the CD3 v2025.1.0, the export of FSS is supported only by region and compartment, not based on Tags. </p>"},{"location":"tabs/#load-balancers","title":"Load Balancers","text":"<p>Automation Tool Kit allows you to create Load Balancers. Components that you can create using the Tool Kit includes:</p> Resource Tab Name Load BalancersHostnamesCipher SuitesCertificates LB-Hostname-Certs Backend Sets and Backend Servers BackendSet-BackendServer Rule Set RuleSet Path Route Set PathRouteSet Listeners LB-Listeners <p>NOTE : While exporting and synching the tfstate file for LBR objects, the user may be notified that a few components will be modified on apply. In such scenarios, add the attributes that the Terraform notifies to be changed to the appropriate CD3 Tab of Load Balancer and Jinja2 Templates (as a non-default attribute) and re-run the export.</p> <p>On choosing \"Load Balancers\" in the SetUpOCI menu will allow to create load balancers in OCI tenancy.</p> <p>Load Balancers, Hostnames , Certificates and Cipher Suites:</p> <p>Use the tab LB-Hostname-Certs of CD3 Excel to create the following components of Load Balancer:</p> <p>Load Balancers Hostnames Cipher Suites Certificates</p> <p>Certificates, Hostnames and Cipher Suites are optional. Leave the related columns empty if they are not required.</p>"},{"location":"tabs/#lb-hostname-certs-tab","title":"LB-Hostname-Certs Tab","text":"<p>Once this is complete you will find the generated output terraform files in location :</p> <p><code>&lt;outdir&gt;/&lt;region&gt;/&lt;service_dir&gt;/&lt;prefix&gt;_lb-hostname-certs.auto.tfvars</code></p> <p>Once terraform apply is done, you can view the resources under Networking \u2192 Load Balancers for the region.</p> <p>On re-running the same option you will find the previously existing files being backed up under directory \u2192   <code>&lt;outdir&gt;/&lt;region&gt;/&lt;service_dir&gt;/backup_lb-hostname-certs/&lt;Date&gt;-&lt;Month&gt;-&lt;Time&gt;</code>.</p>"},{"location":"tabs/#lb-backend-set-and-backend-servers-tab","title":"LB-Backend Set and Backend Servers Tab","text":"<p>Use the tab LB-BackendSet-BackendServer of CD3 Excel to create the following components of Load Balancer:</p> <ul> <li>Backend Sets</li> <li>Backend Servers</li> </ul> <p>Once this is complete you will find the generated output terraform files in location :</p> <p><code>&lt;outdir&gt;/&lt;region&gt;/&lt;service_dir&gt;/&lt;prefix&gt;_lb-backendset-backendserver.auto.tfvars</code></p> <p>Once terraform apply is done, you can view the resources under Networking\u2192Load Balancers for the region.</p> <p>On re-running the same option you will find the previously existing files being backed up under directory \u2192   <code>&lt;outdir&gt;/&lt;region&gt;/&lt;service_dir&gt;/backup_lb-backendset-backendserver/&lt;Date&gt;-&lt;Month&gt;-&lt;Time&gt;</code>.</p>"},{"location":"tabs/#lb-ruleset-tab","title":"LB-RuleSet Tab","text":"<p>Use the tab LB-RuleSet of CD3 Excel to create the following components of Load Balancer:</p> <ul> <li>Rule Sets</li> </ul> <p>Once this is complete you will find the generated output terraform files in location :</p> <p><code>&lt;outdir&gt;/&lt;region&gt;/&lt;service_dir&gt;/&lt;prefix&gt;_lb-ruleset.auto.tfvars</code></p> <p>Once terraform apply is done, you can view the resources under Networking\u2192Load Balancers for the region.</p> <p>On re-running the same option you will find the previously existing files being backed up under directory \u2192   <code>&lt;outdir&gt;/&lt;region&gt;/&lt;service_dir&gt;/backup_lb-ruleset/&lt;Date&gt;-&lt;Month&gt;-&lt;Time&gt;</code>.</p>"},{"location":"tabs/#lb-path-route-set-tab","title":"LB-Path Route Set Tab","text":"<p>Use the tab LB-PathRouteSet of CD3 Excel to create the following components of Load Balancer:</p> <ul> <li>Path Route Sets</li> </ul> <p>Once this is complete you will find the generated output terraform files in location :</p> <p><code>&lt;outdir&gt;/&lt;region&gt;/&lt;service_dir&gt;/&lt;prefix&gt;_lb-pathrouteset.auto.tfvars</code></p> <p>Once terraform apply is done, you can view the resources under Networking\u2192Load Balancers for the region.</p>"},{"location":"tabs/#lb-routing-policy-tab","title":"LB-Routing Policy Tab","text":"<p>Use the tab LB-RoutingPolicy of CD3 Excel to create the following components of Load Balancer:</p> <ul> <li>Routing Policies</li> </ul> <p>Once this is complete you will find the generated output terraform files in location :</p> <p><code>&lt;outdir&gt;/&lt;region&gt;/&lt;service_dir&gt;/&lt;prefix&gt;_lb-routingpolicy.auto.tfvars</code></p> <p>Once terraform apply is done, you can view the resources under Networking\u2192Load Balancers for the region.</p> <p>On re-running the same option you will find the previously existing files being backed up under directory \u2192   <code>&lt;outdir&gt;/&lt;region&gt;/&lt;service_dir&gt;/backup_lb-routingpolicy/&lt;Date&gt;-&lt;Month&gt;-&lt;Time&gt;</code>.</p>"},{"location":"tabs/#lb-listeners-tab","title":"LB-Listeners Tab","text":"<p>Use the tab LB-Listener of CD3 Excel to create the following components of Load Balancer:</p> <ul> <li>LB Listener</li> </ul> <p>Once this is complete you will find the generated output terraform files in location :</p> <p><code>&lt;outdir&gt;/&lt;region&gt;/&lt;service_dir&gt;/&lt;prefix&gt;_lb-listener.auto.tfvars</code></p> <p>Once terraform apply is done, you can view the resources under Networking\u2192Load Balancers for the region.</p> <p>On re-running the same option you will find the previously existing files being backed up under directory \u2192   <code>&lt;outdir&gt;/&lt;region&gt;/&lt;service_dir&gt;/backup_LB-Listener/&lt;Date&gt;-&lt;Month&gt;-&lt;Time&gt;</code>.</p>"},{"location":"tabs/#dbsystems-vm-bm-tab","title":"DBSystems-VM-BM Tab","text":"<p>This helps you to create DB Systems hosted on Virtual Machine and Bare Metal. This can be configured based on the shape chosen in the tab.</p> <p>Note: The column \"SSH Key Var Name\" accepts SSH key value directly or the name of variable declared in variables.tf under the  dbsystem_ssh_keys variable containing the key value. Make sure to have an entry in variables_&lt;region&gt;.tf file with the name you enter in SSH Key Var Name field of the Excel sheet and put the value as SSH key value.</p> <p>For Eg: If you enter the SSH Key Var Name as ssh_public_key, make an entry in variables_&lt;region&gt;.tf file as shown below:</p> <pre><code>variable \"dbsystem_ssh_keys\" {\ntype = map(any)\ndefault = {\nssh_public_key = \"&lt;SSH PUB KEY STRING HERE&gt;\"\n# Use ',' as the delimiter to add multiple ssh keys.\n# Example: ssh_public_key = [\"ssh-rsa AAXXX......yhdlo\",\"ssh-rsa AAxxskj...edfwf\"]\n#START_dbsystem_ssh_keys#\n# exported dbsystem ssh keys\n#dbsystem_ssh_keys_END#\n   }\n}\n</code></pre> <p>On choosing \"Database\" in the SetUpOCI menu and \"Add/Modify/Delete Virtual Machine or Bare Metal DB Systems\" submenu will allow to create DB Systems hosted on Virtual Machine and Bare Metal.</p> <p>Output terraform file generated: </p> <p><code>&lt;outdir&gt;/&lt;region&gt;/&lt;service_dir&gt;/&lt;prefix&gt;_dbsystem-vm-bm.auto.tfvars</code> under where &lt;region&gt; directory is the region specified for the DB System.  </p> <p>Once terraform apply is done, you can view the resources under Bare Metal, VM, and Exadata-&gt; DB Systems in OCI console.</p> <p>On re-running the same option you will find the previously existing files being backed up under directory \u2192   <code>&lt;outdir&gt;/&lt;region&gt;/&lt;service_dir&gt;/backup_dbsystems-vm-bm/&lt;Date&gt;-&lt;Month&gt;-&lt;Time&gt;</code>.</p>"},{"location":"tabs/#exacs","title":"ExaCS","text":"<p>You can create ExaCS in OCI by utilizing Exa-Infra and Exa-VM Cluster tabs in CD3 excel sheet.</p> <p>Note: The column \"SSH Key Var Name\" accepts SSH key value directly or the name of variable declared in variables.tf under the  exacs_ssh_keys variable containing the key value. Make sure to have an entry in variables_&lt;region&gt;.tf file with the name you enter in SSH Key Var Name field of the Excel sheet and put the value as SSH key value.</p> <p>For Eg: If you enter the SSH Key Var Name as ssh_public_key, make an entry in variables_&lt;region&gt;.tf file as shown below:</p> <pre><code>  variable \"exacs_ssh_keys\" {\n    type = map(any)\n    default = {\n      ssh_public_key = \"&lt;SSH PUB KEY STRING HERE&gt;\"\n      # Use ',' as the delimiter to add multiple ssh keys.\n      # Example: ssh_public_key = [\"ssh-rsa AAXXX......yhdlo\",\"ssh-rsa AAxxskj...edfwf\"]\n      #START_exacs_ssh_keys#\n      # exported exacs ssh keys\n      #exacs_ssh_keys_END#\n    }\n  }\n</code></pre> <p>On choosing \"Database\" in the SetUpOCI menu and \"Add/Modify/Delete EXA Infra and EXA VM Clusters\" submenu will allow to create ExaCS in OCI tenancy.</p> <p>Output terraform file generated: </p> <p><code>&lt;outdir&gt;/&lt;region&gt;/&lt;service_dir&gt;/&lt;prefix&gt;_exa-infra.auto.tfvars</code> under where &lt;region&gt; directory is the region hosting the Exa Infra.</p> <p><code>&lt;outdir&gt;/&lt;region&gt;/&lt;service_dir&gt;/&lt;prefix&gt;_exa-vmclusters.auto.tfvars</code> under where &lt;region&gt; directory is the region hosting the Exa VM Clusters.</p> <p>Once terraform apply is done, you can view the resources under Bare Metal, VM, and Exadata-&gt; Exadata Infrastructure and Exadata VM Clusters in OCI console.</p> <p>On re-running the same option you will find the previously existing files being backed up under directory \u2192   <code>&lt;outdir&gt;/&lt;region&gt;/&lt;service_dir&gt;/backup_exa-infra/&lt;Date&gt;-&lt;Month&gt;-&lt;Time&gt;</code></p> <p>and <code>&lt;outdir&gt;/&lt;region&gt;/&lt;service_dir&gt;/backup_exa-vmclusters/&lt;Date&gt;-&lt;Month&gt;-&lt;Time&gt;</code></p>"},{"location":"tabs/#adb-tab","title":"ADB Tab","text":"<p>Use this Tab to create Autonomous Database Warehouse or Autonomous Database Transaction Processing in the OCI tenancy.</p> <p>On choosing \"Database\" in the SetUpOCI menu and \"Add/Modify/Delete ADBs\" submenu will allow to create Autonomous Database Warehouse or Autonomous Database Transaction Processing in the OCI tenancy.</p> <p>Output terraform file generated:  <code>&lt;outdir&gt;/&lt;region&gt;/&lt;service_dir&gt;/&lt;prefix&gt;_adb.auto.tfvars</code> where &lt;region&gt; directory is the region hosting the respective ADB.</p> <p>Once terraform apply is done, you can view the resources under Oracle Database -&gt; Autonomous Database in OCI console.</p> <p>On re-running the same option you will find the previously existing files being backed up under directory \u2192   <code>&lt;outdir&gt;/&lt;region&gt;/&lt;service_dir&gt;/backup_adb/&lt;Date&gt;-&lt;Month&gt;-&lt;Time&gt;</code></p> <p>NOTE -</p>    - Currently toolkit supports ADB creation in Shared Infra only,"},{"location":"tabs/#mysql-tabs","title":"MySQL Tabs","text":"<p><code>Use this to create MySQL Database Systems and Configurations in the OCI tenancy.</code></p> <p>On choosing \"Database\" in the SetUpOCI menu and \"Add/Modify/Delete MySQL DBs\" submenu will allow to create MySQL Database Systems and Configurations in the OCI tenancy.</p> <p>Output File</p> Output terraform files generated: <code>&lt;outdir&gt;/&lt;region&gt;/&lt;customer_name&gt;_mysql-dbsystems.auto.tfvars</code> and <code>&lt;outdir&gt;/&lt;region&gt;/&lt;customer_name&gt;_mysql-configurations.auto.tfvars</code> where &lt;region&gt; directory is the region specified for the MySQL DB System.  <p>Once terraform apply is done, you can view the resources under Databases -&gt; HeatWave MySQL -&gt; DB System in OCI console for MySQL DB System and Databases -&gt; HeatWave MySQL -&gt; Configurations for MySQL Configurations.</p> <p>On re-running the same option you will find the previously existing files being backed up under directory \u2192 <code>&lt;outdir&gt;/&lt;region&gt;/&lt;service_dir&gt;/backup_mysql/Date-Month-Time</code></p>"},{"location":"tabs/#excel-sheet-columns-and-its-description","title":"Excel sheet Columns and its Description","text":"Column Description Backup policy is enabled Specifies if automatic backups are enabled. Backup policy pitr policy is enabled Specifies if PITR is enabled or disabled Backup policy Retention in days Number of days to retain an automatic backup. Backup policy window start time The start of a 30-minute window of time in which daily, automated backups occur. This should be in the format of the \"Time\" portion of an RFC3339-formatted timestamp. Any second or sub-second time data will be truncated to zero. At some point in the window, the system may incur a brief service disruption as the backup is performed. Crash Recovery is Enabled Data Storage (in Gbs) Whether to run the DB System with InnoDB Redo Logs and the Double Write Buffer enabled or disabled, and whether to enable or disable syncing of the Binary Logs. Database Management is Enabled Whether to enable monitoring via the Database Management service. Deletion policy automatic backup retention Specifies if any automatic backups created for a DB System should be retained or deleted when the DB System is deleted. Deletion policy final backup Specifies whether or not a backup is taken when the DB System is deleted. REQUIRE_FINAL_BACKUP: a backup is taken if the DB System is deleted. SKIP_FINAL_BACKUP: a backup is not taken if the DB System is deleted. Deletion policy is deleted protected Specifies whether the DB System can be deleted. Set to true to prevent deletion, false (default) to allow. Maintenance window start time The start time of the maintenance window. This string is of the format: \"{day-of-week} {time-of-day}\". \"{day-of-week}\" is a case-insensitive string like \"mon\", \"tue\", &amp;c. \"{time-of-day}\" is the \"Time\" portion of an RFC3339-formatted timestamp. Any second or sub-second time data will be truncated to zero. If you set the read replica maintenance window to \"\" or if not specified, the read replica is set same as the DB system maintenance window. Port The port for primary endpoint of the DB System to listen on. Port_x The TCP network port on which X Plugin listens for connections. This is the X Plugin equivalent of port. Source Type The specific source identifier. Use BACKUP for creating a new database by restoring from a backup. Use IMPORTURL for creating a new database from a URL Object Storage PAR. Configuration id The OCID of the Configuration to be used for this DB System. <p>Important</p> <p>For <code>users_variable_name</code> and <code>users_variable_value</code> in the excel sheet the accepted format for this field, <code>&lt;users_variable_name&gt;_&lt;users_variable_value&gt;</code> For example : <code>BINLOG_ROW_METADATA</code> is the user variable and <code>FULL</code> is the value then the accepted value in users_variable_name should be <code>BINLOG_ROW_METADATA_FULL</code> and its respective users_variable_value should be <code>FULL</code></p> MySQL Configuration Variables Supported Values BINLOG_ROW_IMAGE FULL BINLOG_ROW_METADATA_FULL FULL BINLOG_ROW_METADATA_MINIMAL MINIMAL BINLOG_ROW_METADATA_FULL FULL GROUP_REPLICATION_CONSISTENCY_BEFORE BEFORE <p>Reference for OCI Mysql Configuration Variables</p> <p>Important</p> <ul> <li>Currently Heatwave is not supported as part of CD3 deployment.</li> <li> <p>Creating a custom MySQL configuration and using it as part of a MySQL DB system simultaneously is not supported at the moment. You need to create the custom MySQL configuration first and then use it as part of the MySQL DB system.</p> <p>For example: If you are creating a custom MySQL configuration called \"mysql-config-1\" and want to use it as part of a MySQL DB system called \"mysql-db-1\", you must create the MySQL configuration \"mysql-config-1\" first and then use it when creating the MySQL DB system.</p> </li> </ul>"},{"location":"tabs/#notifications-tab","title":"Notifications Tab","text":"<p>On choosing \"Management Services\" in the SetUpOCI menu and \"Add/Modify/Delete Notification\" and \"Add/Modify/Delete Events\" submenu will allow to manage events and notifications in OCI tenancy.</p> <p>Output terraform file generated: *&lt;outdir&gt;/&lt;region&gt;/&lt;customer_name&gt;_notifications.auto.tfvars<code>and *&lt;outdir\\&gt;/&lt;region\\&gt;/&lt;customer_name&gt;_events.auto.tfvars</code> </p> <p>Once the terraform apply is complete, view the resources under Application Integration-&gt; Notifications &amp; Application Integration-&gt; Events for the region in OCI Console.</p> <p>Further, on re-running the same option you will find the previously existing files being backed up under directory \u2192   <code>&lt;outdir&gt;/&lt;region&gt;/&lt;service_dir&gt;/backup_events/&lt;Date&gt;-&lt;Month&gt;-&lt;Time&gt;</code> or <code>&lt;outdir&gt;/&lt;region&gt;/&lt;service_dir&gt;/backup_notifications/&lt;Date&gt;-&lt;Month&gt;-&lt;Time&gt;</code></p> <p>Note: </p> <ul> <li>Notifications can not be configured for a particular resource OCID at the moment.</li> <li>Export of Notifications supports ONS and FAAS(will put OCID for the function in the CD3). It will skip the event export if action type is OSS.</li> </ul>"},{"location":"tabs/#alarms-tab","title":"Alarms Tab","text":"<p>Use CD3-ManagementServices-template.xlsx under example folder of GIT as input file for creating/exporting Alarms.</p> <p>On choosing \"Management Services\" in the SetUpOCI menu and \"Add/Modify/Delete Alarms\" submenu will allow to manage alarms in OCI tenancy.</p> <p>Output terraform file generated: *&lt;outdir&gt;/&lt;region&gt;/&lt;customer_name&gt;_alarms.auto.tfvars``` </p> <p>Once the terraform apply is complete, view the resources under Observability &amp; Management\u2192  Monitoring \u2192 Alarms Definition for the region in OCI Console.</p> <p>Further, on re-running the same option you will find the previously existing files being backed up under directory \u2192   <code>&lt;outdir&gt;/&lt;region&gt;/&lt;service_dir&gt;/backup_alarms/&lt;Date&gt;-&lt;Month&gt;-&lt;Time&gt;</code></p>"},{"location":"tabs/#serviceconnectors-tab","title":"ServiceConnectors Tab","text":"<p>Use CD3-ManagementServices-template.xlsx under example folder of GIT as input file for creating/exporting Service connectors.</p> <p>The service connector resources provisioning can be initiated by updating the corresponding excel sheet tab.</p> <p>CIS LZ recommends to create SCH to collect audit logs for all compartments, VCN Flow Logs and Object Storage Logs and send to a particular target that can be read by SIEM. CD3 SCH automation is aligned with CIZ LZ and allow the user to deploy/provision the recommended approach by filling in the suitable data in excel sheet.</p> <p>Output terraform file generated: *&lt;outdir&gt;/&lt;region&gt;/&lt;customer_name&gt;_serviceconnectors.auto.tfvars``` </p> <p>Once the terraform apply is complete, view the resources under service connectors window for the region in OCI Console.</p> <p>Further, on re-running the same option you will find the previously existing files being backed up under directory \u2192  <code>&lt;outdir&gt;/&lt;region&gt;/&lt;service_dir&gt;/backup_serviceconnectors/&lt;Date&gt;-&lt;Month&gt;-&lt;Time&gt;</code></p> <p>Note - </p> <ul> <li>The service connector resources created via automation will not have the corresponding IAM policies between source and destination entities. It has to be created separately.</li> <li>The user will get an option to create the IAM policy when you click on Edit for the respective service connector provisioned through terraform like in below screenshot:</li> </ul> <p></p> <ul> <li>Also, When the target kind is 'notifications' the value for formatted messages parameter is set to 'true' as default. Its set to 'false' only when the source is 'streaming'.</li> </ul> <p>Important</p> <p>Check point no: 9 in the Known Behaviour section for details on Terraform's behavior when exporting service connectors.</p>"},{"location":"tabs/#oke-tab","title":"OKE Tab","text":"<p>Use this tab to create OKE components in OCI.</p> <p>Note: The column \"SSH Key Var Name\" accepts SSH key value directly or the name of variable declared in variables.tf under the  oke_ssh_keys variable containing the key value. Make sure to have an entry in variables_&lt;region&gt;.tf file with the name you enter in SSH Key Var Name field of the Excel sheet and put the value as SSH key value.</p> <p>For Eg: If you enter the SSH Key Var Name as ssh_public_key, make an entry in variables_&lt;region&gt;.tf file as shown below:</p> <pre><code>variable \"oke_ssh_keys\" {\ntype = map(any)\ndefault = {\n    ssh_public_key = \"&lt;SSH PUB KEY STRING HERE&gt;\"\n    # Use '\\n' as the delimiter to add multiple ssh keys.\n    # Example: ssh_public_key = \"ssh-rsa AAXXX......yhdlo\\nssh-rsa AAxxskj...edfwf\"\n    #START_oke_ssh_keys#\n    #oke_ssh_keys_END#\n  }\n}\n</code></pre> <ul> <li>For source details column, the format should be as below</li> </ul> <p><code>image::&lt;variable containing ocid of image&gt;</code></p> <p>Make sure to have an entry in variables_&lt;region&gt;.tf file for the value you enter in Source Details field of the Excel sheet.</p> <p>Eg: If you enter the Source Details as image::Linux, make an entry in variables_&lt;region&gt;.tf file under the oke_source_ocids variable as shown below:</p> <pre><code>        variable \"oke_source_ocids\" {\n          type = map(any)\n          default = {\n            Linux = \"&lt;OKE LINUX OCID HERE&gt;\"\n            #START_oke_source_ocids#\n            # exported oke image ocids\n            #oke_source_ocids_END#\n          }\n        }\n</code></pre> <p>On choosing \"Developer Services\" in the SetUpOCI menu and \"Add/Modify/Delete OKE Cluster and Nodepools\" submenu will allow to manage oke components in OCI tenancy.</p> <p>On completion of execution, you will be able to find the output terraform file generated at : </p> <p><code>&lt;outdir&gt;/&lt;region&gt;/&lt;service_dir&gt;/&lt;prefix&gt;_oke_clusters.auto.tfvars</code></p> <p><code>&lt;outdir&gt;/&lt;region&gt;/&lt;service_dir&gt;/&lt;prefix&gt;_oke_nodepools.auto.tfvars</code> </p> <p>Once terraform apply is done, you can view the resources under Developer Services -&gt; Kubernetes Clusters (OKE) for the region in OCI console.</p> <p>On re-running the option to create oke clusters and noodepools you will find the previously existing files being backed up under directory:</p> <p><code>&lt;outdir&gt;/&lt;region&gt;/&lt;service_dir&gt;/backup_oke/&lt;Date&gt;-&lt;Month&gt;-&lt;Time&gt;</code>.</p> <p>Notes:</p> <ul> <li>Current version of the toolkit support only single availability domain placement for the nodepool. So if a cluster is exported with nodepools having multiple placement configuration, the terraform plan will show changes similar to:</li> </ul> <p></p> <p></p> <p>To avoid this, an ignore statement as shown below is added to ignore any changes to the placement configuration in nodepool.</p> <pre><code>  ignore_changes = [node_config_details[0].placement_configs,kubernetes_version, defined_tags[\"Oracle-Tags.CreatedOn\"], defined_tags[\"Oracle-Tags.CreatedBy\"],node_config_details[0].defined_tags[\"Oracle-Tags.CreatedOn\"],node_config_details[0].defined_tags[\"Oracle-Tags.CreatedBy\"]]\n</code></pre> <p>Known Observed behaviours:</p> <ul> <li>It has been observed that the order of kubernetes labels change randomly during an export. In such situations a terraform plan detects it as a change to the kubernetes labels.</li> </ul>"},{"location":"tabs/#vcn-flow-logs","title":"VCN FLow Logs","text":"<p>This will enable Flow logs for all the subnets mentioned in 'SubnetsVLANs' tab of CD3 Excel sheet. Log group for each VCN is created under the same compartment as specified for VCN and all subnets are added as logs to this log group.</p> <p>Below TF file is created:</p> File name Description &lt;customer_name&gt;_vcnflow-logging.auto.tfvars TF variables file containing log group for each VCN and logs for eachsubnet in that VCN."},{"location":"tabs/#lbaas-logs","title":"LBaaS Logs","text":"<p>This will enable LBaaS logs for all the LBs mentioned in 'LB-Hostname-Certs' tab of CD3 Excel sheet. Log group for each LBaaS is created under the same compartment as specified for LBaaS and access and error log types are added as logs to this log group.</p> <p>Below TF file is created:</p> File name Description &lt;customer_name&gt;_load-balancers-logging.auto.tfvars TF variables file containing log group for each LBaaS and its error and access logs."},{"location":"tabs/#oss-logs","title":"OSS Logs","text":"<p>This will enable OSS Bucket logs for all the buckets mentioned in 'Buckets' tab of CD3 Excel sheet. Log group for each bucket is created under the same compartment as specified for bucket and read and write log type is added as logs to this log group.</p> <p>Below TF file is created:</p> File name Description &lt;customer_name&gt;_buckets-logging.auto.tfvars TF variables file containing log group for each bucket and its write logs."},{"location":"tabs/#fss-logs","title":"FSS Logs","text":"<p>This will enable logs for all the File systems mentioned in 'FSS' tab of CD3 Excel sheet. Log group for each File system is created under the same compartment as specified for FSS and its logs are added to the log group.</p> <p>Below TF file is created:</p> File name Description &lt;customer_name&gt;_nfs-logging.auto.tfvars TF variables file containing log group for each File system and its logs."},{"location":"tabs/#firewall-logs","title":"Firewall Logs","text":"<p>This will enable logs for the Firewalls specified in \"Firewall\" sheet of the Firewall template.. Log group for each Firewall is created under the same compartment as specified for Firewall and its logs are added to the log group.</p> <p>Below TF file is created:</p> File name Description &lt;customer_name&gt;_fw-logging.auto.tfvars TF variables file containing log group for each Firewall and its logs."},{"location":"tabs/#sddcs-tab","title":"SDDCs Tab","text":"<p>Use this tab to create OCVS in your tenancy. </p> <p>Note: As of now the toolkit supports single cluster SDDC. The column \"SSH Key Var Name\" accepts SSH key value directly or the name of variable declared in variables.tf under the  sddc_ssh_keys variable containing the key value. Make sure to have an entry in variables_&lt;region&gt;.tf file with the name you enter in SSH Key Var Name field of the Excel sheet and put the value as SSH key value.</p> <p>For Eg: If you enter the SSH Key Var Name as ssh_public_key, make an entry in variables_&lt;region&gt;.tf file as shown below:</p> <pre><code>variable \"sddc_ssh_keys\" {\ntype = map(any)\ndefault = {\n    ssh_public_key = \"&lt;SSH PUB KEY STRING HERE&gt;\"\n    # Use '\\n' as the delimiter to add multiple ssh keys.\n    # Example: ssh_public_key = \"ssh-rsa AAXXX......yhdlo\\nssh-rsa AAxxskj...edfwf\"\n    #START_sddc_ssh_keys#\n    #sddc_ssh_keys_END#\n  }\n}\n</code></pre> <p>Management and Workload Datastore volumes must be existing or created separately as part of BlockVolumes Tab. All the Network related information for SDDCs will be provided in SDDCs-Network , where the vlan should be created in SubnetsVLANs</p> <p>On choosing \"Software-Defined Data Centers - OCVS\" in setUpOCI menu, the toolkit will read SDDCs tab and SDDCs-Network tab. The output terraform files will be generated at :   <code>&lt;outdir&gt;/&lt;region&gt;/&lt;service_dir&gt;/&lt;prefix&gt;_sddcs.auto.tfvars</code> under appropriate &lt;region&gt; directory.</p> <p>Once terraform apply is done, you can view the resources under Hybrid -&gt; Software-Defined Data Centers in OCI console.</p> <p>On re-running the option to create OCVS you will find the previously existing files being backed up under directory:</p> <p><code>&lt;outdir&gt;/&lt;region&gt;/&lt;service_dir&gt;/backup_sddcs/&lt;Date&gt;-&lt;Month&gt;-&lt;Time&gt;</code>.</p>"},{"location":"tabs/#buckets-tab","title":"Buckets Tab","text":"<p>This tab in cd3 excel sheet is used when you need to create Object storage buckets in the OCI tenancy.</p> <p>On choosing \"Storage\" in the SetUpOCI menu and \"Add/Modify/Delete Buckets\" submenu will allow to create buckets in OCI Tenancy.</p> <p>On completion of execution, you will be able to find the output terraform file generated at :</p> <p><code>&lt;outdir&gt;/&lt;region&gt;/&lt;service_dir&gt;/&lt;prefix&gt;_buckets.auto.tfvars</code> </p> <p>Once terraform apply is done, you can view the resources under Object Storage -&gt; Buckets in OCI console.</p> <p>On re-running the option to create Buckets you will find the previously existing files being backed up under directory:</p> <p><code>&lt;outdir&gt;/&lt;region&gt;/&lt;service_dir&gt;/backup_buckets/&lt;Date&gt;-&lt;Month&gt;-&lt;Time&gt;</code>.</p> <p>NOTE:  Currently the creation of buckets with indefinite retention rule is not supported, only export is supported.</p> <p>CD3 Tab specifications:</p> <ol> <li>The Region, Compartment Name and Bucket Name fields are mandatory.</li> <li>Storage Tier: Once created, this cannot be modified unless you delete and re-create the bucket.</li> <li>Object Versioning: Once enabled, this can only be suspended and cannot be disabled while modifying.</li> <li> <p>Retention Rule: To enable retention rule:</p> <p>4.1.   \u00a0 The versioning should be disabled.</p> <p>4.2.   \u00a0 Specify the value in the format <code>RuleName::TimeAmount::TimeUnit::Retention Rule Lock Enabled</code>.Multiple rules are seperated by newline in the same cell (\\n is not supported).  </p> <p>4.3.   \u00a0 Retention Rule Lock Enabled: The time format of the lock should be as per RFC standards. Ex: <code>YYYY-MM-DDThh:mm:ssZ</code> (provide the value only if you want to  have the time rule locked enabled).</p> <p>4.4.   \u00a0 TimeAmount: It should be number of Days/Years. Maximun value is 500.</p> <p>4.5.   \u00a0 TimeUnit: It should be either in DAYS and YEARS.</p> </li> <li> <p>Replication Policy:  To enable replication policy: </p> <p>5.1.   \u00a0 There should be a policy in place to allow region object storage service to manage objects for the bucket.</p> <p>5.2    \u00a0 The destination bucket should be already created in the tenancy and cannot have versioning enabled.</p> <p>5.2.   \u00a0 The destination bucket cannot have retention rules. </p> <p>5.3.   \u00a0 The format should be PolicyName::DestinationRegion::DestinationBucketName.</p> </li> <li> <p>Lifecycle Policy Name:  Name of the lifecycle policy. Multiple rules can be mentioned in new rows keeping all other details same.</p> </li> <li> <p>Lifecycle Target and Action:  For Multipart-uploads,  Object filters are not required and Rule Period can only be in Days.</p> <p>NOTE:  If you have Auto-tiering mode set to Enabled, you cannot create a object lifecycle policy rule with the action set as Infrequent Access. </p> </li> <li> <p>Lifecycle Rule Period: Its a combination of TimeAmount (It should be number of Days/Years) and TimeUnit (It should be either in DAYS and YEARS). The format should be                      TimeAmount::TimeUnit</p> </li> <li> <p>Lifecyle Exclusion Patterns/Lifecycle Inclusion Patterns/Lifecycle Inclusion Prefixes: Add the object name filter patterns here.</p> </li> </ol>"},{"location":"tabs/#budgets-tab","title":"Budgets Tab","text":"<p>The Budgets tab in CD3 Excel sheet can be used to create OCI Budgets and Budget Alert rules.</p> <p>Upon executing setUpOCI.py, choose \"Cost Management\" from the main menu and \"Budgets\" from its sub-options to create Budgets/Budget Alert Rules in OCI Tenancy.</p> <p>On completion of execution, you will be able to find the output terraform file generated at :</p> <p><code>&lt;outdir&gt;/&lt;region&gt;/&lt;service_dir&gt;/&lt;prefix&gt;_budgets.auto.tfvars</code> </p> <p>Once terraform apply is done, you can view the resources under Billing &amp; Cost Management -&gt; Cost Management -&gt; Budgets in OCI console.</p> <p>On re-running the option to create Budgets, you will find the previously existing files being backed up under directory:</p> <p><code>&lt;outdir&gt;/&lt;region&gt;/&lt;service_dir&gt;/backup_budgets/&lt;Date&gt;-&lt;Month&gt;-&lt;Time&gt;</code>.</p>"},{"location":"tabs/#quotas-tab","title":"Quotas Tab","text":"<p>The Quotas tab in CD3 Excel sheet can be used to create OCI Quota policies.</p> <p>Upon executing setUpOCI.py, choose \"Governance\" from the main menu and \"Quotas\" from its sub-options to create Quota policies in OCI Tenancy.</p> <p>On completion of execution, you will be able to find the output terraform file generated at :</p> <p><code>&lt;outdir&gt;/&lt;region&gt;/&lt;service_dir&gt;/&lt;prefix&gt;_quotas.auto.tfvars</code> </p> <p>Once terraform apply is done, you can view the resources under Governance &amp; Administration -&gt; Tenancy Managememt -&gt; Quota Policies in OCI console.</p> <p>On re-running the option to create Quotas, you will find the previously existing files being backed up under directory:</p> <p><code>&lt;outdir&gt;/&lt;region&gt;/&lt;service_dir&gt;/backup_quotas/&lt;Date&gt;-&lt;Month&gt;-&lt;Time&gt;</code>.</p>"},{"location":"tabs/#kms-tab","title":"KMS Tab","text":"<p>The KMS tab in CD3 Excel sheet can be used to create OCI Vaults and Keys in the OCI tenancy.</p> <p>Upon executing setUpOCI.py, choose \"Security\" from the main menu and \"Add/Modify/Delete KMS (Keys/Vaults)\" from its sub-options to create Keys/Vaults in OCI Tenancy.</p> <p>On completion of execution, you will be able to find the output terraform file generated at :</p> <p><code>&lt;outdir&gt;/&lt;region&gt;/&lt;service_dir&gt;/&lt;prefix&gt;_kms.auto.tfvars</code> </p> <p>Once terraform apply is done, you can view the resources under Identity &amp; Security -&gt; Key Management &amp; Secret Management in OCI console.</p> <p>On re-running the option to create KMS, you will find the previously existing files being backed up under directory:</p> <p><code>&lt;outdir&gt;/&lt;region&gt;/&lt;service_dir&gt;/backup_kms/&lt;Date&gt;-&lt;Month&gt;-&lt;Time&gt;</code>.</p> <p>Toolkit currently supports: </p> <ul> <li> <p>Creation of DEFAULT or VIRTUAL PRIVATE vaults.</p> </li> <li> <p>Replication of Default(Virtual) and Virtual Private Vaults across regions. </p> </li> </ul> <p>Important</p> <p>Check point no: 10 in Known Behaviour for OCI Vault Replication resource terraform import behaviour. </p> <ul> <li> <p>Creation of Master Encryption Keys (MEKs) for all the OCI supported Key shapes: AES, RSA and ECDSA.</p> </li> <li> <p>Enabling Auto Rotation for the MEKs in Virtual Private Vaults.</p> </li> </ul> <p>Toolkit currently doesn't support:</p> <ul> <li> <p>Dedicated Key Management</p> </li> <li> <p>External Key Management</p> </li> <li> <p>Private endpoints</p> </li> <li> <p>Secrets </p> </li> </ul>"},{"location":"tabs/#cloud-guard","title":"Cloud Guard","text":"<p>There is currently no tab for cloud guard in the CD3 excel sheet.</p> <p>Upon executing setUpOCI.py, choose \"Security\" from the main menu and \"Enable Cloud Guard\" from its sub-options will enable Cloud Guard for the tenancy from specified reporting region, clones the Oracle Managed detector and responder recipes. Creates a target for root compartment with the cloned recipes.</p> <p>Below TF file is created:</p> File name Description cis-cloudguard.auto.tf vars TF variables file for enabling cloud guard and creating target for root compartment. <p>Click here to view sample auto.tfvars for Security components  </p>"},{"location":"tutorials/","title":"CD3 Blogs and Tutorials","text":"<ul> <li>CD3 Blog</li> <li>Configure CD3 with CLI to Create and Export Oracle Cloud Infrastructure Resources</li> <li>Configure CD3 with Jenkins to Create and Export Oracle Cloud Infrastructure Resources</li> </ul>"},{"location":"upgrade-toolkit/","title":"Steps to Upgrade Your Toolkit (For Existing Customers using older versions):","text":""},{"location":"upgrade-toolkit/#upgrade-to-release-v202510","title":"Upgrade to Release v2025.1.0","text":"<ol> <li>Follow the steps in Launch Docker Container to build new image with latest code and launch the container by specifying new path for  to create a fresh outdir. <li>Use export_resources(Non Greenfield) workflow to export the required OCI services into new excel sheet and the tfvars. Run terraform import commands also.</li> <li>Once terraform is in synch, Switch to create_resources (Greenfield) workflow and use for any future modifications to the infra.</li>"},{"location":"upgrade-toolkit/#upgrade-to-release-v202440","title":"Upgrade to Release v2024.4.0","text":"<ol> <li>Follow the steps in Launch Docker Container to build new image with latest code and launch the container by specifying new path for  to create a fresh outdir. <li>Use export_resources(Non Greenfield) workflow to export the required OCI services into new excel sheet and the tfvars. Run terraform import commands also. Make sure to use latest CD3 Blank Template for this release.</li> <li>Once terraform is in synch, Switch to create_resources (Greenfield) workflow and use for any future modifications to the infra.</li>"},{"location":"upgrade-toolkit/#upgrade-to-release-v202430","title":"Upgrade to Release v2024.3.0","text":"<ol> <li>Follow the steps in Launch Docker Container to build new image with latest code and launch the container by specifying new path for  to create a fresh outdir. <li>Use export_resources(Non Greenfield) workflow to export the required OCI services into new excel sheet and the tfvars. Run terraform import commands also. Make sure to use latest CD3 Blank Template for this release.</li> <li>Once terraform is in synch, Switch to create_resources (Greenfield) workflow and use for any future modifications to the infra.</li>"},{"location":"upgrade-toolkit/#upgrade-to-release-v202422-from-v20242x","title":"Upgrade to Release v2024.2.2 from v2024.2.x","text":"<ol> <li> <p>Follow the steps in Launch Docker Container to build new image with latest code and launch the container by specifying same path for  to keep using same outdir. <li> <p>Copy the contents of modules directory and .tf files from /cd3user/oci_tools/cd3_automation_toolkit/user-scripts/terraform_files/ to /cd3user/tenancies//terraform_files/&lt;region_dir&gt;. <li>Modify the connection parameters in the variables_&lt;region&gt;.tf file inside &lt;region_dir&gt;/&lt;service_dir&gt;.</li>"},{"location":"upgrade-toolkit/#upgrade-to-release-v202420","title":"Upgrade to Release v2024.2.0","text":"<ol> <li>Follow the steps in Launch Docker Container to build new image with latest code and launch the container by specifying new path for  to create a fresh outdir. <li>Use export_resources(Non Greenfield) workflow to export the required OCI services into new excel sheet and the tfvars. Run terraform import commands also.</li> <li>Once terraform is in synch, Switch to create_resources (Greenfield) workflow and use for any future modifications to the infra.</li>"},{"location":"upgrade-toolkit/#upgrade-to-release-v202410","title":"Upgrade to Release v2024.1.0","text":"<p>This is a major release with introduction of CI/CD using Jenkins.</p> <ol> <li>Follow the steps in Launch Docker Container to build new image with latest code and launch the container by specifying new path for  to create a fresh outdir. <li>Use export_resources (Non Greenfield) workflow to export the required OCI services into new excel sheet and the tfvars. Run terraform import commands also.</li> <li>Once terraform is in synch, Switch to create_resources (Greenfield) workflow and use for any future modifications to the infra.</li>"},{"location":"upgrade-toolkit/#upgrade-to-release-v121-from-v12","title":"Upgrade to Release v12.1 from v12","text":"<ol> <li>Follow the steps in Launch Docker Container to build new image with latest code and launch the container by specifying same path for  to keep using same outdir. <li>Copy sddc.tf from /cd3user/oci_tools/cd3_automation_toolkit/user-scripts/terraform_files/ to /cd3user/tenancies//terraform_files//. <li>Copy the contents of modules directory from /cd3user/oci_tools/cd3_automation_toolkit/user-scripts/terraform_files/modules/ to /cd3user/tenancies//terraform_files/. <li>Copy the sddcs variable block from /cd3user/oci_tools/cd3_automation_toolkit/user-scripts/terraform_files/variables_example.tf and replace it in the variables_\\.tf file"},{"location":"upgrade-toolkit/#upgrade-to-release-v12","title":"Upgrade to Release v12","text":""},{"location":"upgrade-toolkit/#upgrade-to-release-v111-from-v11","title":"Upgrade to Release v11.1 from v11","text":"<ol> <li>Follow the steps in Launch Docker Container to build new image with latest code and launch the container by specifying same path for  to keep using same 1. Follow the steps in Launch Docker Container to build new image with latest code and launch the container by specifying new path for  to create a fresh outdir. <li>Use export_resources (Non Greenfield) workflow to export the required OCI services into new excel sheet and the tfvars. Run terraform import commands also.</li> <li>Once terraform is in synch, Switch to create_resources (Greenfield) workflow and use for any future modifications to the infra.outdir.</li>"},{"location":"upgrade-toolkit/#upgrade-to-release-v11","title":"Upgrade to Release v11","text":"<ol> <li>Follow the steps in Launch Docker Container to build new image with latest code and launch the container by specifying new path for  to create a fresh outdir. <li>Use export_resources (Non Greenfield) workflow to export the required OCI services into new excel sheet and the tfvars. Run terraform import commands also.</li> <li>Once terraform is in synch, Switch to create_resources (Greenfield) workflow and use for any future modifications to the infra.</li>"},{"location":"upgrade-toolkit/#upgrade-to-release-v102-from-v101","title":"Upgrade to Release v10.2 from v10.1","text":"<ol> <li>Follow the steps in Launch Docker Container to build new image with latest code and launch the container by specifying same path for  to keep using same outdir. <li>There are minor upgrades to terraform modules. In order to use the latest modules, copy the contents(modules directory and all .tf files from /cd3user/oci_tools/cd3_automation_toolkit/user-scripts/terraform to /cd3user/tenancies//terraform_files/. Move existing variables_\\&lt;region&gt;.tf to some backup and Copy OCI Connect Variables block from  this file into variables_example.tf file and rename it to  variables_\\&lt;region&gt;.tf"},{"location":"upgrade-toolkit/#upgrade-to-release-v101-from-v10","title":"Upgrade to Release v10.1 from v10","text":"<ol> <li>Follow the steps in Launch Docker Container to build new image with latest code and launch the container by specifying same path for  to keep using same outdir. <li>There are minor upgrades to terraform modules. In order to use the latest modules, copy the contents(modules directory and all .tf files except variables_example.tf) from /cd3user/oci_tools/cd3_automation_toolkit/user-scripts/terraform to /cd3user/tenancies//terraform_files/. <li>Execute terraform init -upgrade from outdir</li> <li>If you had utilized 'Upload current terraform files/state to Resource Manager' option under 'Developer Services' to upload terraform stack to Resource Manager for v10, then you must copy existing 'rm_ocids.csv' file from /cd3user/tenancies//terraform_files/ to /cd3user/tenancies//terraform_files/ before using this option again with v10.1. <li>Changes to the CD3 excel sheet templates include correction of the dropdowns for all tabs, few changes in Policies tab wrt policy statements. So users can keep using the v10 templates.</li> <li>The new release supports a separate directory for each service. In order to use this feature for existing customers, execute createTenancy.py using a new outdir with  'outdir_structure_file' parameter set and then run export of the tenanncy into this new outdir using export_resources (Non Greenfield) workflow.</li>"},{"location":"upgrade-toolkit/#upgrade-to-release-v10-from-v921","title":"Upgrade to Release v10 from v9.2.1","text":"<ol> <li>Follow the steps in Launch Docker Container to build new image with latest code and launch the container by specifying same path for  to keep using same outdir. <li>Use new excel sheet templates to use OKE and SCH.</li> <li>For existing services, user can continue using existing outdir.</li>"},{"location":"url-whitelisting/","title":"URL Whitelisting(optional)","text":"<p>When deploying CD3 VM in a VCN with restricted outbound connectivity via firewall or proxy, the below URLs should be whitelisted for successful deployment of the cd3 tool with full functionality,</p> <p></p> <pre><code>    *.oracle.com                                                           \n    *.oraclecloud.com\n    app.terraform.io\n    registry.terraform.io\n    releases.hashicorp.com\n    archivist.terraform.io\n    registry.access.redhat.com\n    registry.redhat.io\n    *.docker.io\n    *.docker.com\n    github.com\n    objects.githubusercontent.com\n    *.openpolicyagent.org\n    openpolicyagent.org\n    *.jenkins-ci.org\n    *.jenkins.io\n    *.osuosl.org\n    sg.mirror.servanamanaged.com\n    mirror.freedif.org\n    mirrors.tuna.tsinghua.edu.cn\n    mirrors.hostico.ro\n    ftp.yz.yamagata-u.ac.jp\n    ftp.halifax.rwth-aachen.de\n    ftp.belnet.be\n    mirrors.in.sahilister.net\n    pypi.python.org\n    pypi.org\n    *.pypi.org\n    pythonhosted.org\n    files.pythonhosted.org\n</code></pre>"},{"location":"workflows-cli/","title":"Using the Automation Toolkit via CLI","text":""},{"location":"workflows-cli/#prepare-setupociproperties","title":"Prepare setUpOCI.properties","text":"<p>Current Version:  setUpOCI.properties v2024.1.0</p> <p>Make sure to use/modify the properties file at /cd3user/tenancies/&lt;customer_name&gt;/_setUpOCI.properties during executions. <pre><code>[Default]\n\n#Input variables required to run setUpOCI script\n\n#path to output directory where terraform file will be generated. eg /cd3user/tenancies/&lt;customer_name&gt;/terraform_files\noutdir=\n\n#prefix for output terraform files eg &lt;customer_name&gt; like demotenancy\nprefix=\n\n# auth mechanism for OCI APIs - api_key,instance_principal,session_token\nauth_mechanism=\n\n#input config file for Python API communication with OCI eg /cd3user/tenancies/&lt;customer_name&gt;/.config_files/&lt;customer_name&gt;_config;\nconfig_file=\n\n# Leave it blank if you want single outdir or specify outdir_structure_file.properties containing directory structure for OCI services.\noutdir_structure_file=\n\n#path to cd3 excel eg /cd3user/tenancies/&lt;customer_name&gt;\\CD3-Customer.xlsx\ncd3file=\n\n#specify create_resources to create new resources in OCI(greenfield workflow)\n#specify export_resources to export resources from OCI(non-greenfield workflow)\nworkflow_type=create_resources\n</code></pre> Variable Description Example outdir Path to output directory where terraform files will be generated /cd3user/tenancies//terraform_files prefix Prefix for output terraform files \\ auth_mechanism Authentication Mechanism for OCI APIs api_key config_file Python config file /cd3user/tenancies//.config_files/_config outdir_structure_file Parameter specifying single outdir or different for different services Blank or _outdir_structure_file.properties cd3file Path to the Excel input file /cd3user/tenancies//testCD3. xlsx workflow_type Create Resources in OCI or Export Resources from OCI create_resources or export_resources <p>Automation Toolkit Workflows:</p> <p>CD3 Automation Tool Kit supports 2 main workflows:</p> <ol> <li>Create Resources in OCI (Greenfield Workflow) - Empty OCI tenancy (or) do not need to modify / use any existing resources.</li> <li>Export Resources from OCI (Non-Greenfield Workflow) - Need to use / manage existing resources.  Export existing resources into CD3 &amp; TF State, then use the create_resources (Greenfield) workflow to modify them or create more resources on top of them.</li> </ol>"},{"location":"workflows-cli/#execution-steps-overview","title":"Execution Steps Overview:","text":"<p>Choose the appropriate CD3 Excel Sheet and update the setUpOCI.properties file at /cd3user/tenancies/&lt;customer_name&gt;/&lt;customer_name&gt;_setUpOCI.properties and run the commands below:</p> <p>Step 1: Change Directory to 'cd3_automation_toolkit' <code>cd /cd3user/oci_tools/cd3_automation_toolkit/</code></p> <p>Step 2: Place Excel sheet at appropriate location in the container and provide the corresponding path in /cd3user/tenancies/&lt;customer_name&gt;/&lt;customer_name&gt;_setUpOCI.properties file</p> <p>Step 3  Execute the setUpOCI Script:                                                                                                                                           <code>python setUpOCI.py /cd3user/tenancies/&lt;customer_name&gt;/&lt;customer_name&gt;_setUpOCI.properties</code></p> <p> \u2192 Example execution of the script:</p> <p><pre><code>[cd3user@25260a87b137 cd3_automation_toolkit]$ python setUpOCI.py /cd3user/tenancies/demotenancy/demotenancy_setUpOCI.properties\nUpdated OCI_Regions file !!!\nScript to fetch the compartment OCIDs into variables file has not been executed.\nDo you want to run it now? (y|n):\n</code></pre> \u2192 This prompt appears for the very first time when executing the toolkit or when any new compartments are created using the toolkit. Enter 'y' to fetch the details of compartment OCIDs into variables file. \u2192 After fetching the compartment details, the toolkit will display the menu options.</p>"},{"location":"workflows-jenkins/","title":"Using the Automation Toolkit via Jenkins","text":"<p>Jenkins integraton with the toolkit is provided to jump start your journey with CI/CD for IaC in OCI. A beginner level of understanding of Jenkins is required.</p>"},{"location":"workflows-jenkins/#pre-reqs-for-jenkins-configuration","title":"Pre-reqs for Jenkins Configuration","text":"<ul> <li> <p>The configurations are done when executing createTenancyConfig.py in Connect container to OCI Tenancy. Here are the validation steps:</p> </li> <li> <p>jenkins.properties file is created under /cd3user/tenancies/jenkins_home  as per input parameters in tenancyConfig.properties</p> </li> <li>An Object Storage bucket is created in OCI in the specified compartment to manage tfstate remotely. </li> <li>Customer Secret Key is configured for the user for S3 credentials of the bucket. </li> <li>A DevOps Project, Repo and Topic are created in OCI in the specified compartment to store terraform_files. GIT is configured on the container with config file at <code>/cd3user/.ssh/config</code> </li> </ul>"},{"location":"workflows-jenkins/#bootstrapping-of-jenkins-in-the-toolkit","title":"Bootstrapping of Jenkins in the toolkit","text":"<ul> <li> <p>Execute below cmd to start Jenkins -  <code>/usr/share/jenkins/jenkins.sh &amp;</code></p> </li> <li> <p>Access Jenkins URL using: <code>https://&lt;IP of the Jenkins Host&gt;:&lt;Port&gt;</code> </p> </li> </ul> <p>Note</p> <ul> <li><code>&lt;Port&gt;</code> is the port mapped with local system while docker container creation Eg: 8443.</li> <li>Network Connectivity should be allowed on this host and port.</li> <li>Make sure to use a private server or a bastion connected server with restricted access(i.e. not publicly available).</li> </ul> <ul> <li>It will prompt to create first user to access Jenkins URL. This will be the admin user.</li> <li>The Automation Toolkit only supports a single user Jenkins setup in this release.</li> <li>After logging in, Jenkins Dashbord will be displayed.</li> </ul>"},{"location":"terraform/compute/","title":"auto.tfvars syntax for Compute Module","text":"<p>These are the syntax and sample format for providing inputs to the modules via *.auto.tfvars files. \"key\" must be unique to every resource that is created. Comments preceed with ##.</p> <p>1. Virtual Machines (VMs)</p> <ul> <li>Syntax</li> </ul> <pre><code>  instances = {\n      ## key - Is a unique value to reference the resources respectively\n      key = {\n          # Required\n          availability_domain       = string\n          compartment_id            = string\n          shape                     = string\n          source_id                 = string\n          source_type               = string\n          vcn_name                  = string\n          subnet_id                 = string\n          network_compartment_id    = string\n\n          # Optional\n          display_name              = string\n          assign_public_ip          = bool\n          boot_volume_size_in_gbs   = string\n          fault_domain              = string\n          dedicated_vm_host_id      = string\n          private_ip                = string\n          hostname_label            = string\n          nsg_ids                   = list\n          ocpus                     = string\n          memory_in_gbs             = number\n          capacity_reservation_id   = string\n          create_is_pv_encryption_in_transit_enabled = bool\n          update_is_pv_encryption_in_transit_enabled = bool\n          ssh_authorized_keys       = string\n          backup_policy             = string\n          policy_compartment_id     = string\n          network_type              = string\n          extended_metadata         = string\n          skip_source_dest_check    = bool\n          baseline_ocpu_utilization = string\n          preemptible_instance_config = string\n          all_plugins_disabled      = bool\n          is_management_disabled    = bool\n          is_monitoring_disabled    = bool\n          plugins_details           = map\n          is_live_migration_preferred = bool\n          recovery_action          = string\n          are_legacy_imds_endpoints_disabled = bool\n          boot_volume_type          = string\n          firmware                  = string\n          is_consistent_volume_naming_enabled = bool\n          remote_data_volume_type   = string\n          platform_config           = map\n          ipxe_script               = string\n          firmware                  = string\n          preserve_boot_volume      = bool\n          vlan_id                   = string\n          kms_key_id                = string\n          vnic_display_name         = string\n          vnic_defined_tags         = map\n          vnic_freeform_tags        = map\n          defined_tags              = map\n          freeform_tags             = map\n      },\n  }\n</code></pre> <ul> <li>Example <pre><code>    // Copyright (c) 2021, 2022, Oracle and/or its affiliates.\n    ############################\n    # Instances\n    # Instance - tfvars\n    # Allowed Values:\n    # vcn_name must be the name of the VCN as in OCI\n    # subnet_id can be the ocid of the subnet or the name as in OCI\n    # compartment_id and network_compartment_id can be the ocid or the name of the compartment hierarchy delimited by double hiphens \"--\"\n    # Example : compartment_id = \"ocid1.compartment.oc1..aaaaaaaahwwiefb56epvdlzfic6ah6jy3xf3c\" or compartment_id = \"Network-root-cpt--Network\" where \"Network-root-cpt\" is the parent of \"Network\" compartment\n    # Sample import command for Instance and volume backup policy:\n    # terraform import \"module.instances[\\\"&lt;&lt;instances terraform variable name&gt;&gt;\\\"].oci_core_instance.instance\" &lt;&lt;instance ocid&gt;&gt;\n    # terraform import \"module.instances[\\\"&lt;&lt;instances terraform variable name&gt;&gt;\\\"].oci_core_volume_backup_policy_assignment.volume_backup_policy_assignment[0]\" &lt;&lt;volume backup policy ocid&gt;&gt;\n    ############################\n    instances = {\n           server01 =  {\n                # Required\n                availability_domain  = 0\n                compartment_id       = \"AppDev\"\n                shape                = \"VM.Standard.A1.Flex\"\n                source_id        =  \"Linux\"\n                source_type      = \"image\"\n                vcn_name         = \"dev\"\n                subnet_id        = \"app\"\n                network_compartment_id = \"Dev\"\n\n                # Optional\n                display_name         = \"server01\"\n                boot_volume_size_in_gbs = 50\n                fault_domain         = \"FAULT-DOMAIN-2\"\n                assign_public_ip = false\n                private_ip       = \"172.10.10.10\"\n                nsg_ids          = [\"app-nsg\"]\n                ocpus            = \"4\"\n                memory_in_gbs = 16\n                ssh_authorized_keys  = \"instance-ssh-key\"\n                backup_policy          = \"gold\"\n                ## Section for adding VNIC Defined and Freeform Tags\n                vnic_defined_tags = {\n                        \"Operations.os\"= \"Linux\" ,\n                        \"Organization.department\"= \"Administrators\" ,\n                        \"Oracle-Tags.CreatedBy\"= \"oracleidentitycloudservice/abc@xyz.com\" ,\n                        \"Oracle-Tags.CreatedOn\"= \"2021-09-16T19:59:21.745Z\" ,\n                }\n                vnic_freeform_tags = {\n                        \"Operations.os\"= \"Linux\" ,\n                }\n                defined_tags = {\n                        \"Operations.os\"= \"Linux\" ,\n                        \"Organization.department\"= \"Administrators\" ,\n                        \"Oracle-Tags.CreatedBy\"= \"oracleidentitycloudservice/abc@xyz.com\" ,\n                        \"Oracle-Tags.CreatedOn\"= \"2021-09-16T19:59:21.745Z\" ,\n                }\n        },\n       server02 =  {\n                # Required\n                availability_domain  = 0\n                compartment_id       = \"Sbox--T11-Testing--AppDev--Non-Prod\"\n                shape                = \"VM.Standard.E4.Flex\"\n                source_id        =  \"Linux\"\n                source_type      = \"image\"\n                network_compartment_id = \"Dev\"\n                vcn_name         = \"dev\"\n                subnet_id        = \"app\"\n\n                # Optional\n                display_name         = \"server02\"\n                boot_volume_size_in_gbs = 50\n                fault_domain         = \"FAULT-DOMAIN-2\"\n                assign_public_ip = false\n                private_ip       = \"172.10.10.10\"\n                nsg_ids          = [\"app-nsg\"]\n                ocpus            = \"4\"\n                memory_in_gbs = 16\n                update_is_pv_encryption_in_transit_enabled = false\n                ssh_authorized_keys  = \"instance-ssh-key\"\n                backup_policy          = \"gold\"\n        },\n    ##Add New Instances for phoenix here##\n    }\n</code></pre></li> </ul>"},{"location":"terraform/costmanagement/","title":"auto.tfvars syntax for Cost management module","text":"<p>These are the syntax and sample format for providing inputs to the modules via *.auto.tfvars files.</p> <p>\"key\" must be unique to every resource that is created. Comments preceed with ##.</p>"},{"location":"terraform/costmanagement/#budgets","title":"Budgets","text":"<ul> <li>Syntax</li> </ul> <pre><code>    budgets = {\n    ## key - Is a unique value to reference the resources respectively\n        key =  {\n            amount                                = string\n            compartment_id                        = string\n            reset_period                          = string\n            budget_processing_period_start_offset = string\n            defined_tags                          = map(any)\n            description                           = string\n            display_name                          = string\n            freeform_tags                         = map(any)\n            processing_period_type                = string\n            budget_end_date                       = string\n            budget_start_date                     = string\n            target_type                           = string\n            targets                               = list(any)\n        },\n    }\n</code></pre> <ul> <li>Example</li> </ul> <pre><code>    budgets = {\n        Budget1 = {\n                amount = 100\n                compartment_id = \"root\"\n                reset_period = \"MONTHLY\"\n                description = \"demo budget1\"\n                display_name = \"Budget1\"\n                processing_period_type = \"SINGLE_USE\"\n                budget_start_date = \"2024-06-01\"\n                budget_end_date = \"2024-06-11\"\n                target_type = \"COMPARTMENT\"\n                targets = [\"root--Network\"]\n                defined_tags = {\n                        \"ssc_resource_tag.APP_CODE\"= \"test1\" ,\n                        \"ssc_resource_tag.LEGAL_HOLD\"= \"N\"\n                }\n        },\n        Budget2 = {\n                compartment_id = &lt;valid_compartment_ocid&gt;\n                amount = 100\n                reset_period = \"MONTHLY\"\n                description = \"demo budget 2\"\n                budget_processing_period_start_offset = \"5\"\n                display_name = \"Budget2\"\n                processing_period_type = \"MONTH\"\n                target_type = \"TAG\"\n                targets = [\"Global.AppID.Test\"]\n                defined_tags = {\n                        \"ssc_resource_tag.PLATFORM_ID\"= \"OCI\" ,\n                        \"ssc_resource_tag.REGION_ID\"= \"ASH\"\n                }\n        },\n    } \n</code></pre>"},{"location":"terraform/costmanagement/#budget-alert-rules","title":"Budget Alert Rules","text":"<ul> <li>Syntax</li> </ul> <pre><code>    budget_alert_rules =\n    ## key - Is a unique value to reference the resources respectively\n        key =  {\n            budget_id      = string\n            threshold      = string\n            threshold_type = string\n            type           = string\n            defined_tags   = map(any)\n            description    = string\n            display_name   = string\n            freeform_tags  = map(any)\n            message        = string\n            recipients     = string\n    }\n</code></pre> <ul> <li>Example</li> </ul> <pre><code>    budget_alert_rules = {\n        \"Budget2_ACTUAL_PERCENTAGE_100-0\" = {\n                budget_id = \"Budget2\"\n                type = \"ACTUAL\"\n                threshold = \"100.0\"\n                threshold_type = \"PERCENTAGE\"\n                message = \"test message\"\n                recipients = \"abc@oracle.com , def@oracle.com\"\n                },\n        \"Budget2_FORECAST_ABSOLUTE_20-0\" = {\n                budget_id = \"Budget2\"\n                type = \"FORECAST\"\n                threshold = \"20.0\"\n                threshold_type = \"ABSOLUTE\"\n                recipients = \"hello@oracle.com\"\n                },\n    }\n</code></pre>"},{"location":"terraform/dns/","title":"auto.tfvars syntax for DNS Module","text":"<p>These are the syntax and sample format for providing inputs to the modules via *.auto.tfvars files. \"key\" must be unique to every resource that is created. Comments preceed with ##.</p> <p>1. DNS View-Zones-Records</p> <ul> <li>Syntax</li> </ul> <pre><code>    views = {\n  ## key - Is a unique value to reference the resources respectively\n       key =  {\n            compartment_id       = string\n            display_name         = string\n       },\n    }\n   zones = {\n       key =  {\n            compartment_id       = string\n            display_name         = string\n            zone_type            = string\n            view_compartment_id  = string\n            view_id              = string\n       },\n   }\n   rrsets = {\n       key =  {\n            zone_id             = string\n            domain              = string\n            view_id             = string\n            view_compartment_id = string\n            compartment_id      = string\n            rtype               = string\n            ttl                 = number\n            rdata               = list(string)\n       },\n  }\n</code></pre> <ul> <li>Example <pre><code>  // Copyright (c) 2021, 2022, 2023 Oracle and/or its affiliates.\n  #############################\n  # DNS\n  # DNS Views - tfvars\n  # Allowed Values:\n  # view_id can be the ocid of the view or the name as in OCI\n  # compartment_id and view_compartment_id can be the ocid or the name of the compartment hierarchy delimited by double hiphens \"--\"\n  # Example : compartment_id = \"ocid1.compartment.oc1..aaaaaaaah6jy3xf3c\" or compartment_id = \"AppDev--Prod\" where \"AppDev\" is the parent of \"Prod\" compartment\n  # Sample import command for dns-zone :\n  # terraform import \"module.dns-views[\\\"&lt;&lt;dns-zone terraform variable name&gt;&gt;\\\"].oci_dns_view.view\" &lt;&lt;dns-view ocid&gt;&gt;\n  ############################\n  views = {\n         \"custom-view-1\" =  {\n              compartment_id       = \"Network\"\n              display_name         = \"custom-view-1\"\n      },\n     \"custom-view-2\" =  {\n              compartment_id       = \"Network\"\n              display_name         = \"custom-view-2\"\n      },\n    }\n\n  ############################\n  # DNS\n  # DNS Zones - tfvars\n  # Allowed Values:\n  # view_id can be the ocid of the view or the name as in OCI\n  # compartment_id and view_compartment_id can be the ocid or the name of the compartment hierarchy delimited by double hiphens \"--\"\n  # Example : compartment_id = \"ocid1.compartment.oc1..aaaaaaaah6jy3xf3c\" or compartment_id = \"AppDev--Prod\" where \"AppDev\" is the parent of \"Prod\" compartment\n  # Sample import command for dns-zone :\n  # terraform import \"module.dns-zones[\\\"&lt;&lt;dns-zone terraform variable name&gt;&gt;\\\"].oci_dns_zone.zone\" &lt;&lt;dns-zone ocid&gt;&gt;\n  ############################\n  zones = {\n     \"custom-view-1_zone1_com\" =  {\n              compartment_id       = \"Network\"\n              display_name         = \"zone1.com\"\n              zone_type            = \"\"\n              view_compartment_id = \"Network\"\n              view_id = \"custom-view-1\"\n      },\n     \"custom-view-2_zone2_com\" =  {\n              compartment_id       = \"Network\"\n              display_name         = \"zone2.com\"\n              zone_type            = \"\"\n              view_compartment_id = \"Network\"\n              view_id = \"custom-view-2\"\n      },\n    }\n\n  ############################\n  # DNS\n  # DNS Records - tfvars\n  # Allowed Values:\n  # view_id can be the ocid of the view or the name as in OCI\n  # compartment_id and view_compartment_id can be the ocid or the name of the compartment hierarchy delimited by double hiphens \"--\"\n  # Example : compartment_id = \"ocid1.compartment.oc1..aaaaaaaah6jy3xf3c\" or compartment_id = \"AppDev--Prod\" where \"AppDev\" is the parent of \"Prod\" compartment\n  # Sample import command for dns-zone :\n  # terraform import \"module.dns-rrsets[\\\"&lt;&lt;dns-zone terraform variable name&gt;&gt;\\\"].oci_dns_rrset.rrset\" &lt;&lt;dns-zone ocid&gt;&gt;\n  ############################\n  rrsets = {\n     \"custom-view-1_zone1_com_domain1_zone1_com_A\" =  {\n              zone_id = \"zone1.com\"\n              domain         = \"domain1.zone1.com\"\n              view_id = \"custom-view-1\"\n              view_compartment_id = \"Network\"\n              compartment_id = \"Network\"\n              rtype = \"A\"\n              ttl = 3600\n              rdata = [\"10.20.1.10\", \"10.20.1.20\"]\n      },\n     \"custom-view-1_zone1_com_domain2_zone1_com_CNAME\" =  {\n              zone_id = \"zone1.com\"\n              domain         = \"domain2.zone1.com\"\n              view_id = \"custom-view-1\"\n              view_compartment_id = \"Network\"\n              compartment_id = \"Network\"\n              rtype = \"CNAME\"\n              ttl = 300\n              rdata = [\"host1.example.com\"]\n      },\n     \"custom-view-2_zone2_com_domain1_zone2_com_A\" =  {\n              zone_id = \"zone2.com\"\n              domain         = \"domain1.zone2.com\"\n              view_id = \"custom-view-2\"\n              view_compartment_id = \"Network\"\n              compartment_id = \"Network\"\n              rtype = \"A\"\n              ttl = 300\n              rdata = [\"10.20.1.30\"]\n      },\n  ##Add New rrsets for phoenix here##\n  }\n</code></pre></li> </ul> <p>2. DNS-Resolvers</p> <ul> <li>Syntax</li> </ul> <pre><code>       resolvers = {\n           ## key - vcn name to reference the resources respectively\n           key = {\n               vcn_name = string\n               network_compartment_id = string\n               display_name = string\n               views = {\n                   key = {\n                       view_id = string\n                       view_compartment_id = string\n                   },\n               }\n               endpoint_names = {\n                   key = {\n                       is_forwarding = bool\n                       is_listening = bool\n                       name = string\n                       subnet_name = string\n                       forwarding_address = string\n                       listening_address = string\n                       nsg_ids = list(string)\n                   }\n               }\n               resolver_rules = {\n                   key = {\n                       client_address_conditions = list(string)\n                       destination_addresses = list(string)\n                       qname_cover_conditions = list(string)\n                       source_endpoint_name = string\n                   }\n               }\n           }\n       }\n</code></pre> <ul> <li>Example</li> </ul> <pre><code>     ############################\n     # DNS\n     # DNS Resolvers - tfvars\n     # Allowed Values:\n     # view_id can be the ocid of the view or the name as in OCI\n     # compartment_id and view_compartment_id can be the ocid or the name of the compartment hierarchy delimited by double hiphens \"--\"\n     # Example : compartment_id = \"ocid1.compartment.oc1..aaaaaaaah6jy3xf3c\" or compartment_id = \"AppDev--Prod\" where \"AppDev\" is the parent of \"Prod\" compartment\n     # Sample import command for dns-zone :\n     # terraform import \"module.dns-resolvers[\\\"&lt;&lt;dns-resolver terraform variable name&gt;&gt;\\\"].oci_dns_resolver.resolver\" &lt;&lt;dns-resolver ocid&gt;&gt;\n     # terraform import \"module.dns-resolvers[\\\"&lt;&lt;dns-resolver-endpoint terraform variable name&gt;&gt;\\\"].oci_dns_resolver_endpoint.resolver_endpoint\" &lt;&lt;resolverId/{resolverId}/name/{resolverEndpointName}&gt;&gt;\n     ############################\n     resolvers = {\n            \"fwl-vcn\" =  {\n                 vcn_name = \"fwl-vcn\"\n                 network_compartment_id = \"Network\"\n                 display_name = \"fwl-vcn\"\n                 views = {\n                     \"fwl-vcn_order1\" = {\n                         view_id = \"custom-view-1\"\n                         view_compartment_id = \"Network\"\n                     }\n                     \"fwl-vcn_order2\" = {\n                         view_id = \"fwl-vcn\"\n                         view_compartment_id = \"Network\"\n                     }\n                 }\n                 endpoint_names = {\n                     \"forwarder_endpoint1\" = {\n                         is_forwarding = true\n                         is_listening = false\n                         name = \"forwarder_endpoint1\"\n                         subnet_name = \"fwl-mgmt\"\n                         forwarding_address = \"10.110.1.35\"\n                         listening_address = \"\"\n                         nsg_ids = []\n                     }\n                     \"listener_endpoint1\" = {\n                         is_forwarding = false\n                         is_listening = true\n                         name = \"listener_endpoint1\"\n                         subnet_name = \"fwl-mgmt\"\n                         forwarding_address = \"\"\n                         listening_address = \"\"\n                         nsg_ids = []\n                     }\n                 }\n                 resolver_rules = {\n                     \"rule1\" = {\n                         client_address_conditions = []\n                         destination_addresses = [\"10.0.0.20\"]\n                         qname_cover_conditions = [\"internal.example.com\", \"internal3.example.com\"]\n                         source_endpoint_name = \"forwarder_endpoint1\"\n                     }\n                     \"rule2\" = {\n                         client_address_conditions = []\n                         destination_addresses = [\"10.0.0.20\"]\n                         qname_cover_conditions = [\"internal2.example.com\"]\n                         source_endpoint_name = \"forwarder_endpoint1\"\n                     }\n                     \"rule3\" = {\n                         client_address_conditions = []\n                         destination_addresses = [\"10.0.0.30\"]\n                         qname_cover_conditions = []\n                         source_endpoint_name = \"forwarder_endpoint1\"\n                     }\n                     \"rule4\" = {\n                         client_address_conditions = [\"10.0.2.0/24\", \"10.0.3.0/24\"]\n                         destination_addresses = [\"10.0.0.40\"]\n                         qname_cover_conditions = []\n                         source_endpoint_name = \"forwarder_endpoint1\"\n                     }\n                 }\n         },\n        \"prod-vcn\" =  {\n                 vcn_name = \"prod-vcn\"\n                 network_compartment_id = \"Network\"\n                 display_name = \"prod-vcn-res\"\n                 views = {\n                     \"prod-vcn_order1\" = {\n                         view_id = \"custom-view-2\"\n                         view_compartment_id = \"Network\"\n                     }\n                     \"prod-vcn_order2\" = {\n                         view_id = \"prod-vcn\"\n                         view_compartment_id = \"Network\"\n                     }\n                 }\n                 endpoint_names = {\n                     \"listener_endpoint1\" = {\n                         is_forwarding = false\n                         is_listening = true\n                         name = \"listener_endpoint1\"\n                         subnet_name = \"prod-web\"\n                         forwarding_address = \"\"\n                         listening_address = \"\"\n                         nsg_ids = []\n                     }\n                     \"forwarder_endpoint1\" = {\n                         is_forwarding = true\n                         is_listening = false\n                         name = \"forwarder_endpoint1\"\n                         subnet_name = \"prod-web\"\n                         forwarding_address = \"10.111.2.90\"\n                         listening_address = \"\"\n                         nsg_ids = []\n                     }\n                 }\n                 resolver_rules = {\n                 }\n         },\n     }\n</code></pre>"},{"location":"terraform/firewall/","title":"auto.tfvars syntax for Firewall Module","text":"<p>These are the syntax and sample format for providing inputs to the modules via *.auto.tfvars files. \"key\" must be unique to every resource that is created. Comments preceed with ##.</p> <p>1. Firewalls</p> <ul> <li> <p>Syntax <pre><code>firewalls = {\n  ## key - Is a unique value to reference the resources respectively\n  key = {\n    # Required\n    compartment_id =        string\n    display_name   =        string\n    network_firewall_policy_id =    string\n    network_compartment_id =string\n    vcn_name   =string\n    subnet_id  =string\n    ipv4address=string\n    availability_domain.   =string\n    nsg_id==list\n\n    # Optional\n    defined_tags   = map\n    freeform_tags  = map\n    },\n}\n</code></pre></p> </li> <li> <p>Example <pre><code>############################\n# Firewalls\n# Firewall - tfvars\n# Allowed Values:\n# compartment_id and network_compartment_id can be the ocid or the name of the compartment hierarchy delimited by double hiphens \"--\"\n# Example : \"ocid1.compartment.oc1..aaaaaaaahwwiefb56epvdlzfic6ah6jy3xf3c\" or compartment_id = \"Network-root-cpt--Network\" where \"Network-root-cpt\" is the parent of \"Network\" compartment\n# network_firewall_policy_id can be the ocid or the name of the firewall Policy that needs to be attached to the Firewall\n# vcn_name must be the name of the VCN as in OCI\n# subnet_id can be the ocid of the subnet or the name as in OCI\n# Sample import command for Firewall:\n# terraform import \"module.firewalls[\\\"&lt;&lt;firewall terraform variable name&gt;&gt;\\\"].oci_network_firewall_network_firewall.network_firewall\" &lt;&lt;firewall ocid&gt;&gt;\n############################\n\nfirewalls = {\n  OCI-FWL = {\n    compartment_id = \"Network\"\n    display_name = \"OCI-FWL\"\n    network_firewall_policy_id = \"OCI-FWL-Policy\"\n    network_compartment_id = \"Network\"\n    vcn_name = \"fwl-vcn\"\n    subnet_id = \"fwl-mgmt\"\n    ipv4address = \"10.110.1.23\"\n    availability_domain = \"0\"\n    defined_tags = {\n        \"Oracle-Tags.CreatedOn\"= \"2024-03-14T06:18:47.503Z\" ,\n        \"Oracle-Tags.CreatedBy\"= \"oracleidentitycloudservice/abc@xyz.com\"\n        }\n    },\n    ##Add New firewall for phoenix here##\n  }\n</code></pre></p> </li> </ul> <p>2. Firewall Policy Address Lists</p> <ul> <li> <p>Syntax <pre><code>address_lists = {\n  ## key - Is a unique value to reference the resources respectively\n  key = {\n    # Required\n    address_list_name= string\n    network_firewall_policy_id   = string\n    addresses   = list\n    address_type = string\n    },\n}\n</code></pre></p> </li> <li> <p>Example <pre><code>############################\n# Firewall Policy Address Lists\n# Firewall Policy Address List - tfvars\n# Allowed Values:\n# network_firewall_policy_id can be the ocid or the name of the firewall Policy that needs  \nto be attached to the Firewall\n# address_type can be  IP or FQDN\n# Sample import command for Firewall Policy Address List:\n# terraform import \"module.address_lists[\\\"&lt;&lt;address-list terraform variable \nname&gt;&gt;\\\"].oci_network_firewall_network_firewall_policy_address_list.network_firewall_policy_address_list\\\" networkFirewallPolicies/&lt;&lt;firewall-policy ocid&gt;&gt;/addressLists/&lt;&lt;address-list ocid&gt;&gt;\n############################\naddress_lists = {\n  OCI-FWL-Policy_pub-list = {\n    address_list_name = \"pub-list\"\n    network_firewall_policy_id = \"OCI-FWL-Policy\"\n    addresses = [\"0.0.0.0/0\"]\n    address_type = \"IP\"\n    },\n        ##Add New application list for phoenix here##\n  }\n</code></pre></p> </li> </ul> <p>3. Firewall Policy Application Lists</p> <ul> <li> <p>Syntax <pre><code>application_groups = {\n  ## key - Is a unique value to reference the resources respectively\n  key = {\n    # Required\n    app_group_name      = string\n    network_firewall_policy_id  = string\n    apps        = list\n    },\n}\n</code></pre></p> </li> <li> <p>Example <pre><code>############################\n# Firewall Policy Application Lists\n# Firewall Policy Application List - tfvars\n# Allowed Values:\n# network_firewall_policy_id can be the ocid or the name of the firewall Policy that needs to be attached to the Firewall\n# Sample import command for Firewall Policy Address List:\n# terraform import \"module.application_groups[\\\"&lt;&lt;application-list terraform variable name&gt;&gt;\\\"].oci_network_firewall_network_firewall_policy_application_group.network_firewall_policy_application_group\\\"\nnetworkFirewallPolicies/&lt;&lt;firewall-policy ocid&gt;&gt;/applicationGroups/&lt;&lt;application-list ocid&gt;&gt;\n############################\napplication_groups = {\n  OCI-FWL-Policy_App-List-1 = {\n    app_group_name = \"App-List-1\"\n    network_firewall_policy_id = \"OCI-FWL-Policy\"\n    apps = [\"icmp-resp\",\"icmpv6-req\"]\n    },\n\n  }\n</code></pre></p> </li> </ul> <p>4. Firewall Policy Applications</p> <ul> <li> <p>Syntax <pre><code>applications = {\n  ## key - Is a unique value to reference the resources respectively\n  key = {\n    #Required\n    app_list_name = string\n    network_firewall_policy_id = string\n    app_type   = string\n    icmp_type  = string\n    icmp_code = string\n    },\n}\n</code></pre></p> </li> <li> <p>Example <pre><code>// Copyright (c) 2021, 2022, Oracle and/or its affiliates.\n############################\n# Firewall Policy Applications\n# Firewall Policy Application - tfvars\n# Allowed Values:\n# network_firewall_policy_id can be the ocid or the name of the firewall Policy that needs to be attached to the Firewall\n# app_type can be ICMP or ICMP_V6\n# Sample import command for Firewall Policy Address List:\n# terraform import \"module.applications[\\\"&lt;&lt;application terraform variable name&gt;&gt;\\\"].oci_network_firewall_network_firewall_policy_application.network_firewall_policy_application\\\"  networkFirewallPolicies/&lt;&lt;firewall-policy ocid&gt;&gt;/applications/&lt;&lt;application ocid&gt;&gt;\n############################\napplications = {\n  OCI-FWL-Policy_icmp-resp = {\n    app_list_name = \"icmp-resp\"\n    network_firewall_policy_id = \"OCI-FWL-Policy\"\n    app_type = \"ICMP\"\n    icmp_type = \"129\"\n    },\n  }\n</code></pre> 5. Firewall Policy Decryption Profiles</p> </li> <li> <p>Syntax <pre><code>decryption_profiles = {\n  ## key - Is a unique value to reference the resources respectively\n  key = {\n    #Required\n    profile_name  = string\n    network_firewall_policy_id  = string\n    profile_type = string\n    are_certificate_extensions_restricted   = string\n    is_auto_include_alt_name = string\n    is_expired_certificate_blocked = string\n    is_out_of_capacity_blocked = string\n    is_revocation_status_timeout_blocked = string\n    is_unknown_revocation_status_blocked = string\n    is_unsupported_cipher_blocked = string\n    is_unsupported_version_blocked = string\n    is_untrusted_issuer_blocked = string\n    },\n}\n</code></pre></p> </li> <li> <p>Example <pre><code>// Copyright (c) 2021, 2022, Oracle and/or its affiliates.\n############################\n# Firewall Policy Decryption Profiles\n# Firewall Policy Decryption Profile - tfvars\n# Allowed Values:\n# network_firewall_policy_id can be the ocid or the name of the firewall Policy that needs to be attached to the Firewall\n# profile_type can be SSL_FORWARD_PROXY or SSL_INBOUND_INSPECTION\n# Sample import command for Firewall Policy Decryption Profile:\n# terraform import \"module.decryption_profiles[\\\"&lt;&lt;decryption-profile terraform variable name&gt;&gt;\\\"].oci_network_firewall_network_firewall_policy_decryption_profile.network_firewall_policy_decryption_profile\\\"  networkFirewallPolicies/&lt;&lt;firewall-policy ocid&gt;&gt;/decryptionProfiles/&lt;&lt;decryption-profile ocid&gt;&gt;\n############################\ndecryption_profiles = {\n  OCI-FWL-Policy_decrypt-profile\n    profile_name = \"decrypt-profile\"\n        network_firewall_policy_id = \"OCI-FWL-Policy\"\n        profile_type = \"SSL_FORWARD_PROXY\"\n        are_certificate_extensions_restricted = \"true\"\n        is_auto_include_alt_name = \"true\"\n        is_expired_certificate_blocked = \"true\"\n        is_out_of_capacity_blocked = \"true\"\n        is_revocation_status_timeout_blocked = \"false\"\n        is_unknown_revocation_status_blocked = \"true\"\n        is_unsupported_cipher_blocked = \"true\"\n        is_unsupported_version_blocked = \"true\"\n        is_untrusted_issuer_blocked = \"true\"\n    },\n  }\n</code></pre> 6. Firewall Policy Decryption Rules</p> </li> <li> <p>Syntax <pre><code>decryption_rules = {\n  ## key - Is a unique value to reference the resources respectively\n  key = {\n    #Required\n    rule_name  = string\n    network_firewall_policy_id  = string\n    action = string\n    condition = [{\n        source_address = list\n        destination_address = list\n    }]\n    secret  = string\n    decryption_profile = string\n    placement = string\n    },\n}\n</code></pre></p> </li> <li> <p>Example <pre><code>// Copyright (c) 2021, 2022, Oracle and/or its affiliates.\n############################\n# Firewall Policy Decryption Rules\n# Firewall Policy Decryption Rule - tfvars\n# Allowed Values:\n# network_firewall_policy_id can be the ocid or the name of the firewall Policy that needs to be attached to the Firewall\n# action can be NO_DECRYPT or DECRYPT\n# Sample import command for Firewall Policy Decryption Rules:\n# terraform import \"module.decryption_rules[\\\"&lt;&lt;decryption-rule terraform variable name&gt;&gt;\\\"].oci_network_firewall_network_firewall_policy_decryption_rule.network_firewall_policy_decryption_rule\\\"  networkFirewallPolicies/&lt;&lt;firewall-policy ocid&gt;&gt;/decryptionRules/&lt;&lt;decryption-rule ocid&gt;&gt;\n############################\ndecryption_rules = {\n  OCI-FWL-Policy_decrypt-rule\n    rule_name = \"decrypt-rule\"\n        network_firewall_policy_id = \"OCI-FWL-Policy\"\n        action = \"DECRYPT\"\n    condition = [{\n        }]\n        secret = \"secret\"\n        decryption_profile = \"decrypt-profile\"\n      },\n  }\n</code></pre></p> </li> </ul> <p>7. Firewall Policy Secrets</p> <ul> <li> <p>Syntax <pre><code>Secrets = {\n  ## key - Is a unique value to reference the resources respectively\n  key = {\n    #Required\n    secret_name  = string\n    network_firewall_policy_id  = string\n    secret_source = string\n    secret_type = string\n    vault_secret_id = string\n    vault_name = string\n    version_number = string\n    vault_compartment_id = string\n    },\n}\n</code></pre></p> </li> <li> <p>Example <pre><code>// Copyright (c) 2021, 2022, Oracle and/or its affiliates.\n############################\n# Firewall Policy Secrets\n# Firewall Policy Secret - tfvars\n# Allowed Values:\n# network_firewall_policy_id can be the ocid or the name of the firewall Policy that needs to be attached to the Firewall\n# secret_source can be OCI_VAULT\n# secret_type can be SSL_FORWARD_PROXY or SSL_INBOUND_INSPECTION\n# vault_compartment_id can be the ocid or the name of the compartment hierarchy delimited by double hiphens \"--\"\n# Example : \"ocid1.compartment.oc1..aaaaaaaahwwiefb56epvdlzfic6ah6jy3xf3c\" or compartment_id = \"Vault-root-cpt--Vault\" where \"Vault-root-cpt\" is the parent of \"Vault\" compartment\n# Sample import command for Firewall Policy Decryption Rules:\n# terraform import \"module.secrets[\\\"&lt;&lt;decryption-rule terraform variable name&gt;&gt;\\\"].oci_network_firewall_network_firewall_policy_mapped_secret.network_firewall_policy_mapped_secret\\\"  networkFirewallPolicies/&lt;&lt;firewall-policy ocid&gt;&gt;/mappedSecrets/&lt;&lt;mapped-secret ocid&gt;&gt;\n############################\nSecrets = {\n  OCI-FWL-Policy_secret {\n    secret_name = \"secret\"\n    network_firewall_policy_id = \"OCI-FWL-Policy\"\n    secret_source = \"OCI_VAULT\"\n    secret_type = \"SSL_FORWARD_PROXY\"\n    vault_secret_id = \"test\"\n    vault_name = \"test\"\n    version_number = \"1\"\n    vault_compartment_id = \"Security\"\n    },\n\n  }\n</code></pre></p> </li> </ul> <p>8. Firewall Policy Service Lists</p> <ul> <li> <p>Syntax <pre><code>service_lists = {\n  ## key - Is a unique value to reference the resources respectively\n  key = {\n    #Required\n    service_list_name  = string\n    network_firewall_policy_id  = string\n    services = list\n    },\n}\n</code></pre></p> </li> <li> <p>Example <pre><code>// Copyright (c) 2021, 2022, Oracle and/or its affiliates.\n############################\n# Firewall Policy Service Lists\n# Firewall Policy Service List - tfvars\n# Allowed Values:\n# network_firewall_policy_id can be the ocid or the name of the firewall Policy that needs to be attached to the Firewall\n# Sample import command for Firewall Policy Service List:\n# terraform import \"module.service_lists[\\\"&lt;&lt;service-list terraform variable name&gt;&gt;\\\"].oci_network_firewall_network_firewall_policy_service_list.network_firewall_policy_service_list\\\"  networkFirewallPolicies/&lt;&lt;firewall-policy ocid&gt;&gt;/serviceLists/&lt;&lt;service-list ocid&gt;&gt;\n############################\nservice_lists = {\n  OCI-FWL-Policy_svclist1 = {\n    service_list_name = \"svclist1\"\n    network_firewall_policy_id = \"OCI-FWL-Policy\"\n    services = [\"svc-1\"]\n\n  }\n</code></pre></p> </li> </ul> <p>9. Firewall Policy Services</p> <ul> <li> <p>Syntax <pre><code>services = {\n  ## key - Is a unique value to reference the resources respectively\n  key = {\n    #Required\n    service_name  = string\n    network_firewall_policy_id  = string\n    port_ranges = list\n    service_type = string\n    },\n}\n</code></pre></p> </li> <li> <p>Example <pre><code>// Copyright (c) 2021, 2022, Oracle and/or its affiliates.\n############################\n# Firewall Policy Services\n# Firewall Policy Service - tfvars\n# Allowed Values:\n# network_firewall_policy_id can be the ocid or the name of the firewall Policy that needs to be attached to the Firewall\n# service_type can be TCP_SERVICE and UDP_SERVICE\n# Sample import command for Firewall Policy Service:\n# terraform import \"module.services[\\\"&lt;&lt;service terraform variable name&gt;&gt;\\\"].oci_network_firewall_network_firewall_policy_service.network_firewall_policy_service\\\"  networkFirewallPolicies/&lt;&lt;firewall-policy ocid&gt;&gt;/services/&lt;&lt;service ocid&gt;&gt;\n############################\n\nservices = {\n  OCI-FWL-Policy_svc-1 = {\n    service_name = \"svc-1\"\n    network_firewall_policy_id = \"OCI-FWL-Policy\"\n    port_ranges = [{\n            minimum_port =\"12\"\n        maximum_port =\"23\"\n    }]\n    service_type = \"UDP_SERVICE\"\n    },\n  }\n</code></pre></p> </li> </ul> <p>10. Firewall Policy URL Lists</p> <ul> <li> <p>Syntax <pre><code>url_lists = {\n  ## key - Is a unique value to reference the resources respectively\n  key = {\n    #Required\n    urllist_name  = string\n    network_firewall_policy_id  = string\n    urls = list\n    },\n}\n</code></pre></p> </li> <li> <p>Example <pre><code>// Copyright (c) 2021, 2022, Oracle and/or its affiliates.\n############################\n# Firewall Policy URL Lists\n# Firewall Policy URL List - tfvars\n# Allowed Values:\n# network_firewall_policy_id can be the ocid or the name of the firewall Policy that needs to be attached to the Firewall\n# Sample import command for Firewall Policy URL List:\n# terraform import \"module.url_lists[\\\"&lt;&lt;url-list terraform variable name&gt;&gt;\\\"].oci_network_firewall_network_firewall_policy_url_list.network_firewall_policy_url_list\\\\\"  networkFirewallPolicies/&lt;&lt;firewall-policy ocid&gt;&gt;/urlLists/&lt;&lt;url-list ocid&gt;&gt;\n############################\n\nurl_lists = {\n  OCI-FWL-Policy_trusted-url-list = {\n    urllist_name = \"trusted-url-list\"\n    network_firewall_policy_id = \"OCI-FWL-Policy\"\n    urls = [{\n      pattern = \"*.oracle.com\"\n          type = \"SIMPLE\"\n    },\n    {\n          pattern = \"*.oraclecloud.com\"\n          type = \"SIMPLE\"\n    },\n  }\n</code></pre> 11. Firewall Policy Security Rules</p> </li> <li> <p>Syntax <pre><code>security_rules = {\n  ## key - Is a unique value to reference the resources respectively\n  key = {\n    #Required\n    rule_name  = string\n    action = string\n    network_firewall_policy_id  = string\n    condition = [{\n        source_address = list\n        destination_address = list\n        service = list\n        application = list\n        url = list\n    }]\n    inspection = string\n    placement = string\n    },\n}\n</code></pre></p> </li> <li> <p>Example <pre><code>// Copyright (c) 2021, 2022, Oracle and/or its affiliates.\n############################\n# Firewall Policy Security Rules\n# Firewall Policy Security Rule - tfvars\n# Allowed Values:\n# network_firewall_policy_id can be the ocid or the name of the firewall Policy that needs to be attached to the Firewall\n# action can be ALLOW, DROP, REJECT, INSPECT\n# inspection can be INTRUSION_DETECTION, INTRUSION_PREVENTION\n# Sample import command for Firewall Policy Security Rule:\n# terraform import \"module.security_rules[\\\"&lt;&lt;secrule terraform variable name&gt;&gt;\\\"].oci_network_firewall_network_firewall_policy_security_rule.network_firewall_policy_security_rule\\\"  networkFirewallPolicies/&lt;&lt;firewall-policy ocid&gt;&gt;/securityRules/&lt;&lt;secrule ocid&gt;&gt;\n############################\n\n\nsecurity_rules = {\n  OCI-FWL-Policy_rule-1 = {\n        rule_name = \"rule-1\"\n        action = \"REJECT\"\n        network_firewall_policy_id = \"OCI-FWL-Policy\"\n        condition = [{\n            source_address = [\"pub-list\"]\n        }]\n      },\n  OCI-FWL-Policy_rule-2 = {\n        rule_name = \"rule-2\"\n        action = \"INSPECT\"\n        network_firewall_policy_id = \"OCI-FWL-Policy\"\n        condition = [{\n            destination_address = [\"pub-list\"]\n            service = [\"svclist1\"]\n            application = [\"App-List-1\"]\n            url = [\"trusted-url-list\"]\n        }]\n        inspection = \"INTRUSION_PREVENTION\"\n        after_rule = \"rule-1\"\n      },\n##Add New Security rules for phoenix here##\n}\n</code></pre></p> </li> </ul> <p>12. Firewall Policies</p> <ul> <li> <p>Syntax <pre><code>fw-policies = {\n  ## key - Is a unique value to reference the resources respectively\n  key = {\n    #Required\n    display_name  = string\n    compartment_id  = string\n    #Optional\n    defined_tags = map\n    freeform_tags = map\n    },\n}\n</code></pre></p> </li> <li> <p>Example <pre><code>// Copyright (c) 2021, 2022, Oracle and/or its affiliates.\n############################\n# Firewall Policy\n# Firewall Policy - tfvars\n# Allowed Values:\n# compartment_id can be the ocid or the name of the Compartment where the firewall policy needs to be created\n# Sample import command for Firewall Policy:\n# terraform import \"module.policies[\\\"&lt;&lt;policy terraform variable name&gt;&gt;\\\"].ci_network_firewall_network_firewall_policy.network_firewall_policy\" &lt;&lt;policy ocid&gt;&gt;\n############################\n\nfw-policies = {\n  OCI-FWL-Policy = {\n        compartment_id = \"Network\"\n        display_name = \"OCI-FWL-Policy\"\n        defined_tags = {\n                \"Oracle-Tags.CreatedOn\"= \"2024-03-14T06:15:46.139Z\" ,\n                \"Oracle-Tags.CreatedBy\"= \"oracleidentitycloudservice/abc@xyz.com\"\n        }\n      },\n  }\n</code></pre></p> </li> </ul>"},{"location":"terraform/governance/","title":"auto.tfvars syntax for Governance Module","text":"<p>These are the syntax and sample format for providing inputs to the modules via *.auto.tfvars files. \"key\" must be unique to every resource that is created. Comments preceed with ##.</p>"},{"location":"terraform/governance/#1-tag-namespaces","title":"1. Tag Namespaces","text":"<ul> <li>Syntax</li> </ul> <pre><code>  tag_namespaces = {\n      ## key - Is a unique value to reference the resources respectively\n      key = {\n            # Required\n            compartment_id = string\n            description    = string\n            name           = string\n\n            # Optional\n            defined_tags   = map\n            freeform_tags  = map\n            is_retired     = boolean\n        },\n  }\n</code></pre> <ul> <li>Example <pre><code>    ############################\n    # Governance\n    # Create Tag Namespaces\n    # Allowed Values:\n    # compartment_id can be the ocid or the name of the compartment hierarchy delimited by double hiphens \"--\"\n    # Example : compartment_id = \"ocid1.compartment.oc1..aaaaaaaahwwiefb56epvdlzfic6ah6jy3xf3c\" or compartment_id = \"Network-root-cpt--Network\" where \"Network-root-cpt\" is the parent of \"Network\" compartment\n    ############################\n    tag_namespaces = {\n        ArchitectureCenter--cis-oci-landing-zone-quickstart-managed = {\n                # Required\n                compartment_id = \"root\"\n                description = \"CIS Landing Zone tag namespace for OCI Architecture Center.\"\n                name = \"ArchitectureCenter\\\\cis-oci-landing-zone-quickstart-managed\"\n                },\n        Oracle-Tags = {\n                # Required\n                compartment_id = \"root\"\n                description = \"The namespace for the automatic tags.\"\n                name = \"Oracle-Tags\"\n                },\n        OracleInternalReserved = {\n                # Required\n                compartment_id = \"root\"\n                description = \"Oracle Internal Reserved Tags for workload classification\"\n                name = \"OracleInternalReserved\"\n                },\n    }\n</code></pre></li> </ul>"},{"location":"terraform/governance/#2-tag-keys","title":"2. Tag Keys","text":"<ul> <li>Syntax</li> </ul> <pre><code>    tag_keys = {\n        ## key - Is a unique value to reference the resources respectively\n        key = {\n            # Required\n            tag_namespace_id   = string\n            description        = string\n            name               = string\n\n            # Optional\n            defined_tags       = map\n            freeform_tags      = map\n            is_cost_tracking   = boolean\n            is_retired         = boolean\n            validator          = {\n                  validator_type   = string\n                  validator_values = list\n            }\n        },\n    }\n</code></pre> <ul> <li>Example <pre><code>    ############################\n    # Governance\n    # Create Tag Keys\n    # Allowed Values:\n    # tag_namespace_id can be the ocid or the key of tag_namespaces (map)\n    ############################\n    tag_keys = {\n        ArchitectureCenter--cis-oci-landing-zone-quickstart-managed_release = {\n                tag_namespace_id = \"ArchitectureCenter--cis-oci-landing-zone-quickstart-managed\"\n                description = \"CIS Landing Zone tag for OCI Architecture Center.\"\n                name = \"release\"\n                is_cost_tracking = false\n                },\n        Oracle-Tags_CreatedBy = {\n                tag_namespace_id = \"Oracle-Tags\"\n                description = \"The name of the principal that created the resource.\"\n                name = \"CreatedBy\"\n                is_cost_tracking = true\n                },\n        Oracle-Tags_CreatedOn = {\n                tag_namespace_id = \"Oracle-Tags\"\n                description = \"The date and time that the resource was created.\"\n                name = \"CreatedOn\"\n                is_cost_tracking = false\n                },\n        Oracle-Tags_TestTag = {\n                tag_namespace_id = \"Oracle-Tags\"\n                description = \"test\"\n                name = \"TestTag\"\n                is_cost_tracking = false\n                validator = [{\n                validator_type = \"ENUM\"\n                validator_values = [\"hey hi\",\"my tag\",\"value 1\"]\n                }]\n                },\n    }\n</code></pre></li> </ul>"},{"location":"terraform/governance/#3-tag-defaults","title":"3. Tag Defaults","text":"<ul> <li>Syntax</li> </ul> <pre><code>    tag_defaults = {\n        ## key - Is a unique value to reference the resources respectively\n         key = {\n                # Required\n                compartment_id    = string\n                tag_definition_id = string\n                value             = string\n\n                # Optional\n                is_required       = bool\n         }\n    }\n</code></pre> <ul> <li>Example <pre><code>    ############################\n    # Governance\n    # Create Default Tags\n    # Allowed Values:\n    # tag_definition_id can be the ocid or the key of tag_definitions (map)\n    # compartment_id can be the ocid or the name of the compartment hierarchy delimited by double hiphens \"--\"\n    # Example : compartment_id = \"ocid1.compartment.oc1..aaaaaaaahwwiefb56epvdlzfic6ah6jy3xf3c\" or compartment_id = \"Network-root-cpt--Network\" where \"Network-root-cpt\" is the parent of \"Network\" compartment\n    ########################################################\n    tag_defaults = {\n        Oracle-Tags_CreatedBy_root-default = {\n                # Required\n                tag_definition_id = \"Oracle-Tags_CreatedBy\"\n                compartment_id = \"root\"\n                value = \"$${iam.principal.name}\"\n                 },\n        Oracle-Tags_CreatedOn_root-default = {\n                # Required\n                tag_definition_id = \"Oracle-Tags_CreatedOn\"\n                compartment_id = \"root\"\n                value = \"$${oci.datetime}\"\n                 },\n    }\n</code></pre></li> </ul>"},{"location":"terraform/governance/#4-quotas","title":"4. Quotas","text":"<ul> <li>Syntax</li> </ul> <pre><code>    quota-template\n    quota_policies = {\n        ## key - Is a unique value to reference the resources respectively\n        key =  {\n            quota_name               = string\n            quota_description        = string\n            quota_statements         = list(string)\n            defined_tags               = map(any)\n            freeform_tags              = map(any)\n        }\n    }\n</code></pre> <ul> <li>Example</li> </ul> <pre><code>    quota_policies = {\n        Compute_1-x_Quota =  {\n            quota_name               = \"Compute_1.x_Quota\"\n            quota_description        = \"Quota policies for 1.x compute shapes\"\n            quota_statements         = [\"zero compute-core quota standard1-core-count in tenancy\", \"set compute-core quota standard1-core-count to 100 in compartment root:AppDev where any{request.region = 'us-ashburn-1', request.region = 'us-phoenix-1'}\"]\n            defined_tags = {\n                    \"ssc_resource_tag.APP_CODE\"= \"test1\" ,\n                    \"ssc_resource_tag.LEGAL_HOLD\"= \"N\"\n            }\n        },\n    }\n</code></pre>"},{"location":"terraform/identity/","title":"auto.tfvars syntax for Identity Module","text":"<p>These are the syntax and sample format for providing inputs to the modules via *.auto.tfvars files. \"key\" must be unique to every resource that is created. Comments preceed with ##.</p> <p>1. Compartments</p> <ul> <li>Syntax</li> </ul> <pre><code>compartments = {\n        root = {\n            ## key - Is a unique value to reference the resources respectively\n            key = {\n\n                # Required\n                parent_compartment_id = string\n                name                  = string\n\n                # Optional\n                description           = string \n                enable_delete         = boolean \n                defined_tags          = map \n                freeform_tags         = map \n               },\n            },\n\n        compartment_level1 = {\n             ## key - Is a unique value to reference the resources respectively\n             key = {\n                # Required\n                parent_compartment_id = string\n                name                  = string\n\n                # Optional\n                description           = string \n                enable_delete         = boolean \n                defined_tags          = map \n                freeform_tags         = map \n                },\n            },\n\n        compartment_level2 = {\n            ## key - Is a unique value to reference the resources respectively\n            key = {\n                # Required\n                parent_compartment_id = string\n                name                  = string\n\n                # Optional\n                description           = string \n                enable_delete         = boolean \n                defined_tags          = map \n                freeform_tags         = map \n                },\n            },\n\n        compartment_level3 = {\n            ## key - Is a unique value to reference the resources respectively\n            key = {\n                # Required\n                parent_compartment_id = string\n                name                  = string\n\n                # Optional\n                description           = string \n                enable_delete         = boolean \n                defined_tags          = map \n                freeform_tags         = map \n                },\n            },\n\n        compartment_level4 = {\n            ## key - Is a unique value to reference the resources respectively\n            key = {\n                # Required\n                parent_compartment_id = string\n                name                  = string\n\n                # Optional\n                description           = string \n                enable_delete         = boolean \n                defined_tags          = map \n                freeform_tags         = map \n                },\n            },\n\n        compartment_level5 = {\n            ## key - Is a unique value to reference the resources respectively\n            key = {\n                # Required\n                parent_compartment_id = string\n                name                  = string\n\n                # Optional\n                description           = string \n                enable_delete         = boolean \n                defined_tags          = map \n                freeform_tags         = map \n                },\n            },\n    }\n</code></pre> <ul> <li>Example: <pre><code>  ############################\n  # Identity\n  # Compartments - tfvars\n  # Allowed Values:\n  # parent_compartment_id can be the ocid or the name of the compartment hierarchy delimited by double hiphens \"--\"\n  # Example : parent_compartment_id = \"ocid1.compartment.oc1..aaaaaaaahwwiefb56epvdlzfic6ah6jy3xf3c\" or parent_compartment_id = \"Network-root-cpt--Network\" where \"Network-root-cpt\" is the parent of \"Network\" compartment\n  ############################\n\n  compartments = {\n      root = {\n          Network = {\n              # Required\n              parent_compartment_id = root\n              name                  = \"Network\"\n\n              # Optional\n              description           = \"Compartment for all network related resources: VCNs, subnets, network gateways, security lists, NSGs, load balancers, VNICs.\"\n              defined_tags          = {\n                        \"Oracle-Tags.CreatedOn\"= \"2022-08-09T11:15:45.919Z\" ,\n                        \"Oracle-Tags.CreatedBy\"= \"oracleidentitycloudservice/abc@oracle.com\"\n              }\n              },\n          Database = {\n              # Required\n              parent_compartment_id = root\n              name                  = \"Database\"\n\n              # Optional\n              description           = \"Compartment for all database related resources.\"\n              defined_tags          = {\n                        \"Oracle-Tags.CreatedOn\"= \"2022-08-09T11:15:45.919Z\" ,\n                        \"Oracle-Tags.CreatedBy\"= \"oracleidentitycloudservice/abc@oracle.com\"\n              }\n              freeform_tags         = {}\n              },\n          AppDev = {\n              # Required\n              parent_compartment_id = root\n              name                  = \"AppDev\"\n\n              # Optional\n              description           = \"Compartment for all resources related to application development: functions, OKE, API Gateway, streaming, notifications.\"\n              defined_tags          = {\n                        \"Oracle-Tags.CreatedOn\"= \"2022-08-09T11:15:45.919Z\" ,\n                        \"Oracle-Tags.CreatedBy\"= \"oracleidentitycloudservice/abc@oracle.com\"\n              }\n              },\n          },\n\n      compartment_level1 = {\n          Non-Prod = {\n              # Required\n              parent_compartment_id = AppDev\n              name                  = \"Non-Prod\"\n\n              # Optional\n              description           = \"Compartment for all the non-prod application resources.\"\n              enable_delete         = true\n              defined_tags          = {\n                        \"Oracle-Tags.CreatedOn\"= \"2022-08-09T11:15:45.919Z\" ,\n                        \"Oracle-Tags.CreatedBy\"= \"oracleidentitycloudservice/abc@oracle.com\"\n              }\n              },\n          Prod = {\n              # Required\n              parent_compartment_id = AppDev\n              name                  = \"Prod\"\n\n              # Optional\n              description           = \"Compartment for all the prod application resources.\"\n              enable_delete         = true\n              defined_tags          = {\n                        \"Oracle-Tags.CreatedOn\"= \"2022-08-09T11:15:45.919Z\" ,\n                        \"Oracle-Tags.CreatedBy\"= \"oracleidentitycloudservice/abc@oracle.com\"\n              }\n              },\n          },\n\n      ## Similar values can be entered for the compartment levels below.\n\n      compartment_level2 = {},\n\n      compartment_level3 = {},\n\n      compartment_level4 = {},\n\n      compartment_level5 = {},\n  }\n</code></pre></li> </ul> <p>2. Groups/Dynamic Groups</p> <p>\u24d8 The parameter that differentiates dynamic groups from normal groups is  matching_rule . Normal Groups will be created when you omit this parameter or pass it as \"\" or null. All the groups are created in the root compartment.</p> <ul> <li>Syntax for IDCS</li> </ul> <pre><code>groups = {\n    ## key - Is a unique value to reference the resources respectively\n    key = {\n        # Required\n        group_name            = string\n        group_description     = string\n\n        # Optional\n        members               = list(string) \n        matching_rule         = string  #Required only for Dynamic Group\n        defined_tags          = map \n        freeform_tags         = map \n        },\n    }\n</code></pre> <ul> <li>Example for IDCS: <pre><code>  ############################\n  # Identity\n  # Groups/Dynamic Groups - tfvars\n  ############################\n\n  groups = {\n  # Normal Group\n  Administrators = {\n      # Required\n      group_name        = \"Administrators\"\n      group_description = \"Administrators\"\n  },\n  # Normal Group\n  IAMAdmins = {\n      # Required\n      group_name        = \"IAMAdmins\"\n      group_description = \"Group responsible for managing IAM resources in the tenancy.\"\n\n      # Optional\n      members      = [\"xyz@oracle.com\", \"bcd@oracle.com\"]\n      defined_tags = {\n              \"Oracle-Tags.CreatedOn\"= \"2022-03-23T07:00:34.666Z\" ,\n              \"Oracle-Tags.CreatedBy\"= \"oracleidentitycloudservice/abc@oracle.com\"\n      }\n  },\n  # Dynamic Group\n  CD3_Instances = {\n      group_name        = \"CD3_Instances\"\n      group_description = \"Instance Group for CD3 Instances\"\n\n      # Optional \n      matching_rule     = \"Any {Any {instance.compartment.id = 'ocid1.compartment.oc1..aaaaaaaasfwefuhwkjfew2rrcxx37d5ntq7r53wtaq'},Any {instance.compartment.id = 'ocid1.compartment.oc1..aaz2ylwikr5rg4slidxzec7aijanq'}}\" # Can be null or \"\" for regular groups\n  },\n  }\n</code></pre></li> <li>Syntax for IAM Domains</li> </ul> <pre><code>   identity_domain_groups = {\n       ## key - Is a unique value to reference the resources respectively\n       key = {\n           # Required\n           group_name            = string\n           group_description     = string\n           idcs_endpoint         = string\n           compartment_id        = string\n\n           # Optional\n           members               = list(string) \n           matching_rule         = string  #Required only for Dynamic Group\n           defined_tags          = list(map) \n           freeform_tags         = list(map) \n           },\n       }\n</code></pre> <ul> <li>Example for IAM Domains: <pre><code>  ############################\n  # Identity\n  # Groups/Dynamic Groups - tfvars\n  ############################\n\n  groups = {\n  # Normal Group\n  Administrators = {\n      # Required\n      group_name        = \"Administrators\"\n      group_description = \"Administrators\"\n      idcs_endpoint     = \"default\"\n      compartment_id    = \"root\"\n  },\n  # Normal Group\n  IAMAdmins = {\n      # Required\n      group_name        = \"IAMAdmins\"\n      group_description = \"Group responsible for managing IAM resources in the tenancy.\"\n      idcs_endpoint     = \"default\"\n      compartment_id    = \"root\"\n\n      # Optional\n      members      = [\"xyz@oracle.com\", \"bcd@oracle.com\"]\n      defined_tags =         defined_tags = [\n              {\n                key       = \"CreatedBy\"\n                namespace = \"Oracle-Tags\"\n                value     = \"default/abc@oracle.com\"\n              },\n              {\n                key       = \"CreatedOn\"\n                namespace = \"Oracle-Tags\"\n                value     = \"2024-08-05T01:22:03.225Z\"\n              }          ]\n  },\n  # Dynamic Group\n  CD3_Instances = {\n      group_name        = \"CD3_Instances\"\n      group_description = \"Instance Group for CD3 Instances\"\n\n      # Optional \n      matching_rule     = \"Any {Any {instance.compartment.id = 'ocid1.compartment.oc1..aaaaaaaasfwefuhwkjfew2rrcxx37d5ntq7r53wtaq'},Any {instance.compartment.id = 'ocid1.compartment.oc1..aaz2ylwikr5rg4slidxzec7aijanq'}}\" # Can be null or \"\" for regular groups\n  },\n  }\n</code></pre></li> </ul> <p>3. Policies</p> <ul> <li>Syntax</li> </ul> <pre><code>  policies = {\n     ## key - Is a unique value to reference the resources respectively\n     key = {\n        # Required\n        name               = string\n        compartment_id     = string\n        policy_description = string\n        policy_statements  = list(string)\n\n        # Optional\n        policy_version_date   = string\n        defined_tags          = map \n        freeform_tags         = map \n        },\n     }\n</code></pre> <ul> <li>Example: <pre><code>  ############################\n  # Identity\n  # Policies - tfvars\n  # Allowed Values:\n  # compartment_id can be the ocid or the name of the compartment hierarchy delimited by double hiphens \"--\"\n  # Example : compartment_id = \"ocid1.compartment.oc1..aaaaaaaahwwiefb56epvdlzfic6ah6jy3xf3c\" or compartment_id = \"Network-root-cpt--Network\" where \"Network-root-cpt\" is the parent of \"Network\" compartment\n  ############################\n\n  policies = {\n     CD3_Instances_Policy = {\n          # Required\n          name               = \"CD3_Instances_Policy\"\n          compartment_id     = \"root\"\n          policy_description = \"Policy for VMs in CD3 Compartment\"\n          policy_statements  = [ \"Allow dynamic-group CD3_Instances to manage object-family in tenancy\" ,\"Allow dynamic-group CD3_Instances to manage instance-family in tenancy\" ,\"Allow dynamic-group CD3_Instances to manage database-family in tenancy\" ,\"Allow dynamic-group CD3_Instances to manage secret-family in tenancy\" ,\"Allow dynamic-group CD3_Instances to read all-resources in tenancy\"  ]\n     },\n     IAMAdmins-Policy = {\n          # Required\n          name        = \"IAMAdmins-Policy\"\n          compartment_id = \"root\"\n          policy_description = \"Policy allowing IAMAdmins group to manage IAM resources in tenancy, except changing Administrators group assignments.\"\n          policy_statements = [ \"Allow group IAMAdmins to manage policies in tenancy\" ,\"Allow group IAMAdmins to manage compartments in tenancy\" ,\"Allow group IAMAdmins to manage tag-defaults in tenancy\" ,\"Allow group IAMAdmins to manage tag-namespaces in tenancy\" ,\"Allow group IAMAdmins to manage orm-stacks in tenancy\" ,\"Allow group IAMAdmins to manage orm-jobs in tenancy\" ,\"Allow group IAMAdmins to manage orm-config-source-providers in tenancy\" ,\"Allow group IAMAdmins to inspect users in tenancy\" ,\"Allow group IAMAdmins to inspect groups in tenancy\" ,\"Allow group IAMAdmins to manage groups in tenancy where all {target.group.name != 'Administrators', target.group.name != 'CredAdmins'}\" ,\"Allow group IAMAdmins to inspect identity-providers in tenancy\" ,\"Allow group IAMAdmins to manage identity-providers in tenancy where any {request.operation = 'AddIdpGroupMapping', request.operation = 'DeleteIdpGroupMapping'}\" ,\"Allow group IAMAdmins to manage dynamic-groups in tenancy\" ,\"Allow group IAMAdmins to manage authentication-policies in tenancy\" ,\"Allow group IAMAdmins to manage network-sources in tenancy\" ,\"Allow group IAMAdmins to manage quota in tenancy\" ,\"Allow group IAMAdmins to read audit-events in tenancy\" ,\"Allow group IAMAdmins to use cloud-shell in tenancy\"  ]\n\n          # Optional\n          defined_tags = {\n                  \"Oracle-Tags.CreatedOn\"= \"2022-03-23T07:19:18.918Z\" ,\n                  \"Oracle-Tags.CreatedBy\"= \"oracleidentitycloudservice/abc@oracle.com\"\n          }\n     },\n  }\n</code></pre></li> </ul> <p>4. Users</p> <ul> <li>Syntax for IDCS</li> </ul> <pre><code>  users = {\n     ## key - Is a unique value to reference the resources respectively\n      key = {\n      # Required\n      name                  = string\n      description           = string\n      email                 = string\n      enable_capabilities  = list(string)\n\n      # Optional\n      defined_tags          = map\n      },\n  }\n</code></pre> <ul> <li>Example for IDCS:</li> </ul> <pre><code>      ############################\n      # Identity\n      # Users - tfvars\n      ############################\n      users = {\n         testUser = {\n          # Required\n          name                 = \"testUser\"\n          description          = \"this is a test user\"\n          email                = \"testUser@oracle.com\"\n          enable_capabilities = [\"can_use_console_password\",\"can_use_customer_secret_keys\"]\n\n          # Optional\n              defined_tags = {\n                      \"Oracle-Tags.CreatedOn\"= \"2023-05-23T07:19:18.918Z\" ,\n                      \"Oracle-Tags.CreatedBy\"= \"oracleidentitycloudservice/abc@oracle.com\"\n                }      \n            }            \n        }\n</code></pre> <ul> <li>Syntax for IAM Domains</li> </ul> <pre><code>  identity_domain_users = {\n     ## key - Is a unique value to reference the resources respectively\n      key = {\n      # Required\n      family_name           = string\n      idcs_endpoint         = string\n      user_name             = string\n      compartment_id        = string\n      description           = string\n      email                 = string\n      groups                = list(string)\n      enable_capabilities   = list(string)\n\n      # Optional\n      defined_tags          = map(list)\n      },\n  }\n</code></pre> <ul> <li>Example for IAM Domain:</li> </ul> <pre><code>      ############################\n      # Identity\n      # Users - tfvars\n      ############################\n      identity_domain_users = {\n        DEFAULT_testuser-test-com = {\n              family_name = \"test\"\n              idcs_endpoint = \"DEFAULT\"\n              description = \"test\"\n              user_name     = \"testuser@test.com\"\n              compartment_id = \"root\"\n              email           = \"testuser@test.com\"\n              enabled_capabilities = [\"api_keys\", \"auth_tokens\", \"console_password\", \"customer_secret_keys\", \"db_credentials\", \"oauth2client_credentials\", \"smtp_credentials\"]\n              defined_tags = [\n                      {\n                        key       = \"CreatedBy\"\n                        namespace = \"Oracle-Tags\"\n                        value     = \"default/abc@oracle.com\"\n                      },\n                      {\n                        key       = \"CreatedOn\"\n                        namespace = \"Oracle-Tags\"\n                        value     = \"2024-07-16T15:24:28.572Z\"\n                      }          ]\n          },\n      }\n</code></pre> <p>5. Network Sources</p> <ul> <li>Syntax</li> </ul> <pre><code>      networkSources = {\n         ## key - Is a unique value to reference the resources respectively\n         key = {\n            # Required\n            name                  = string\n            description           = string\n            public_source_list    = list(string)\n            virtual_source_list   = list(map)\n\n          # Optional\n          defined_tags          = map\n          },\n        }\n</code></pre> <ul> <li>Example</li> </ul> <pre><code>        ############################\n        # Identity\n        # Network Sources - tfvars\n        ############################\n        networkSources = {\n           networkSourcesExample = {\n            # Required\n            name                 = \"myNetworkSource\"\n            description          = \"this is a network source\"\n            public_source_list   = [\"192.0.2.0/24\",\"192.0.3.0/26\"]\n            virtual_source_list  =\n              [\n                {\n                  vcn_name               = [\"VCN1\"],\n                  network_compartment_id = [\"NetworkCompartment\"],\n                  ip_ranges              = [ \"10.169.0.0/16\"]\n                },\n                {\n                  vcn_name                   = [\"VCN2\"],\n                  network_compartment_id = [\"NetworkCompartment\"],\n                  ip_ranges              = [\"172.16.2.0/24\", \"172.16.2.0/26\"]\n                }\n              ]\n\n          # Optional\n          defined_tags = {\n                  \"Oracle-Tags.CreatedOn\"= \"2023-05-23T07:19:18.918Z\" ,\n                  \"Oracle-Tags.CreatedBy\"= \"oracleidentitycloudservice/abc@oracle.com\"\n                    }\n          }\n       }\n</code></pre>"},{"location":"terraform/loadbalancer/","title":"auto.tfvars syntax for Load Balancer Module","text":"<p>These are the syntax and sample format for providing inputs to the modules via *.auto.tfvars files. \"key\" must be unique to every resource that is created. Comments preceed with ##.</p> <p>1. Load Balancers (LBR)</p> <ul> <li>Syntax</li> </ul> <pre><code>  load_balancers = {\n      ## key - Is a unique value to reference the resources respectively\n      key = {\n          # Required\n          compartment_id             = string\n          vcn_id                     = string\n          shape                      = string\n          subnet_ids                 = list\n          network_compartment_id     = string\n          display_name               = string\n\n          # Optional\n          shape_details              = list(map)\n          nsg_ids                    = list\n          is_private                 = bool\n          ip_mode                    = string\n          reserved_ips_id            = string\n          defined_tags               = map\n          freeform_tags              = map\n      },\n  }\n</code></pre> <ul> <li>Example <pre><code>    // Copyright (c) 2021, 2022, Oracle and/or its affiliates.\n    #############################\n    # Network\n    # Load Balancers - tfvars\n    # Allowed values:\n    # vcn_name and subnet_names must be the names of the VCN and Subnets as per OCI respectively\n    # compartment_id and network_compartment_id can be the ocid or the name of the compartment hierarchy delimited by double hiphens \"--\"\n    # Example : compartment_id = \"ocid1.compartment.oc1..aaaaaaaahwwiefb56epvdlzfic6ah6jy3xf3c\" or compartment_id = \"Network-root-cpt--Network\" where \"Network-root-cpt\" is the parent of \"Network\" compartment\n    # ip_mode can be one of IPV4 or IPV6\n    # shape can be one of 100Mbps|10Mbps|10Mbps-Micro|400Mbps|8000Mbps|flexible\n    # reserved_ips_id accepts OCID (to use the existing reserved IP) or 'Y' to create a new Reserved IP or 'N' for Ephemeral IP; Defaults to \"\".\n    # Sample import command for Load Balancers:\n    # terraform import \"module.load-balancers[\\\"&lt;&lt;load_balancers terraform variable name&gt;&gt;\\\"].oci_load_balancer_load_balancer.load_balancer\" &lt;&lt;loadbalancer ocid&gt;&gt;\n    #############################\n    load_balancers = {\n        lbr1 = {\n\n            # Required\n            display_name = \"lbr1\"\n            compartment_id = \"AppDev\"\n            shape = \"flexible\"\n            network_compartment_id = \"Network\"\n            vcn_id = \"fwl-vcn\"\n            subnet_ids =  [\"fwl-pub\"]\n\n            # Optional\n            is_private = false\n            reserved_ips_id = \"N\"\n            ip_mode = \"IPV4\"\n            shape_details = [{\n                #Required\n                maximum_bandwidth_in_mbps = 150\n                minimum_bandwidth_in_mbps = 100\n            }]\n            freeform_tags = {\n                    \"Name\"=\"lbr01\",\n                    \"App\"=\"Server01\"\n                        }\n            },\n        lbr2 = {\n\n            # Required\n            display_name = \"lbr2\"\n            compartment_id = \"AppDev\"\n            shape = \"100Mbps\"\n            network_compartment_id = \"Network\"\n            vcn_id = \"fwl-vcn\"\n            subnet_ids =  [\"fwl-pub\"]\n\n            # Optional\n            reserved_ips_id = \"N\"\n            ip_mode = \"IPV4\"\n            },\n    ##Add New Load Balancers for london here##\n    }\n</code></pre></li> </ul> <p>2. Hostname</p> <ul> <li> <p>Syntax <pre><code>   hostnames = {\n      ## key - Is a unique value to reference the resources respectively\n      key = {\n\n          # Required\n          load_balancer_id           = string # Key of load balancer created by terraform\n          hostname                   = string\n          name                       = string\n      },      \n   }\n</code></pre></p> </li> <li> <p>Example <pre><code>    // Copyright (c) 2021, 2022, Oracle and/or its affiliates.\n    #############################\n    # Network\n    # Hostname - tfvars\n    # Allowed Values:\n    # load_balancer_id can be the ocid or the key of load_balancers (map)\n    # Sample import command for Hostname:\n    # terraform import \"module.hostnames[\\\"&lt;&lt;hostnames terraform variable name&gt;&gt;\\\"].oci_load_balancer_hostname.hostname\" loadBalancers/&lt;&lt;loadbalancer ocid&gt;&gt;/hostnames/&lt;&lt;hostname&gt;&gt;\n    #############################\n    hostnames = {\n      ## key - Is a unique value to reference the resources respectively\n      lbr1_lbr01_hostname = {\n\n        # Required\n        name               = \"lbr01\"\n        load_balancer_id   = \"lbr1\"\n        hostname           = \"lbrhostname01\"\n        },     \n    }\n</code></pre></p> </li> </ul> <p>3. Load Balancer Reserved IP</p> <ul> <li> <p>Syntax <pre><code>   lbr_reserved_ips = {\n      ## key - Is a unique value to reference the resources respectively\n     key = {\n          # Required\n          compartment_id           = string\n          display_name             = string\n          lifetime                 = string\n\n          # Optional\n          private_ip_id            = string\n          public_ip_pool_id        = string\n          lifetime                 = string\n          defined_tags             = map\n          freeform_tags            = map\n      }\n   }\n</code></pre></p> </li> <li> <p>Example</p> </li> </ul> <pre><code>  // Copyright (c) 2021, 2022, Oracle and/or its affiliates.\n  ############################\n  # Network\n  # Create Reserved IPs for Load Balancers\n  # Allowed Values:\n  # lifetime can be EPHEMERAL or RESERVED\n  # private_ip_id and public_ip_pool_id can be the ocids or the key of private_ips (map) and public_ip_pools (map) respectively\n  # compartment_id can be the ocid or the name of the compartment hierarchy delimited by double hiphens \"--\"\n  # Example : compartment_id = \"ocid1.compartment.oc1..aaaaaaaahwwiefb56epvdlzfic6ah6jy3xf3c\" or compartment_id = \"Network-root-cpt--Network\" where \"Network-root-cpt\" is the parent of \"Network\" compartment\n  ########################################################\n  lbr_reserved_ips = {\n     ## key - Is a unique value to reference the resources respectively\n     lbr2-reserved-ip = {\n\n          # Required\n          compartment_id = \"OMCDev--OMCDev-VM\"\n          display_name   = \"lbr2-reserved-ip\"\n          lifetime       = \"RESERVED\"\n\n          defined_tags = {\n               \"Operations.os\"= \"Linux\" ,\n               \"Organization.department\"= \"Administrators\" ,\n          },\n     },\n  ##Add New Load Balancer Reserved IPs for london here##\n  }\n</code></pre> <p>4. Certificates</p> <ul> <li> <p>Syntax <pre><code>  certificates = {\n      ## key - Is a unique value to reference the resources respectively\n      key = {\n          # Required\n          certificate_name           = string\n          load_balancer_id           = string # Key of load balancer created by terraform\n\n          # Optional\n          ca_certificate             = string\n          passphrase                 = string\n          private_key                = string\n          public_certificate         = string\n     }\n  }\n</code></pre></p> </li> <li> <p>Example <pre><code>  // Copyright (c) 2021, 2022, Oracle and/or its affiliates.\n  #############################\n  # Network\n  # Certificates - tfvars\n  # Allowed Values:\n  # load_balancer_id can be ocid or the key of load_balancers (map)\n  # Sample import command for Certificates:\n  # terraform import \"module.certificates[\\\"&lt;&lt;certificates terraform variable name&gt;&gt;\\\"].oci_load_balancer_certificate.certificate\" loadBalancers/&lt;&lt;loadbalancer ocid&gt;&gt;/certificates/&lt;&lt;certificate name&gt;&gt;\n  #############################\n  certificates = {\n      ## key - Is a unique value to reference the resources respectively\n     lbr1_cert = {\n\n       # Required\n       certificate_name = \"lbr-cert\"\n       load_balancer_id = \"lbr1\"\n\n       # Optional\n       ca_certificate     = \"abc-selfsigned.key\"\n       private_key        = \"abc-selfsigned.key\"\n       public_certificate = \"abc-selfsigned.crt\"\n     },\n     lbr2_cert = {\n\n        # Required\n        certificate_name  = \"lbr2-cert\"\n        load_balancer_id   = \"lbr2\"\n\n        # Optional\n        ca_certificate     = \"def-ca-certificate.cert\"\n        public_certificate = \"def-cert-public-certificate.cert\"\n     },\n  ##Add New Certificates for london here##\n  }\n</code></pre></p> </li> </ul> <p>5. Cipher Suites</p> <ul> <li> <p>Syntax <pre><code>  cipher_suites = {\n      ## key - Is a unique value to reference the resources respectively\n      key = {\n          # Required\n          ciphers          = list(string)\n          name             = string\n          load_balancer_id = string # Key of load balancer created by terraform\n     }\n  }\n</code></pre></p> </li> <li> <p>Example <pre><code>  // Copyright (c) 2021, 2022, Oracle and/or its affiliates.\n  #############################\n  # Network\n  # Cipher Suites - tfvars\n  # Allowed Values:\n  # load_balancer_id can be ocid or the key of load_balancers (map)\n  # Sample import command for Cipher Suites:\n  # terraform import \"module.cipher-suites[\\\"&lt;&lt;cipher_suites terraform variable name&gt;&gt;\\\"].oci_load_balancer_ssl_cipher_suite.ssl_cipher_suite\" loadBalancers/&lt;&lt;loadbalancer ocid&gt;&gt;/sslCipherSuites/&lt;&lt;cipher suite name&gt;&gt;\n  #############################\n  cipher_suites = {\n      ## key - Is a unique value to reference the resources respectively\n      lbr1_testcipher = {\n           # Required\n           ciphers          = [\"AES128-SHA\"]\n           name             = \"testcipher\"\n           load_balancer_id = \"lbr1\"\n     },\n  ##Add New Ciphers for london here##\n  }\n</code></pre></p> </li> </ul> <p>6. Backend Sets</p> <ul> <li> <p>Syntax <pre><code>  backend_sets = {\n      ## key - Is a unique value to reference the resources respectively\n      key = {\n        # Required\n        name                        = string\n        load_balancer_id            = string # Key of load balancer created by terraform\n        policy                      = string\n\n        # Optional \n        protocol                   = string\n        interval_ms                = string\n        port                       = string\n        response_body_regex        = string\n        retries                    = string\n        return_code                = string\n        timeout_in_millis          = string\n        url_path                   = string\n        lb_cookie_session          = [{\n          cookie_name        = string\n          disable_fallback   = string\n          path               = string\n          domain             = string\n          is_http_only       = string\n          is_secure          = string\n          max_age_in_seconds = string\n        }]\n        session_persistence_configuration       = [{\n          cookie_name      = string\n          disable_fallback = string\n        }]\n        certificate_name         = string # Key of certificate created by terraform\n        cipher_suite_name        = string # Key of cipher suite created by terraform or default cipher suite name\n        ssl_configuration        = [{\n          certificate_ids        = list\n          server_order_preference= string\n          trusted_certificate_authority_ids = list\n          verify_peer_certificate = string\n          verify_depth            = string\n          protocols               = list\n          }]\n      }\n  }\n</code></pre></p> </li> <li> <p>Example <pre><code>  // Copyright (c) 2021, 2022, Oracle and/or its affiliates.\n  #############################\n  # Network\n  # Backend Sets - tfvars\n  # Allowed Values:\n  # load_balancer_id can be ocid or the key of load_balancers (map)\n  # protocols in ssl configuration defaults to \"TLSv1\",\"TLSv1.1\",\"TLSv1.2\"\n  # Sample import command for Backend Sets:\n  # terraform import \"module.backend-sets[\\\"&lt;&lt;backend_sets terraform variable name&gt;&gt;\\\"].oci_load_balancer_backend_set.backend_set\" loadBalancers/&lt;&lt;loadbalancer ocid&gt;&gt;/backendSets/&lt;&lt;backendset name&gt;&gt;\n  #############################\n  backend_sets = {\n     lbr2_bs01 = {\n         # Required\n         name = \"bs01\"\n         load_balancer_id = \"lbr2\"\n         policy = \"ROUND_ROBIN\"\n\n         # Optional\n         protocol = \"HTTP\"\n         interval_ms = \"10000\"\n         port = \"90\"\n         url_path = \"/\"\n         session_persistence_configuration = [{\n             #Required\n             cookie_name = \"test\"\n             #Optional\n             disable_fallback = \"true\"\n         }]\n     },\n     lbr1_bset01 = {\n         # Required\n         name = \"bset01\"\n         load_balancer_id = \"lbr1\"\n         policy = \"ROUND_ROBIN\"\n\n         # Optional\n         protocol = \"HTTP\"\n         interval_ms = \"10000\"\n         port = \"80\"\n         url_path = \"/\"\n         certificate_name = \"lbr1_cert\"\n         cipher_suite_name = \"oci-wider-compatible-ssl-cipher-suite-v1\"\n         ssl_configuration  = [{\n             verify_peer_certificate = true\n             verify_depth = 1\n             protocols = [ \"TLSv1.2\",\"TLSv1\",\"TLSv1.1\", ]\n         }]\n     },\n  ##Add New Backend Sets for london here##\n  }\n</code></pre></p> </li> </ul> <p>7. Backends</p> <ul> <li> <p>Syntax <pre><code>  backends = {\n      ## key - Is a unique value to reference the resources respectively\n      key = {\n          # Required\n          backendset_name  = string # Key of backend sets created by terraform\n          ip_address       = string\n          load_balancer_id = string # Key of load balancer created by terraform\n          port             = string\n\n          # Optional\n          instance_compartment = string\n          backup               = string\n          drain                = string\n          offline              = string\n          weight               = string\n     }\n  }\n</code></pre></p> </li> <li> <p>Example <pre><code>  // Copyright (c) 2021, 2022, Oracle and/or its affiliates.\n  #############################\n  # Network\n  # Backends - tfvars\n  # Allowed Values:\n  # backendset_name must be the key of backend_sets (map)\n  # load_balancer_id can be ocid or the key of load_balancers (map)\n  # Sample import command for Backend Sets:\n  # terraform import \"module.backends[\\\"&lt;&lt;backends terraform variable name&gt;&gt;\\\"].oci_load_balancer_backend.backend\" loadBalancers/&lt;&lt;loadbalancer ocid&gt;&gt;/backendSets/&lt;&lt;backendset name&gt;&gt;/backends/&lt;&lt;backend server name or ip&gt;&gt;:&lt;&lt;port&gt;&gt;\n  #############################\n  backends = {\n     lbr2_bs01_c10-218-3-7-1 = {\n         # Required\n         backendset_name = \"lbr2_bs01\"\n         load_balancer_id = \"lbr2\"\n         ip_address = \"IP:10.218.3.7\" # Format --&gt;  \"IP:&lt;ip_address&gt;\" or \"NAME:&lt;server_name&gt;\"\n         port = \"80\"\n\n         # Optional\n         backup = \"false\"\n         },\n     lbr1_bset01_c192-9-88-40-1 = {\n         # Required\n         backendset_name = \"lbr1_bset01\"\n         load_balancer_id = \"lbr1\"\n         ip_address = \"IP:192.9.88.40\" # Format --&gt;  \"IP:&lt;ip_address&gt;\" or \"NAME:&lt;server_name&gt;\"\n         port = \"80\"\n\n         # Optional\n         backup = \"false\"\n         },\n  ##Add New Backends for london here##\n  }\n</code></pre></p> </li> </ul> <p>8. Rule Sets</p> <ul> <li> <p>Syntax <pre><code>  rule_sets = {\n      ## key - Is a unique value to reference the resources respectively\n      key = {\n         # Required\n         name                     = string\n         load_balancer_id         = string # Key of load balancer created by terraform\n\n         # Optional\n         access_control_rules     = [{\n             # Required\n             action          = string\n             # Optional\n             attribute_name  = string\n             attribute_value = string\n             description     = string\n         }] (OR)\n         access_control_method_rules = [{\n             # Required\n             action           = string\n             # Optional\n             allowed_methods  = list\n             status_code      = string\n         }] (OR)\n         http_header_rules        = [{\n             # Required\n             action           = string\n             # Optional\n             action   = string\n             are_invalid_characters_allowed  = bool\n             http_large_header_size_in_kb    = string\n         }] (OR)\n         uri_redirect_rules       = [{\n             # Required\n             action           = string\n             # Optional\n             attribute_name   = string\n             attribute_value  = string\n             operator         = string\n             host             = string\n             path             = string\n             port             = string\n             protocol         = string\n             query            = string\n             response_code    = string\n         }] (OR)\n         request_response_header_rules = [{\n             # Required\n             action           = string\n             # Optional\n             header           = string\n             prefix           = string\n             suffix           = string\n             value            = string\n         }]\n     }\n  }\n</code></pre></p> </li> <li> <p>Example <pre><code>  // Copyright (c) 2021, 2022, Oracle and/or its affiliates.\n  #############################\n  # Network\n  # Rule Set - tfvars\n  # Allowed Values:\n  # load_balancer_id can be the ocid or the key of load_balancers (map)\n  # Sample import command for Rule Set:\n  # terraform import \"module.rule-sets[\\\"&lt;&lt;rule_sets terraform variable name&gt;&gt;\\\"].oci_load_balancer_rule_set.rule_set\" loadBalancers/&lt;&lt;loadbalancer ocid&gt;&gt;/ruleSets/&lt;&lt;rule set name&gt;&gt;\n  #############################\n  rule_sets = {\n     lbr1_test = {\n         # Required\n         name = \"test\"\n         load_balancer_id = \"lbr1\"\n\n         # Optional\n         access_control_rules = [\n            {\n             action = \"ALLOW\"\n             attribute_name = \"SOURCE_IP_ADDRESS\"\n             attribute_value = \"10.20.2.10/32\"\n             },\n             {\n             action = \"ALLOW\"\n             attribute_name = \"SOURCE_IP_ADDRESS\"\n             attribute_value = \"10.10.1.10/32\"\n             },\n     ## Add_access_control_rules_here_for_lbr1_test ##\n         ]\n         access_control_method_rules = [\n             {\n             action = \"CONTROL_ACCESS_USING_HTTP_METHODS\"\n             allowed_methods = [\"ACL\",\"BIND\",\"CHECKIN\",\"CONNECT\"]\n             status_code = \"405\"\n             },\n     ## Add_access_control_method_rules_here_for_lbr1_test ##\n         ]\n         http_header_rules = [\n             {\n             #Required\n             action = \"HTTP_HEADER\"\n             are_invalid_characters_allowed = true\n             http_large_header_size_in_kb = 64\n             },\n     ## Add_http_header_rules_here_for_lbr1_test ##\n         ]\n         uri_redirect_rules = [\n             {\n             action = \"REDIRECT\"\n             attribute_name = \"PATH\"\n             attribute_value = \"/\"\n             operator = \"PREFIX_MATCH\"\n             host = \"10.0.0.1\"\n             path = \"/\"\n             port = \"80\"\n             protocol = \"http\"\n             query = \"?{query}\"\n             response_code = \"302\"\n             },\n     ## Add_uri_redirect_rules_here_for_lbr1_test ##\n         ]\n         request_response_header_rules = [\n             {\n             action = \"EXTEND_HTTP_REQUEST_HEADER_VALUE\"\n             header = \"head\"\n             prefix = \"pre\"\n             suffix = \"suf\"\n             },\n                 {\n             action = \"REMOVE_HTTP_RESPONSE_HEADER\"\n             header = \"fri\"\n             },\n     ## Add_request_response_header_rules_here_for_lbr1_test ##\n         ]\n     },\n  ##Add New Rule Sets for london here##\n  }\n</code></pre></p> </li> </ul> <p>9. Path Route Sets</p> <ul> <li> <p>Syntax <pre><code>  path_route_sets = {\n      ## key - Is a unique value to reference the resources respectively\n      key = {\n          # Required\n          name             = string\n          load_balancer_id = string # Key of load balancer created by terraform\n          path_routes      = [{\n             backend_set_name = string # Key of backend sets created by terraform\n             path             = string\n             match_type       = string\n         }]\n     }\n  }\n</code></pre></p> </li> <li> <p>Example <pre><code>  // Copyright (c) 2021, 2022, Oracle and/or its affiliates.\n  #############################\n  # Network\n  # Path Route Set - tfvars\n  # Allowed Values:\n  # load_balancer_id can be the ocid or the key of load_balancers (map)\n  # Sample import command for Path Route Set:\n  # terraform import \"module.path-route-sets[\\\"&lt;&lt;path_route_sets terraform variable name&gt;&gt;\\\"].oci_load_balancer_path_route_set.path_route_set\" loadBalancers/&lt;&lt;loadbalancer ocid&gt;&gt;/pathRouteSets/&lt;&lt;path route set name&gt;&gt;\n  #############################\n  path_route_sets = {\n    lbr1_prt = {\n         # Required\n         load_balancer_id = \"lbr1\"\n         name = \"prt\"\n         path_routes = [\n         {\n             #Required\n             backend_set_name = \"bset01\"\n             path = \"find\"\n             match_type = \"PREFIX_MATCH\"\n         },\n                 {\n             #Required\n             backend_set_name = \"bset01\"\n             path = \"word\"\n             match_type = \"FORCE_LONGEST_PREFIX_MATCH\"\n         },\n                 {\n             #Required\n             backend_set_name = \"bset01\"\n             path = \"hello\"\n             match_type = \"SUFFIX_MATCH\"\n         },\n         #Add_Rules_for_lbr1_prt_here\n             ]\n       },\n    lbr2_prs01 = {\n         # Required\n         load_balancer_id = \"lbr2\"\n         name = \"prs01\"\n         path_routes = [\n         {\n             #Required\n             backend_set_name = \"bs01\"\n             path = \"find\"\n             match_type = \"FORCE_LONGEST_PREFIX_MATCH\"\n         },\n                 {\n             #Required\n             backend_set_name = \"bs01\"\n             path = \"word\"\n             match_type = \"PREFIX_MATCH\"\n         },\n         #Add_Rules_for_lbr2_prs01_here\n             ]\n       },\n  ##Add New Path Route Sets for london here##\n  }\n</code></pre></p> </li> </ul> <p>10. Routing Policies</p> <ul> <li> <p>Syntax <pre><code>  lb_routing_policies = {\n      ## key - Is a unique value to reference the resources respectively\n      key = {\n            name                       = string\n            load_balancer_id           = string\n            condition_language_version = optional(string)\n            rules                      = optional(list(map(any)))\n      },      \n   }\n</code></pre></p> </li> <li> <p>Example <pre><code>  // Copyright (c) 2024, 2025, Oracle and/or its affiliates.\n    #############################\n    # Network\n    # Routing Policy - tfvars\n    # Allowed Values:\n    # load_balancer_id can be the ocid or the key of load_balancers (map)\n    # Sample import command for Routing Policy:\n    # terraform import \"module.routing-policy\\\"&lt;&lt;routing policy terraform variable name&gt;&gt;\\\"].oci_load_balancer_load_balancer_routing_policy.load_balancer_routing_policy\" &lt;&lt;routing policy ocid&gt;&gt;\n    #############################\n    lb_routing_policies = {\n      lbr2_test_routing_policy  = {\n        condition_language_version   = \"V1\"\n        load_balancer_id             = \"lbr2\"\n        name                         = \"test_routing_policy\"\n        rules = [\n              {\n                condition        = \"any(http.request.url.path eq (i '/documents'))\"\n                name             = \"test_rule_1\"\n                backend_set_name = \"BS1\"\n              },\n              {\n                condition        = \"any(http.request.url.path eq (i '/documents'))\"\n                name             = \"test_rule_2\"\n                backend_set_name = \"BS1-2\"\n              },\n              {\n                condition        = \"any(http.request.url.path eq (i '/documents'))\"\n                name             = \"test_rule_3\"\n                backend_set_name = \"BS1\"\n              }\n            ]\n            },\n      lbr2_test_routing_policy_2  = {\n        condition_language_version   = \"V1\"\n        load_balancer_id             = \"br2\"\n        name                         = \"test_routing_policy_2\"\n        rules = [\n              {\n                condition        = \"all(http.request.headers[(i 'user-agent')] eq (i 'mobile'), http.request.url.query['department'] eq 'HR')\"\n                name             = \"test_rule_11\"\n                backend_set_name = \"BS1\"\n              },\n              {\n                condition        = \"any(http.request.url.path eq (i '/api/v1/products'), http.request.url.query['category'] eq 'electronics')\"\n                name             = \"test_rule_22\"\n                backend_set_name = \"BS1\"\n              },\n              {\n                condition        = \"http.request.url.path eq (i '/api/v1/orders')\"\n                name             = \"test_rule_33\"\n                backend_set_name = \"BS1\"\n              }\n            ]\n            },\n    ##Add New Routing Policy for phoenix here##\n    }\n</code></pre></p> </li> </ul> <p>11. Listeners</p> <ul> <li> <p>Syntax <pre><code>  listeners = {\n      ## key - Is a unique value to reference the resources respectively\n      key = {\n          # Required\n          name             = string\n          load_balancer_id = string # Key of load balancer created by terraform\n          port             = string\n          protocol         = string\n          default_backend_set_name   = string\n\n          # Optional\n          path_route_set_name = string\n          routing_policy_name = string\n          certificate_name    = string # Key of certificate created by terraform\n          cipher_suite_name   = string # Key of cipher suite created by terraform\n          connection_configuration = [{\n             idle_timeout_in_seconds = string\n             backend_tcp_proxy_protocol_version = string\n          }]\n          hostname_names   = list\n          rule_set_names   = list\n          ssl_configuration      = [{\n             certificate_ids = list  # Oracle Managed Certificate IDs\n             server_order_preference  = string\n             trusted_certificate_authority_ids = list # Oracle Managed trusted_certificate_authority_ids\n             verify_peer_certificate  = string\n             verify_depth             = string\n             protocols                = list\n         }]\n     }\n  }\n</code></pre></p> </li> <li> <p>Example <pre><code>  // Copyright (c) 2021, 2022, Oracle and/or its affiliates.\n  #############################\n  # Network\n  # Listeners - tfvars\n  # Allowed Values:\n  # HTTPS listener must have the protocol specified as HTTP\n  # protocols in ssl configuration defaults to \"TLSv1.2\"\n  # load_balancer_id can be the ocid or the key of load_balancers (map)\n  # default_backend_set_name,hostname_names,path_route_set_name,rule_set_names,cipher_suite_name,certificate_name must be the key of the respective maps\n  # Sample import command for Listeners:\n  # terraform import \"module.listeners[\\\"&lt;&lt;listeners terraform variable name&gt;&gt;\\\"].oci_load_balancer_listener.listener\" loadBalancers/&lt;&lt;loadbalancer ocid&gt;&gt;/listeners/&lt;&lt;listener name&gt;&gt;\n  #############################\n  listeners = {\n     lbr1_lis = {\n         # Required\n         name = \"lis\"\n         load_balancer_id = \"lbr1\"\n         port = \"80\"\n         protocol = \"HTTP\"\n         default_backend_set_name = \"lbr1_bset01\"\n\n         # Optional\n         connection_configuration = [{\n             idle_timeout_in_seconds = \"7000\"\n             }]\n         hostname_names = [\"lbr1_lbr01_hostname\"]\n         path_route_set_name = \"lbr1_prt\"\n         rule_set_names = []\n     },\n  ##Add New Listeners for london here##\n  }\n</code></pre></p> </li> </ul>"},{"location":"terraform/logging/","title":"auto.tfvars syntax for Logging Module","text":"<p>These are the syntax and sample format for providing inputs to the modules via *.auto.tfvars files. \"key\" must be unique to every resource that is created. Comments preceed with ##.</p>"},{"location":"terraform/logging/#object-storage-logs","title":"Object Storage logs","text":"<p>1. Object Storage Log Groups</p> <ul> <li>Syntax</li> </ul> <pre><code>    oss_log_groups = {\n        ## key - Is a unique value to reference the resources respectively\n        key = {\n            # Required\n            compartment_id = string\n            display_name   = string\n\n            # Optional\n            description    = string\n            defined_tags   = map\n            freeform_tags  = map\n          }\n    }\n</code></pre> <ul> <li>Example <pre><code>  // Copyright (c) 2021, 2022, Oracle and/or its affiliates.\n  ############################\n  # ManagementServices\n  # OSS Log Groups - tfvars\n  # Allowed Values:\n  # compartment_id can be the ocid or the name of the compartment hierarchy delimited by double hiphens \"--\"\n  # Example : compartment_id = \"ocid1.compartment.oc1..aaaaaaaahwwiefb56epvdlzfic6ah6jy3xf3c\" or compartment_id = \"Security--Prod\" where \"Security\" is the parent of \"Prod\" compartment\n  ############################\n  oss_log_groups = {\n    # Log Group map #\n    CD3-london-oss-log-group = {\n        compartment_id = \"Storage\"\n        display_name   = \"CD3-london-oss-log-group\"\n        description    = \"Log Group for OSS bucket\"\n      },\n  ##Add New Log Groups for london here##\n  }\n</code></pre></li> </ul> <p>2. Object Storage Logs</p> <ul> <li>Syntax</li> </ul> <pre><code>    oss_logs = {\n        ## key - Is a unique value to reference the resources respectively\n        key = {\n            # Required\n            display_name             = string\n            log_group_id             = string\n            log_type                 = string\n\n            # Optional\n            compartment_id           = string\n            category                 = string\n            resource                 = string\n            service                  = string\n            source_type              = string\n            is_enabled               = bool\n            retention_duration       = number\n            defined_tags             = map\n            freeform_tags            = map\n        }\n\n    }\n</code></pre> <ul> <li>Example <pre><code>  // Copyright (c) 2021, 2022, Oracle and/or its affiliates.\n  ############################\n  # ManagementServices\n  # OSS Logs - tfvars\n  # Allowed Values:\n  # compartment_id can be the ocid or the name of the compartment hierarchy delimited by double hiphens \"--\"\n  # Example : compartment_id = \"ocid1.compartment.oc1..aaaaaaaahwwiefb56epvdlzfic6ah6jy3xf3c\" or compartment_id = \"Network-root-cpt--Network\" where \"Network-root-cpt\" is the parent of \"Network\" compartment\n  ############################\n  oss_logs = {\n    # Log map #\n    CD3-london-oss-log  = {\n          display_name = \"CD3-london-oss-log\"\n          log_group_id = \"CD3-london-oss-log-group\"\n          log_type     = \"SERVICE\"\n          category    = \"write\"\n          resource    = \"CD3-london-oss-bucket\"\n          service     = \"objectstorage\"\n          source_type = \"OCISERVICE\"\n          compartment_id = \"Storage\"\n          is_enabled         = true\n          retention_duration = 30\n        },\n  ##Add New Logs for london here##\n  }\n</code></pre></li> </ul>"},{"location":"terraform/logging/#vcn-flow-logs","title":"VCN Flow logs","text":"<p>3. VCN Log Groups</p> <ul> <li>Syntax</li> </ul> <pre><code>    vcn_log_groups = {\n        ## key - Is a unique value to reference the resources respectively\n        key = {\n            # Required\n            compartment_id = string\n            display_name   = string\n\n            # Optional\n            description    = string\n            defined_tags   = map\n            freeform_tags  = map\n        }\n    }\n</code></pre> <ul> <li>Example <pre><code>  // Copyright (c) 2021, 2022, Oracle and/or its affiliates.\n  ############################\n  # ManagementServices\n  # VCN Log Groups - tfvars\n  # Allowed Values:\n  # compartment_id can be the ocid or the name of the compartment hierarchy delimited by double hiphens \"--\"\n  # Example : compartment_id = \"ocid1.compartment.oc1..aaaaaaaahwwiefb56epvdlzfic6ah6jy3xf3c\" or compartment_id = \"Security--Prod\" where \"Security\" is the parent of \"Prod\" compartment\n  ############################\n  vcn_log_groups = {\n    # Log Group map #\n      fwl-vcn-flow-log-group = {\n          # Required\n          compartment_id = \"Network\"\n          display_name   = \"fwl-vcn-flow-log-group\"\n\n          # Optional\n          description    = \"Log Group for VCN\"\n          defined_tags = {\n                  \"Oracle-Tags.CreatedOn\"= \"2023-01-10T08:18:18.100Z\" ,\n                  \"Oracle-Tags.CreatedBy\"= \"oracleidentitycloudservice/abc@xyz.com\" ,                  \n          }\n          freeform_tags = {}\n        },\n  ##Add New Log Groups for london here##\n  }\n</code></pre></li> </ul> <p>4. VCN Flow Logs</p> <ul> <li>Syntax</li> </ul> <pre><code>    vcn_logs = {\n        ## key - Is a unique value to reference the resources respectively\n        key = {\n            # Required\n            display_name             = string\n            log_group_id             = string\n            log_type                 = string\n\n            # Optional\n            compartment_id           = string\n            category                 = string\n            resource                 = string\n            service                  = string\n            source_type              = string\n            is_enabled               = bool\n            retention_duration       = number\n            defined_tags             = map\n            freeform_tags            = map\n        }\n    }\n</code></pre> <ul> <li>Example <pre><code>    // Copyright (c) 2021, 2022, Oracle and/or its affiliates.\n    ############################\n    # ManagementServices\n    # VCN Logs - tfvars\n    # Allowed Values:\n    # compartment_id can be the ocid or the name of the compartment hierarchy delimited by double hiphens \"--\"\n    # Example : compartment_id = \"ocid1.compartment.oc1..aaaaaaaahwwiefb56epvdlzfic6ah6jy3xf3c\" or compartment_id = \"Network-root-cpt--Network\" where \"Network-root-cpt\" is the parent of \"Network\" compartment\n    ############################\n    vcn_logs = {\n      # Log map #\n      fwl-vcn_fwl-priv-flow-log  = {\n        # Required\n        display_name = \"fwl-priv-flow-log\"\n        log_group_id = \"fwl-vcn-flow-log-group\"\n        log_type     = \"SERVICE\"\n\n        # Optional\n        category    = \"all\"\n        resource    = \"fwl-vcn_fwl-priv\"\n        service     = \"flowlogs\"\n        source_type = \"OCISERVICE\"\n        compartment_id = \"Network\"\n        is_enabled         = true\n        retention_duration = 30\n        defined_tags = {\n                \"Oracle-Tags.CreatedOn\"= \"2023-01-10T08:18:18.100Z\" ,\n                \"Oracle-Tags.CreatedBy\"= \"oracleidentitycloudservice/abc@xyz.com\" ,\n        }\n      },\n      fwl-vcn_fwl-mgmt-flow-log  = {\n        # Required\n        display_name = \"fwl-mgmt-flow-log\"\n        log_group_id = \"fwl-vcn-flow-log-group\"\n        log_type     = \"SERVICE\"\n\n        # Optional\n        category    = \"all\"\n        resource    = \"fwl-vcn_fwl-mgmt\"\n        service     = \"flowlogs\"\n        source_type = \"OCISERVICE\"\n        compartment_id = \"Network\"\n        is_enabled         = true\n        retention_duration = 30\n        defined_tags = {\n                \"Oracle-Tags.CreatedOn\"= \"2023-01-10T08:18:19.064Z\" ,\n                \"Oracle-Tags.CreatedBy\"= \"oracleidentitycloudservice/abc@xyz.com\" ,\n        }\n      },\n    ##Add New Logs for london here##\n    }\n</code></pre></li> </ul>"},{"location":"terraform/logging/#load-balancer-logs","title":"Load balancer logs","text":"<p>5. Load Balancer Log Groups</p> <ul> <li>Syntax</li> </ul> <pre><code>    loadbalancer_log_groups = {\n        ## key - Is a unique value to reference the resources respectively\n        key = {\n            # Required\n            compartment_id = string\n            display_name   = string\n\n            # Optional\n            description    = string\n            defined_tags   = map\n            freeform_tags  = map\n        }\n    }\n</code></pre> <ul> <li>Example <pre><code>  // Copyright (c) 2021, 2022, Oracle and/or its affiliates.\n  ############################\n  # ManagementServices\n  # LOADBALANCER Log Groups - tfvars\n  # Allowed Values:\n  # compartment_id can be the ocid or the name of the compartment hierarchy delimited by double hiphens \"--\"\n  # Example : compartment_id = \"ocid1.compartment.oc1..aaaaaaaahwwiefb56epvdlzfic6ah6jy3xf3c\" or compartment_id = \"Security--Prod\" where \"Security\" is the parent of \"Prod\" compartment\n  ############################\n  loadbalancer_log_groups = {\n    # Log Group map #\n    lbr2-log-group = {\n        compartment_id = \"Network\"\n        display_name   = \"lbr2-log-group\"\n        description    = \"Log Group for lbr2\"\n        defined_tags = {\n                \"Oracle-Tags.CreatedOn\"= \"2023-01-11T08:02:47.567Z\" ,\n                \"Oracle-Tags.CreatedBy\"= \"oracleidentitycloudservice/abc@xyz.com\" ,\n        }\n        freeform_tags = {}\n      },\n    lbr1-log-group = {\n        compartment_id = \"Network\"\n        display_name   = \"lbr1-log-group\"\n        description    = \"Log Group for lbr1\"\n        defined_tags = {\n                \"Oracle-Tags.CreatedOn\"= \"2023-01-11T08:02:47.566Z\" ,\n                \"Oracle-Tags.CreatedBy\"= \"oracleidentitycloudservice/abc@xyz.com\" ,              \n        }\n        freeform_tags = {}\n      },\n  ##Add New Log Groups for london here##\n  }\n</code></pre></li> </ul> <p>6. Load Balancer Logs</p> <ul> <li>Syntax</li> </ul> <pre><code>    loadbalancer_logs = {\n        ## key - Is a unique value to reference the resources respectively\n        key = {\n            # Required\n            display_name             = string\n            log_group_id             = string\n            log_type                 = string\n\n            # Optional\n            compartment_id           = string\n            category                 = string\n            resource                 = string\n            service                  = string\n            source_type              = string\n            is_enabled               = bool\n            retention_duration       = number\n            defined_tags             = map\n            freeform_tags            = map\n        }\n    }\n</code></pre> <ul> <li>Example <pre><code>    // Copyright (c) 2021, 2022, Oracle and/or its affiliates.\n    ############################\n    # ManagementServices\n    # LOADBALANCER Logs - tfvars\n    # Allowed Values:\n    # compartment_id can be the ocid or the name of the compartment hierarchy delimited by double hiphens \"--\"\n    # Example : compartment_id = \"ocid1.compartment.oc1..aaaaaaaahwwiefb56epvdlzfic6ah6jy3xf3c\" or compartment_id = \"Network-root-cpt--Network\" where \"Network-root-cpt\" is the parent of \"Network\" compartment\n    ############################\n    loadbalancer_logs = {\n      # Log map #\n        lbr2-log-access  = {\n            display_name = \"lbr2_access-log\"\n            log_group_id = \"lbr2-log-group\"\n            log_type     = \"SERVICE\"\n            category    = \"access\"\n            resource    = \"lbr2\"\n            service     = \"loadbalancer\"\n            source_type = \"OCISERVICE\"\n            compartment_id = \"OMCDev--OMCDev-VM\"\n            is_enabled         = true\n            retention_duration = 30\n            defined_tags = {\n                    \"Oracle-Tags.CreatedOn\"= \"2023-01-11T08:02:47.567Z\" ,\n                    \"Oracle-Tags.CreatedBy\"= \"oracleidentitycloudservice/abc@xyz.com\" ,\n            }\n          },\n        lbr2-log-error  = {\n            display_name = \"lbr2_error-log\"\n            log_group_id = \"lbr2-log-group\"\n            log_type     = \"SERVICE\"\n            category    = \"error\"\n            resource    = \"lbr2\"\n            service     = \"loadbalancer\"\n            source_type = \"OCISERVICE\"\n            compartment_id = \"OMCDev--OMCDev-VM\"\n            is_enabled         = true\n            retention_duration = 30\n            defined_tags = {\n                    \"Oracle-Tags.CreatedOn\"= \"2023-01-11T08:02:47.567Z\" ,\n                    \"Oracle-Tags.CreatedBy\"= \"oracleidentitycloudservice/abc@xyz.com\" ,\n            }\n          },\n      ##Add New Logs for london here##\n      }\n</code></pre></li> </ul>"},{"location":"terraform/logging/#nfs-logs","title":"NFS Logs","text":"<p>7. NFS Log Groups</p> <ul> <li>Syntax</li> </ul> <pre><code>    nfs_log_groups = {\n        ## key - Is a unique value to reference the resources respectively\n        key = {\n            # Required\n            compartment_id = string\n            display_name   = string\n\n            # Optional\n            description    = string\n            defined_tags   = map\n            freeform_tags  = map\n        }\n    }\n</code></pre> <ul> <li>Example <pre><code>    // Copyright (c) 2021, 2022, Oracle and/or its affiliates.\n    ############################\n    # ManagementServices\n    # NFS Log Groups - tfvars\n    # Allowed Values:\n    # compartment_id can be the ocid or the name of the compartment hierarchy delimited by double hiphens \"--\"\n    # Example : compartment_id = \"ocid1.compartment.oc1..aaaaaaaahwwiefb56epvdlzfic6ah6jy3xf3c\" or compartment_id = \"Security--Prod\" where \"Security\" is the parent of \"Prod\" compartment\n    ############################\n    nfs_log_groups = {\n        # Log Group map #\n        MT1_nfs-log-group = {\n            compartment_id = \"AppDev\"\n            display_name   = \"MT1_nfs-log-group\"\n            description    = \"Log Group for MT1\"\n            defined_tags = {\n                \"Oracle-Tags.CreatedOn\"= \"2024-05-31T17:28:50.621Z\" ,\n                \"Oracle-Tags.CreatedBy\"= \"oracleidentitycloudservice/abc@oracle.com\"\n            }\n        },\n    ##Add New Log Groups for london here##\n    }\n</code></pre></li> </ul> <p>8. NFS Logs</p> <ul> <li>Syntax</li> </ul> <pre><code>    nfs_logs = {\n        ## key - Is a unique value to reference the resources respectively\n        key = {\n            # Required\n            display_name             = string\n            log_group_id             = string\n            log_type                 = string\n\n            # Optional\n            compartment_id           = string\n            category                 = string\n            resource                 = string\n            service                  = string\n            source_type              = string\n            is_enabled               = bool\n            retention_duration       = number\n            defined_tags             = map\n            freeform_tags            = map\n        }\n\n    }\n</code></pre> <ul> <li>Example <pre><code>    ############################\n    # ManagementServices\n    # NFS Logs - tfvars\n    # Allowed Values:\n    # compartment_id can be the ocid or the name of the compartment hierarchy delimited by double hiphens \"--\"\n    # Example : compartment_id = \"ocid1.compartment.oc1..aaaaaaaahwwiefb56epvdlzfic6ah6jy3xf3c\" or compartment_id = \"Network-root-cpt--Network\" where \"Network-root-cpt\" is the parent of \"Network\" compartment\n    ############################\n    nfs_logs = {\n        # Log map #\n        MT1_nfslogs-log  = {\n            display_name        = \"MT1_nfslogs-log\"\n            log_group_id        = \"MT1_nfs-log-group\"\n            log_type            = \"SERVICE\"\n            category            = \"nfslogs\"\n            resource            = \"MT1\"\n            service             = \"filestorage\"\n            source_type         = \"OCISERVICE\"\n            compartment_id      = \"AppDev\"\n            is_enabled          = true\n            retention_duration  = 30\n            defined_tags = {\n                \"Oracle-Tags.CreatedOn\"= \"2024-05-31T17:28:50.621Z\" ,\n                \"Oracle-Tags.CreatedBy\"= \"oracleidentitycloudservice/abc@oracle.com\"\n            }\n        },\n        MT1_nfslogs-log  = {\n            display_name        = \"MT1_nfslogs-log\"\n            log_group_id        = \"MT1_nfs-log-group\"\n            log_type            = \"SERVICE\"\n            category            = \"nfslogs\"\n            resource            = \"MT1\"\n            service             = \"filestorage\"\n            source_type         = \"OCISERVICE\"\n            compartment_id      = \"AppDev\"\n            is_enabled          = true\n            retention_duration  = 30\n            defined_tags = {\n                \"Oracle-Tags.CreatedOn\"= \"2024-05-31T17:28:50.621Z\" ,\n                \"Oracle-Tags.CreatedBy\"= \"oracleidentitycloudservice/abc@oracle.com\"\n            }\n        },      \n        ##Add New Logs for london here##\n     }\n</code></pre></li> </ul>"},{"location":"terraform/logging/#firewall-logs","title":"Firewall logs","text":"<p>9. Firewall Log Groups</p> <ul> <li>Syntax</li> </ul> <pre><code>    fw_log_groups = {\n        ## key - Is a unique value to reference the resources respectively\n        key = {\n            # Required\n            compartment_id = string\n            display_name   = string\n\n            # Optional\n            description    = string\n            defined_tags   = map\n            freeform_tags  = map\n      }\n    }\n</code></pre> <ul> <li>Example <pre><code>    // Copyright (c) 2021, 2022, Oracle and/or its affiliates.\n    ############################\n    # ManagementServices\n    # FW Log Groups - tfvars\n    # Allowed Values:\n    # compartment_id can be the ocid or the name of the compartment hierarchy delimited by double hiphens \"--\"\n    # Example : compartment_id = \"ocid1.compartment.oc1..aaaaaaaahwwiefb56epvdlzfic6ah6jy3xf3c\" or compartment_id = \"Security--Prod\" where \"Security\" is the parent of \"Prod\" compartment\n    ############################\n    fw_log_groups = {\n    # Log Group map #\n        OCI-FWL_fw-log-group = {\n            compartment_id = \"Network\"\n            display_name   = \"OCI-FWL_fw-log-group\"\n            description    = \"Log Group for OCI-FWL\"\n            defined_tags = {\n                \"Oracle-Tags.CreatedOn\"= \"2024-03-14T06:18:47.503Z\" ,\n                \"Oracle-Tags.CreatedBy\"= \"oracleidentitycloudservice/abc@oracle.com\"\n            } \n        },\n    ##Add New Log Groups for phoenix here##\n    }\n</code></pre></li> </ul> <p>10. Firewall Logs</p> <ul> <li>Syntax</li> </ul> <pre><code>    fw_logs = {\n        ## key - Is a unique value to reference the resources respectively\n        key = {\n            # Required\n            display_name             = string\n            log_group_id             = string\n            log_type                 = string\n\n            # Optional\n            compartment_id           = string\n            category                 = string\n            resource                 = string\n            service                  = string\n            source_type              = string\n            is_enabled               = bool\n            retention_duration       = number\n            defined_tags             = map\n            freeform_tags            = map\n      }\n    }\n</code></pre> <ul> <li>Example <pre><code>    ############################\n    # ManagementServices\n    # FW Logs - tfvars\n    # Allowed Values:\n    # compartment_id can be the ocid or the name of the compartment hierarchy delimited by double hiphens \"--\"\n    # Example : compartment_id = \"ocid1.compartment.oc1..aaaaaaaahwwiefb56epvdlzfic6ah6jy3xf3c\" or compartment_id = \"Network-root-cpt--Network\" where \"Network-root-cpt\" is the parent of \"Network\" compartment\n    ############################\n    fw_logs = {\n    # Log map #\n        OCI-FWL_threatlog-log  = {\n            display_name        = \"OCI-FWL_threatlog-log\"\n            log_group_id        = \"OCI-FWL_fw-log-group\"\n            log_type            = \"SERVICE\"\n            category            = \"threatlog\"\n            resource            = \"OCI-FWL\"\n            service             = \"ocinetworkfirewall\"\n            source_type         = \"OCISERVICE\"\n            compartment_id      = \"Network\"\n            is_enabled          = true\n            retention_duration  = 30\n            defined_tags = {\n                \"Oracle-Tags.CreatedOn\"= \"2024-03-14T06:18:47.503Z\" ,\n                \"Oracle-Tags.CreatedBy\"= \"oracleidentitycloudservice/suruchi.singla@oracle.com\"\n            }\n        },\n        OCI-FWL_trafficlog-log  = {\n            display_name        = \"OCI-FWL_trafficlog-log\"\n            log_group_id        = \"OCI-FWL_fw-log-group\"\n            log_type            = \"SERVICE\"\n            category            = \"trafficlog\"\n            resource            = \"OCI-FWL\"\n            service             = \"ocinetworkfirewall\"\n            source_type         = \"OCISERVICE\"\n            compartment_id      = \"Network\"\n            is_enabled          = true\n            retention_duration  = 30\n            defined_tags = {\n                \"Oracle-Tags.CreatedOn\"= \"2024-03-14T06:18:47.503Z\" ,\n                \"Oracle-Tags.CreatedBy\"= \"oracleidentitycloudservice/abc@oracle.com\"\n            }\n        },\n        ##Add New Logs for phoenix here##\n    } \n</code></pre></li> </ul>"},{"location":"terraform/managementservices/","title":"auto.tfvars syntax for Management Services Module","text":"<p>These are the syntax and sample format for providing inputs to the modules via *.auto.tfvars files. \"key\" must be unique to every resource that is created. Comments preceed with ##.</p> <p>1. Alarms</p> <ul> <li>Syntax</li> </ul> <pre><code>  alarms = {\n      ## key - Is a unique value to reference the resources respectively\n      key = {\n          # Required\n          compartment_id             = string \n          destinations               = list\n          is_enabled                 = bool\n          metric_compartment_id      = string\n          namespace                  = string\n          query                      = string\n          severity                   = string\n\n          # Optional\n          body                       = string\n          message_format             = string\n          defined_tags               = map\n          freeform_tags              = map\n          is_notifications_per_metric_dimension_enabled = bool\n          metric_compartment_id_in_subtree = string\n          trigger_delay_minutes      = string\n          repeat_notification_duration = string\n          resolution             = string\n          resource_group         = string\n          suppression            = map\n      },\n  }\n</code></pre> <ul> <li>Example <pre><code>    // Copyright (c) 2021, 2022, Oracle and/or its affiliates.\n    ############################\n    # ManagementServices\n    # Alarms - tfvars\n    # Allowed Values:\n    # compartment_id and metric_compartment_id can be the ocid or the name of the compartment hierarchy delimited by double hiphens \"--\"\n    # Example : compartment_id = \"ocid1.compartment.oc1..aaaaaaaahwwiefb56epvdlzfic6ah6jy3xf3c\" or compartment_id = \"Security--Prod\" where \"Security\" is the parent of \"Prod\" compartment\n    ############################\n    alarms = {\n     Network_vpn-status-alarm = {\n       #Required\n           compartment_id = \"Security\"\n           destinations = [\"NetworkTopic\"]\n           alarm_name = \"vpn-status-alarm\"\n           is_enabled = true\n           metric_compartment_id = \"Network\"\n           namespace = \"oci_vpn\"\n           query = \"TunnelState[1m].mean() == 0\"\n           severity = \"CRITICAL\"\n           message_format = \"PRETTY_JSON\"\n           trigger_delay_minutes = \"PT5M\"\n       },\n       Network_fast-connect-status-alarm = {\n       #Required\n           compartment_id = \"Security\"\n           destinations = [\"NetworkTopic\"]\n           alarm_name = \"fast-connect-status-alarm\"\n           is_enabled = true\n           metric_compartment_id = \"Network\"\n           namespace = \"oci_fastconnect\"\n           query = \"ConnectionState[1m].mean() == 0\"\n           severity = \"CRITICAL\"\n           message_format = \"PRETTY_JSON\"\n           trigger_delay_minutes = \"PT5M\"\n       },\n       Network_bare-metal-unhealthy-alarm = {\n       #Required\n           compartment_id = \"Security\"\n           destinations = [\"ComputeTopic\"]\n           alarm_name = \"bare-metal-unhealthy-alarm\"\n           is_enabled = true\n           metric_compartment_id = \"Network\"\n           namespace = \"oci_compute_infrastructure_health\"\n           query = \"health_status[1m].count() == 1\"\n           severity = \"CRITICAL\"\n           message_format = \"PRETTY_JSON\"\n           trigger_delay_minutes = \"PT5M\"\n           defined_tags = {\n             \"Operations.os\"= \"Linux\" ,\n             \"Organization.department\"= \"Administrators\" ,\n           }\n       },\n    }\n</code></pre></li> </ul> <p>2. Notification Topics</p> <ul> <li> <p>Syntax <pre><code>   notifications_topics = {\n      ## key - Is a unique value to reference the resources respectively\n      key = {\n          # Required\n          compartment_id             = string \n          topic_name                 = string\n\n          # Optional\n          description                = string\n          defined_tags               = map\n          freeform_tags              = map\n      },      \n   }\n</code></pre></p> </li> <li> <p>Example <pre><code>    // Copyright (c) 2021, 2022, Oracle and/or its affiliates.\n    ############################\n    # ManagementServices\n    # Notifications_Topics - tfvars\n    # Allowed Values:\n    # compartment_id can be the ocid or the name of the compartment hierarchy delimited by double hiphens \"--\"\n    # Example : compartment_id = \"ocid1.compartment.oc1..aaaaaaaahwwiefb56epvdlzfic6ah6jy3xf3c\" or compartment_id = \"Security--Prod\" where \"Security\" is the parent of \"Prod\" compartment\n    ############################\n    notifications_topics = {\n       NetworkTopic = {\n         compartment_id = \"Security\"\n         description = \"Topic for network related notifications.\"\n         topic_name = \"NetworkTopic\"\n       },\n       SecurityTopic = {\n         compartment_id = \"Security\"\n         description = \"Topic for security related notifications.\"\n         topic_name = \"SecurityTopic\" \n         defined_tags = {\n          \"Operations.os\"= \"Linux\" ,\n          \"Organization.department\"= \"Administrators\" ,\n         }\n       },\n    }\n</code></pre></p> </li> </ul> <p>3. Notification Subscriptions</p> <ul> <li> <p>Syntax <pre><code>   notifications_subscriptions = {\n      ## key - Is a unique value to reference the resources respectively\n     key = {\n          # Required\n          compartment_id           = string\n          endpoint                 = string\n          protocol                 = string\n          topic_id                 = string\n\n          # Optional\n          defined_tags             = map\n          freeform_tags            = map\n      }\n   }\n</code></pre></p> </li> <li> <p>Example <pre><code>  // Copyright (c) 2021, 2022, Oracle and/or its affiliates.\n  ############################\n  # ManagementServices\n  # Notifications_Subscriptions - tfvars\n  # Allowed Values:\n  # topic_id can be ocid or the key of notifications_topics (map)\n  # compartment_id can be the ocid or the name of the compartment hierarchy delimited by double hiphens \"--\"\n  # Example : compartment_id = \"ocid1.compartment.oc1..aaaaaaaahwwiefb56epvdlzfic6ah6jy3xf3c\" or compartment_id = \"Security--Prod\" where \"Security\" is the parent of \"Prod\" compartment\n  ############################\n  notifications_subscriptions = {\n   NetworkTopic_sub1 = {\n     subscription_name = \"NetworkTopic_sub1\"\n     compartment_id = \"Security\"\n     endpoint = \"abc@xyz.com\"\n     protocol = \"EMAIL\"\n     topic_id = \"NetworkTopic\"\n     defined_tags = {\n         \"Operations.os\"= \"Linux\" ,\n         \"Organization.department\"= \"Administrators\" ,\n     }\n   },\n   SecurityTopic_sub1 = {\n       subscription_name = \"SecurityTopic_sub1\"\n       compartment_id = \"Security\"\n       endpoint = \"abc@xyz.com\"\n       protocol = \"EMAIL\"\n       topic_id = \"SecurityTopic\"\n   },\n  }\n</code></pre></p> </li> </ul> <p>4. Events</p> <ul> <li> <p>Syntax <pre><code>  events = {\n      ## key - Is a unique value to reference the resources respectively\n      key = {\n          # Required\n          compartment_id           = string\n          event_name               = string\n          description              = string\n          is_enabled               = bool\n          condition                = string\n\n          # Optional\n          actions                  = [{ \n                 # Required\n                 action_type = string\n                 is_enabled  = string\n\n                 # Optional\n                 description = string\n                 function_id = string\n                 stream_id   = string\n                 topic_id    = string\n          }]\n          message_format           = string\n          defined_tags             = map\n          freeform_tags            = map\n     }\n  }\n</code></pre></p> </li> <li> <p>Example <pre><code>  // Copyright (c) 2021, 2022, Oracle and/or its affiliates.\n  ############################\n  # ManagementServices\n  # Events - tfvars\n  # Allowed Values:\n  # compartment_id can be the ocid or the name of the compartment hierarchy delimited by double hiphens \"--\"\n  # Example : compartment_id = \"ocid1.compartment.oc1..aaaaaaaahwwiefb56epvdlzfic6ah6jy3xf3c\" or compartment_id = \"Security--Prod\" where \"Security\" is the parent of \"Prod\" compartment\n  ############################\n  events = {\n      ## key - Is a unique value to reference the resources respectively\n     notify-on-budget-changes-rule = {\n         compartment_id = \"Security\"\n         event_name = \"notify-on-budget-changes-rule\"\n         is_enabled = true\n         description    = \"events rule to detect when cost resources such as budgets and financial tracking constructs are created, updated or deleted.\"\n         condition      = \"{\\\"eventType\\\":[\\\"com.oraclecloud.budgets.updatealertrule\\\",\\\"com.oraclecloud.budgets.deletealertrule\\\",\\\"com.oraclecloud.budgets.updatebudget\\\",\\\"com.oraclecloud.budgets.deletebudget\\\"],\\\"data\\\":{}}\"\n         actions        = [\n                        {\n                 action_type = \"ONS\"\n                 is_enabled = true\n                 topic_id = \"BudgetTopic\"\n                 description = \"Sends notification via ONS\"\n                },\n         ]\n         defined_tags = {\n             \"Operations.os\"= \"Linux\" ,\n             \"Organization.department\"= \"Administrators\" ,\n         }\n     },\n     notify-on-compute-changes-rule = {\n         compartment_id = \"Security\"\n         event_name = \"notify-on-compute-changes-rule\"\n         is_enabled = true\n         description    = \"events rule to detect when compute related resources are created, updated or deleted.\"\n         condition      = \"{\\\"eventType\\\":[\\\"com.oraclecloud.computeapi.terminateinstance.begin\\\"],\\\"data\\\":{}}\"\n         actions        = [\n                        {\n                 action_type = \"ONS\"\n                 is_enabled = true\n                 topic_id = \"ComputeTopic\"\n                 description = \"Sends notification via ONS\"\n                },\n         ]\n     },\n  }\n</code></pre></p> </li> </ul>"},{"location":"terraform/network/","title":"auto.tfvars syntax for Network Module","text":"<p>These are the syntax and sample format for providing inputs to the modules via *.auto.tfvars files. \"key\" must be unique to every resource that is created. Comments preceed with ##.</p> <p>Points to Note: - To associate Route Table to the Gateways like IGW, SGW etc, please make sure to have the route tables created in the OCI tenancy first, and then edit the auto.tfvars file to add the route table keys/ocids to the gateway resources as per need.Uncomment the parameter - route_table_id for the respective gateway module calls in network.tf and main.tf files.</p> <p>1. Virtual Cloud Networks (VCNs)</p> <ul> <li>Syntax</li> </ul> <pre><code>    vcns = {\n        ## key - Is a unique value to reference the resources respectively\n        key = {\n            # Required\n            compartment_id = string\n\n            # Optional\n            cidr_blocks    = list\n            display_name   = string\n            dns_label      = string\n            byoipv6cidr_details = [{\n                byoipv6range_id = string\n                ipv6cidr_block = string\n            }]\n            is_ipv6enabled = bool\n            defined_tags   = map\n            freeform_tags  = map\n            ipv6private_cidr_blocks = list\n            is_oracle_gua_allocation_enabled = bool\n        },\n    }\n</code></pre> <ul> <li>Example <pre><code>    ############################\n    # Network\n    # Major Objects - VCNs, IGW, NGW, SGW, LPG, DRG - tfvars\n    # Allowed Values:\n    # compartment_id can be the ocid or the name of the compartment hierarchy delimited by double hiphens \"--\"\n    # Example : compartment_id = \"ocid1.compartment.oc1..aaaaaaaahwwiefb56epvdlzfic6ah6jy3xf3c\" or compartment_id = \"Network-root-cpt--Network\" where \"Network-root-cpt\" is the parent of \"Network\" compartment\n    ############################\n    vcns = {\n          vcn3 = {\n                # Required\n                compartment_id = \"Network\"\n\n                # Optional\n                cidr_blocks      = [\"10.3.0.0/16\"]\n                display_name     = \"vcn3\"\n                dns_label      = \"vcn3\"\n                defined_tags = {\n                        \"Oracle-Tags.CreatedOn\"= \"2022-09-06T07:27:40.005Z\" ,\n                        \"Oracle-Tags.CreatedBy\"= \"oracleidentitycloudservice/abc@oracle.com\"\n                }\n              },\n          vcn2 = {\n                # Required\n                compartment_id = \"Network\"\n\n                # Optional\n                cidr_blocks      = [\"10.2.0.0/16\"]\n                display_name     = \"vcn2\"\n                dns_label      = \"vcn2\"\n                defined_tags = {\n                        \"Oracle-Tags.CreatedOn\"= \"2022-09-06T07:27:39.936Z\" ,\n                        \"Oracle-Tags.CreatedBy\"= \"oracleidentitycloudservice/abc@oracle.com\"\n                }\n              },\n          vcn1 = {\n                # Required\n                compartment_id = \"Network\"\n\n                # Optional\n                cidr_blocks      = [\"10.1.0.0/16\"]\n                display_name     = \"vcn1\"\n                dns_label      = \"vcn1\"\n                defined_tags = {\n                        \"Oracle-Tags.CreatedOn\"= \"2022-09-06T07:27:39.937Z\" ,\n                        \"Oracle-Tags.CreatedBy\"= \"oracleidentitycloudservice/abc@oracle.com\"\n                }\n              },\n    }\n</code></pre></li> </ul> <p>2. Internet Gateways (IGWs)</p> <ul> <li>Syntax</li> </ul> <pre><code>    igws = {\n        ## key - Is a unique value to reference the resources respectively\n        key = {\n            # Required\n            compartment_id = string\n            vcn_id         = string\n\n            # Optional\n            enable_igw     = bool\n            igw_name       = string\n            defined_tags   = map\n            freeform_tags  = map\n            route_table_id = string\n    }\n</code></pre> <ul> <li>Example <pre><code>    ############################\n    # Network\n    # Major Objects - IGW - tfvars\n    # Allowed Values:\n    # vcn_id can be the ocid or the key of vcns (map)\n    # compartment_id can be the ocid or the name of the compartment hierarchy delimited by double hiphens \"--\"\n    # Example : compartment_id = \"ocid1.compartment.oc1..aaaaaaaahwwiefb56epvdlzfic6ah6jy3xf3c\" or compartment_id = \"Network-root-cpt--Network\" where \"Network-root-cpt\" is the parent of \"Network\" compartment\n    ############################\n    igws = {\n        vcn1_igw = {\n              # Required\n              compartment_id = \"Network\"\n              vcn_id     = \"vcn1\"\n\n              # Optional\n              igw_name   = \"igw\"\n              defined_tags = {\n                      \"Oracle-Tags.CreatedOn\"= \"2022-09-06T07:27:39.937Z\" ,\n                      \"Oracle-Tags.CreatedBy\"= \"oracleidentitycloudservice/abc@oracle.com\"\n              }\n        },\n    }\n</code></pre></li> </ul> <p>3. Network Address Translation Gateways (NGWs)</p> <ul> <li>Syntax</li> </ul> <pre><code>    ngws = {\n          ## key - Is a unique value to reference the resources respectively\n          key = {\n              # Required\n              compartment_id = string\n              vcn_id         = string\n\n              # Optional\n              ngw_name       = string\n              public_ip_id   = string\n              block_traffic  = bool\n              defined_tags   = map\n              freeform_tags  = map\n              route_table_id = string\n          }\n    }\n</code></pre> <ul> <li>Example</li> </ul> <pre><code>  ############################\n  # Network\n  # Major Objects - NGW - tfvars\n  # Allowed Values:\n  # vcn_id can be the ocid or the key of vcns (map)\n  # compartment_id can be the ocid or the name of the compartment hierarchy delimited by double hiphens \"--\"\n  # Example : compartment_id = \"ocid1.compartment.oc1..aaaaaaaahwwiefb56epvdlzfic6ah6jy3xf3c\" or compartment_id = \"Network-root-cpt--Network\" where \"Network-root-cpt\" is the parent of \"Network\" compartment\n  ############################\n  ngws = {\n        ## key - Is a unique value to reference the resources respectively\n        vcn1_ngw = {\n            # Required\n            compartment_id = \"Network\"\n            vcn_id         = \"vcn1\"\n\n            # Optional\n            ngw_name       = \"vcn1_ngw\"\n            block_traffic  = false\n        },\n\n        vcn2_ngw = {\n            # Required\n            compartment_id = \"Network\"\n            vcn_id         = \"vcn2\"\n\n            # Optional\n            ngw_name       = \"vcn2_ngw\"\n            defined_tags = {\n                  \"Oracle-Tags.CreatedOn\"= \"2022-09-06T07:27:39.937Z\" ,\n                  \"Oracle-Tags.CreatedBy\"= \"oracleidentitycloudservice/abc@oracle.com\"\n            }\n        }\n  }\n</code></pre> <p>4. Service Gateways (SGWs)</p> <ul> <li>Syntax</li> </ul> <pre><code>    sgws = {\n          ## key - Is a unique value to reference the resources respectively\n          key = {\n              # Required\n              compartment_id = string\n              vcn_id         = string\n\n              # Optional\n              service        = string         # Possible values for service: \"\", \"all\", \"objectstorage\"\n              sgw_name       = string\n              defined_tags   = map\n              freeform_tags  = map\n              route_table_id = string\n          }\n    }\n</code></pre> <ul> <li>Example <pre><code>  ############################\n  # Network\n  # Major Objects - SGW - tfvars\n  # Allowed Values:\n  # vcn_id can be the ocid or the key of vcns (map)\n  # compartment_id can be the ocid or the name of the compartment hierarchy delimited by double hiphens \"--\"\n  # Example : compartment_id = \"ocid1.compartment.oc1..aaaaaaaahwwiefb56epvdlzfic6ah6jy3xf3c\" or compartment_id = \"Network-root-cpt--Network\" where \"Network-root-cpt\" is the parent of \"Network\" compartment\n  ############################\n  sgws = {\n         vcn1_sgw = {\n              # Required\n              compartment_id = \"Network\"\n\n              # Optional\n              vcn_id         = \"vcn1\"\n              sgw_name       = \"vcn1_sgw\"\n              freeform_tags  = {\n                  \"Environment\" = \"Dev\",\n                  \"Application\" = \"SPX\"\n              }\n         },\n         vcn2_sgw = {\n              # Required\n              compartment_id = \"Network\"\n\n              # Optional\n              vcn_id         = \"vcn2\"\n              sgw_name       = \"vcn2_sgw\"\n         },\n  }\n</code></pre></li> </ul> <p>5. Dynamic Routing Gateways (DRGs)</p> <ul> <li>Syntax</li> </ul> <pre><code>    drgs = {\n          ## key - Is a unique value to reference the resources respectively\n          key = {\n              # Required\n              compartment_id    = string\n\n              # Optional\n              display_name      = string\n              defined_tags      = map\n              freeform_tags     = map\n          },\n    }\n</code></pre> <ul> <li>Example <pre><code>    ############################\n    # Network\n    # Major Objects - DRG - tfvars\n    # Allowed Values:\n    # compartment_id can be the ocid or the name of the compartment hierarchy delimited by double hiphens \"--\"\n    # Example : compartment_id = \"ocid1.compartment.oc1..aaaaaaaahwwiefb56epvdlzfic6ah6jy3xf3c\" or compartment_id = \"Network-root-cpt--Network\" where \"Network-root-cpt\" is the parent of \"Network\" compartment\n    ############################\n    drgs = {\n         vcn1_drg = {\n              compartment_id     = \"Network\"\n              display_name       = \"vcn1_drg\"\n         },\n         vcn2_drg = {\n              compartment_id     = \"Network\"\n              display_name       = \"vcn2_drg\"\n              defined_tags = {\n                      \"Oracle-Tags.CreatedOn\"= \"2022-09-06T07:27:39.937Z\" ,\n                      \"Oracle-Tags.CreatedBy\"= \"oracleidentitycloudservice/abc@oracle.com\"\n              } \n         }\n    }\n</code></pre></li> </ul> <p>6. Dynamic Routing Gateway Attachements (DRG Attachments)</p> <ul> <li>Syntax</li> </ul> <pre><code>    drg_attachments = {\n          ## key - Is a unique value to reference the resources respectively\n          key = {\n              # Required\n              drg_id            = string\n              display_name      = string\n\n              # Optional\n              # Required only for DRG V2; Set drg_route_table_id = \"\" and network_details = [] when using DRG V1\n              drg_route_table_id = string \n              network_details    = [{\n                  id                 = string\n                  type               = string\n                  vcn_route_table_id = string\n              }]\n\n              # Required only for DRG v1; Set route_table_id = \"\" and vcn_id = \"\" when using DRG V2\n              route_table_id     = string \n              vcn_id             = string\n\n              # Optional; set them to {} when not needed; example-&gt; defined_tags = {}\n              defined_tags       = map\n              freeform_tags      = map\n          },\n    }\n</code></pre> <ul> <li>Example <pre><code>  ############################\n  # Network\n  # Major Objects - DRG Attachment - tfvars\n  # Allowed Values:\n  # vcn_id can be the ocid or the key of vcns (map)\n  ############################\n  drg_attachments = {\n        vcn2_drg_attach = {\n\n              # Required\n              drg_id = \"vcn2_drg\"\n              display_name = \"vcn2_drg_attach\"\n\n              # Optional\n              # DRG v2\n              drg_route_table_id = \"vcn2_drg_rt\"\n              # Required only for DRG V2; Set drg_route_table_id = \"\" and network_details = [] when using DRG V1\n              network_details = [{\n              id = \"Svcs\"\n              type = \"VCN\"\n              vcn_route_table_id = \"Svcs_Route-Table-associated-with-vcn2_drg\"\n              }]\n              # Set DRGv1 params to null\n              route_table_id =\"\"\n              vcn_id = \"\"\n              defined_tags = {\n                      \"Oracle-Tags.CreatedOn\"= \"2022-02-28T05:46:42.914Z\" ,\n                      \"Oracle-Tags.CreatedBy\"= \"abc@oracle.com\"\n              }\n              freeform_tags = {}\n        },\n  }\n</code></pre></li> </ul> <p>7. DRG Route Distributions</p> <ul> <li>Syntax</li> </ul> <pre><code>  drg_route_distributions = {\n      ## key - Is a unique value to reference the resources respectively\n      key = {\n          # Required\n          distribution_type = string\n          drg_id            = string\n\n          # Optional\n          defined_tags      = map\n          freeform_tags     = map\n          display_name      = string\n      }\n  }   \n</code></pre> <ul> <li>Example <pre><code>  #################################\n  # Network\n  # DRG Route Distributions - tfvars\n  # Allowed Values:\n  # drg_id can be the ocid or the key of drgs (map)\n  #################################\n  drg_route_distributions = {\n      # DRG Distribution for Region - ashburn\n      vcn2_drg_import_routes_01 = {\n            distribution_type = \"IMPORT\"\n            drg_id = \"vcn2_drg\"\n            display_name = \"vcn2_drg_import_routes_01\"\n            defined_tags = {\n                \"Oracle-Tags.CreatedOn\"= \"2022-02-28T05:46:42.914Z\" ,\n                \"Oracle-Tags.CreatedBy\"= \"abc@oracle.com\"\n            }\n            freeform_tags = {}\n      },\n      vcn1_drg_import_routes_01 = {\n            distribution_type = \"IMPORT\"\n            drg_id = \"vcn1_drg\"\n            display_name = \"vcn1_drg_import_routes_01\"\n            defined_tags = {\n                \"Oracle-Tags.CreatedOn\"= \"2022-02-28T05:46:42.914Z\" ,\n                \"Oracle-Tags.CreatedBy\"= \"abc@oracle.com\"\n            }\n            freeform_tags = {}\n      },\n  }\n</code></pre></li> </ul> <p>8. DRG Route Distribution Statements</p> <ul> <li>Syntax</li> </ul> <pre><code>  drg_route_distribution_statements = {\n      ## key - Is a unique value to reference the resources respectively\n      key = {\n          # Required\n          drg_route_distribution_id = string\n          action            = string\n\n          # Optional\n          match_criteria = [{\n              # Required\n              match_type        = string\n\n              # Optional\n              attachment_type   = string\n              drg_attachment_id = string\n          }]\n          priority      = map\n          action        = map\n      }\n  }\n</code></pre> <ul> <li>Example <pre><code>  ##########################################\n  # Module Block - Network\n  # Create DRG Route Distribution Statements\n  # Allowed Values:\n  # drg_route_distribution_id can be the ocid or the key of drg_route_distributions (map)\n  ##########################################\n  drg_route_distribution_statements = {\n      # DRG Distribution Statement for Region - ashburn\n      vcn2_drg_import_route_01_statement1 = {\n            drg_route_distribution_id = \"vcn2_drg_import_routes_01\"\n            match_criteria = [\n            {\n            match_type = \"DRG_ATTACHMENT_TYPE\"\n            attachment_type = \"VCN\"\n            drg_attachment_id = \"\"\n            },\n            ]\n            priority = \"1\"\n            action = \"ACCEPT\"\n      },\n      vcn1_drg_import_routes_01_statement1 = {\n            drg_route_distribution_id = \"vcn1_drg_import_routes_01\"\n            match_criteria = [\n            {\n            match_type = \"DRG_ATTACHMENT_TYPE\"\n            attachment_type = \"IPSEC_TUNNEL\"\n            drg_attachment_id = \"\"\n            },\n            ]\n            priority = \"2\"\n            action = \"ACCEPT\"\n      },\n  }\n</code></pre></li> </ul> <p>9. DRG Route Tables</p> <ul> <li>Syntax</li> </ul> <pre><code>  drg_route_tables = {\n      ## key - Is a unique value to reference the resources respectively\n      key = {\n          # Required\n          drg_id            = string\n          display_name      = string\n\n          # Optional\n          import_drg_route_distribution_id = string\n          is_ecmp_enabled                  = bool\n          # set the tags to {} when not needed; example-&gt; defined_tags = {}\n          defined_tags                     = map\n          freeform_tags                    = map\n      }\n  }\n</code></pre> <ul> <li>Example <pre><code>  #################################\n  # Network\n  # DRG Route Tables - tfvars\n  # Allowed Values:\n  # drg_id can be ocid or the key of drgs (map)\n  #################################\n  drg_route_tables = {\n      # DRG Route Tables for Region - ashburn\n      # Start of #ashburn_vcn1_drg_static# #\n      vcn1_drg_static = {\n            drg_id = \"vcn1_drg\"\n            display_name = \"vcn1_drg_static\"\n            import_drg_route_distribution_id = \"\"\n            is_ecmp_enabled = \"false\"\n            defined_tags = {}\n            freeform_tags = {}\n      },\n      # End of #ashburn_vcn1_drg_static# #\n      # Start of #ashburn_vcn2_drg_static# #\n      vcn2_drg_static = {\n            drg_id = \"vcn2_drg\"\n            display_name = \"vcn2_drg_static\"\n            import_drg_route_distribution_id = \"vcn2_drg_import_routes_01\"\n            is_ecmp_enabled = \"false\"\n             defined_tags = {\n                \"Oracle-Tags.CreatedOn\"= \"2022-02-28T05:46:42.914Z\" ,\n                \"Oracle-Tags.CreatedBy\"= \"abc@oracle.com\"\n            }\n            freeform_tags = {}\n      },\n  }\n</code></pre></li> </ul> <p>10. DRG Route Rules</p> <ul> <li>Syntax</li> </ul> <pre><code>  drg_route_rules = {\n      ## key - Is a unique value to reference the resources respectively\n      key = {\n          # Required\n          drg_route_table_id = string\n          destination        = string\n          destination_type   = string\n          next_hop_drg_attachment_id = string\n      }\n  }\n</code></pre> <ul> <li>Example <pre><code>  #################################\n  # Network\n  # DRG Route Rules - tfvars\n  # Allowed Values:\n  # drg_route_table_id and next_hop_drg_attachment_id can be the ocid or the key of drg_route_tables (map) and the key of drg_attachments (map) respectively\n  #################################\n  drg_route_rules = {\n      # DRG Route Rules for Region - ashburn\n      vcn1_drg_static_route_rule1 = {\n              #Required\n              drg_route_table_id = \"vcn1_drg_static\"\n              destination = \"10.0.8.0/23\"\n              destination_type = \"CIDR_BLOCK\"\n              next_hop_drg_attachment_id = \"vcn1_drg_attach\"\n      },\n      vcn1_drg_static_route_rule2 = {\n              #Required\n              drg_route_table_id = \"vcn1_drg_static\"\n              destination = \"10.0.4.0/22\"\n              destination_type = \"CIDR_BLOCK\"\n              next_hop_drg_attachment_id = \"vcn1_drg_attach2\"\n      },\n  }\n</code></pre></li> </ul> <p>11. Subnets</p> <ul> <li>Syntax</li> </ul> <pre><code>    subnets = {\n        ## key - Is a unique value to reference the resources respectively\n        key = {\n            # Required\n            compartment_id             = string\n            vcn_id                     = string\n            cidr_block                 = string\n\n            # Optional\n            display_name               = string\n            dns_label                  = string\n            ipv6cidr_block             = string\n            defined_tags               = map\n            freeform_tags              = map\n            prohibit_internet_ingress  = string\n            prohibit_public_ip_on_vnic = string\n            availability_domain        = string\n            dhcp_options_id            = string\n            route_table_id             = string\n            security_list_ids          = list\n        }\n    }\n</code></pre> <ul> <li>Example <pre><code>  #############################\n  # Network\n  # Major Objects - Subnets - tfvars\n  # Allowed Values:\n  # vcn_id, route_table_id, dhcp_options_id can be the ocid or the key of vcns (map), route_tables (map) and dhcp_options (map) respectively\n  # security_list_ids can be a list of ocids or the key of security_lists (map)\n  # compartment_id can be the ocid or the name of the compartment hierarchy delimited by double hiphens \"--\"\n  # Example : compartment_id = \"ocid1.compartment.oc1..aaaaaaaahwwiefb56epvdlzfic6ah6jy3xf3c\" or compartment_id = \"Network-root-cpt--Network\" where \"Network-root-cpt\" is the parent of \"Network\" compartment\n  #############################\n  subnets = {\n      vcn1_subnet1 = {\n          # Required\n          cidr_block                 = \"10.201.4.0/28\"\n          compartment_id             = \"Network\"\n          vcn_id                     = \"vcn1\"\n\n          # Optional\n          display_name               = \"subnet1\"\n          prohibit_public_ip_on_vnic = \"true\"\n          route_table_id             = \"vcn1-hub-rt\"\n          dns_label                  = \"phxvcnosubnetdn\"\n          dhcp_options_id            = \"vcn1-hub-dhcp\"\n          security_list_ids          = [\"vcn1-hub-sl\"]\n          freeform_tags              = {\n                  \"Environment\" = \"Dev\",\n                  \"Application\" = \"SPX\"\n          }\n        },\n      vcn2_subnet1 = {\n          # Required\n          cidr_block                 = \"10.201.4.0/28\"\n          compartment_id             = \"Network\"\n          vcn_id                     = \"vcn2\"\n\n          # Optional\n          display_name               = \"subnet1\"\n          prohibit_public_ip_on_vnic = \"true\"\n          route_table_id             = \"vcn2-hub-rt\"\n          dns_label                  = \"phxvcntsubnetdn\"\n          dhcp_options_id            = \"vcn2-hub-dhcp\"\n          security_list_ids          = [\"vcn1-hub-sl\"]\n        },\n    }\n</code></pre></li> </ul> <p>12. Security Lists (SLs)</p> <ul> <li>Syntax</li> </ul> <pre><code>    seclists = {\n          ## key - Is a unique value to reference the resources respectively\n          key = {\n              # Required\n              compartment_id = string\n              vcn_id         = string\n\n              # Optional\n              display_name   = string\n              defined_tags   = map\n              freeform_tags  = map\n              ingress_sec_rules = [{\n                protocol    = string\n                stateless   = string\n                description = string\n                source      = string\n                source_type = string\n                options     = {\n                    all = [] # for protocol = all\n                    icmp = [{\n                        type = string\n                        code = number\n                    }] \n                    (or)\n                    icmp = [] # for all ICMP option\n                    udp = [{\n                        destination_port_range_max = string\n                        destination_port_range_min = string\n\n                        source_port_range_max = string\n                        source_port_range_min = string\n                    }]\n                    (or)\n                    udp = [] # for all UDP option\n                    tcp = [{\n                        destination_port_range_max = string\n                        destination_port_range_min = string\n\n                        source_port_range_max = string\n                        source_port_range_min = string\n                    }]\n                    (or)\n                    tcp = [] # for all TCP option\n                }\n              }]\n              egress_sec_rules = [{\n                protocol         = string\n                stateless        = string\n                description      = string\n                destination      = string\n                destination_type = string\n                options     = {\n                    all = []\n                    icmp = [{\n                        type = string\n                        code = number\n                    }] \n                    (or)\n                    icmp = [] # for all ICMP option\n                    udp = [{\n                        destination_port_range_max = string\n                        destination_port_range_min = string\n\n                        source_port_range_max = string\n                        source_port_range_min = string\n                    }]\n                    (or)\n                    udp = [] # for all UDP option\n                    tcp = [{\n                        destination_port_range_max = string\n                        destination_port_range_min = string\n\n                        source_port_range_max = string\n                        source_port_range_min = string\n                    }]\n                    (or)\n                    tcp = [] # for all TCP option\n                }\n              }]\n          }\n    }\n</code></pre> <ul> <li>Example <pre><code>  // Copyright (c) 2021, 2022, Oracle and/or its affiliates.\n  ############################\n  # Network\n  # Major Objects - Security List - tfvars\n  # Allowed Values:\n  # vcn_id can be the ocid or the key of vcns (map)\n  # compartment_id can be the ocid or the name of the compartment hierarchy delimited by double hiphens \"--\"\n  # Example : compartment_id = \"ocid1.compartment.oc1..aaaaaaaahwwiefb56epvdlzfic6ah6jy3xf3c\" or compartment_id = \"Network-root-cpt--Network\" where \"Network-root-cpt\" is the parent of \"Network\" compartment\n  ############################\n  seclists = {\n\n    # Seclist map #\n    # Start of #phoenix_vcn3_subnet3-1# #\n    vcn3_subnet3-1 = {\n          compartment_id = \"Network\"\n          vcn_id     = \"vcn3\"\n          display_name     = \"subnet3-1\"\n          ingress_sec_rules = [\n               {  #vcn3_subnet3-1_10.3.1.0/24#\n                  protocol = \"all\"\n                  source = \"10.3.1.0/24\"\n                  options = {\n                      all = []\n                  }\n               },\n               {  #vcn3_subnet3-1_10.3.1.0/24#\n                  protocol = \"6\"\n                  source = \"10.3.2.0/24\"\n                  options = {\n                      tcp= [{\n                          destination_port_range_max = \"22\"\n                          destination_port_range_min = \"22\"\n\n                          source_port_range_max = \"22\"\n                          source_port_range_min = \"22\"\n                      }]\n                  }\n               },\n               {  #vcn3_subnet3-1_10.3.1.0/24#\n                  protocol = \"17\"\n                  source = \"10.3.1.0/24\"\n                  options = {\n                    udp = [{\n                        destination_port_range_max = \"7003\"\n                        destination_port_range_min = \"7003\"\n                    }]\n                  }\n               },\n  ####ADD_NEW_INGRESS_SEC_RULES #phoenix_vcn3_subnet3-1# ####\n          ]\n          egress_sec_rules = [\n               {\n                  protocol = \"all\"\n                  destination = \"0.0.0.0/0\"\n                  options = {\n                      all = []\n                  }\n               },\n  ####ADD_NEW_EGRESS_SEC_RULES #phoenix_vcn3_subnet3-1# ####\n          ]\n          defined_tags = {\n                  \"Oracle-Tags.CreatedOn\"= \"2022-09-06T07:27:48.895Z\" ,\n                  \"Oracle-Tags.CreatedBy\"= \"oracleidentitycloudservice/suruchi.singla@oracle.com\"\n          }\n        },\n    # End of #phoenix_vcn3_subnet3-1# #\n    # Start of #phoenix_vcn3_subnet3-2# #\n    vcn3_subnet3-2 = {\n          compartment_id = \"Network\"\n          vcn_id     = \"vcn3\"\n          display_name     = \"subnet3-2\"\n          ingress_sec_rules = [\n               {  #vcn3_subnet3-2_10.3.2.0/24#\n                  protocol = \"6\"\n                  source = \"0.0.0.0/0\"\n                  options = {\n                      icmp= [{\n                        type = \"2\"\n                        code = \"-1\"\n                      }]\n                  }\n               },\n  ####ADD_NEW_INGRESS_SEC_RULES #phoenix_vcn3_subnet3-2# ####\n          ]\n          egress_sec_rules = [\n               {\n                  protocol = \"all\"\n                  destination = \"0.0.0.0/0\"\n                  options = {\n                      all = []\n                  }\n               },\n  ####ADD_NEW_EGRESS_SEC_RULES #phoenix_vcn3_subnet3-2# ####\n          ]\n          defined_tags = {\n                  \"Oracle-Tags.CreatedOn\"= \"2022-09-06T07:27:48.895Z\" ,\n                  \"Oracle-Tags.CreatedBy\"= \"oracleidentitycloudservice/suruchi.singla@oracle.com\"\n          }\n        },\n    # End of #phoenix_vcn3_subnet3-2# #\n  }\n</code></pre></li> </ul> <p>13. Default Security Lists (Default SLs)</p> <ul> <li>Syntax</li> </ul> <pre><code>    default_seclists = {\n          ## key - Is a unique value to reference the resources respectively\n          key = {\n              # Required\n              compartment_id = string\n              vcn_id         = string\n\n              # Optional\n              display_name   = string\n              defined_tags   = map\n              freeform_tags  = map\n              ingress_sec_rules = [{\n                protocol    = string\n                stateless   = string\n                description = string\n                source      = string\n                source_type = string\n                options     = {\n                    all = [] # for protocol = all\n                    icmp = [{\n                        type = string\n                        code = number\n                    }] \n                    (or)\n                    icmp = [] # for all ICMP option\n                    udp = [{\n                        destination_port_range_max = string\n                        destination_port_range_min = string\n\n                        source_port_range_max = string\n                        source_port_range_min = string\n                    }]\n                    (or)\n                    udp = [] # for all UDP option\n                    tcp = [{\n                        destination_port_range_max = string\n                        destination_port_range_min = string\n\n                        source_port_range_max = string\n                        source_port_range_min = string\n                    }]\n                    (or)\n                    tcp = [] # for all TCP option\n                }\n              }]\n              egress_sec_rules = [{\n                protocol         = string\n                stateless        = string\n                description      = string\n                destination      = string\n                destination_type = string\n                options     = {\n                    all = []\n                    icmp = [{\n                        type = string\n                        code = number\n                    }] \n                    (or)\n                    icmp = [] # for all ICMP option\n                    udp = [{\n                        destination_port_range_max = string\n                        destination_port_range_min = string\n\n                        source_port_range_max = string\n                        source_port_range_min = string\n                    }]\n                    (or)\n                    udp = [] # for all UDP option\n                    tcp = [{\n                        destination_port_range_max = string\n                        destination_port_range_min = string\n\n                        source_port_range_max = string\n                        source_port_range_min = string\n                    }]\n                    (or)\n                    tcp = [] # for all TCP option\n                }\n              }]\n          }\n    }\n</code></pre> <ul> <li>Example</li> </ul> <pre><code>  // Copyright (c) 2021, 2022, Oracle and/or its affiliates.\n  ############################\n  # Network\n  # Major Objects - Default Security List - tfvars\n  # Allowed Values:\n  # vcn_id can be the ocid or the key of vcns (map)\n  # compartment_id can be the ocid or the name of the compartment hierarchy delimited by double hiphens \"--\"\n  # Example : compartment_id = \"ocid1.compartment.oc1..aaaaaaaahwwiefb56epvdlzfic6ah6jy3xf3c\" or compartment_id = \"Network-root-cpt--Network\" where \"Network-root-cpt\" is the parent of \"Network\" compartment\n  ############################\n  default_seclists = {\n\n    # Seclist map #\n    # Start of #phoenix_vcn3_subnet3-1# #\n    vcn3_subnet3-1 = {\n          compartment_id = \"Network\"\n          vcn_id     = \"vcn3\"\n          display_name     = \"Default Security List for subnet3-1\"\n          ingress_sec_rules = [\n               {  #vcn3_subnet3-1_10.3.1.0/24#\n                  protocol = \"all\"\n                  source = \"10.3.1.0/24\"\n                  options = {\n                      all = []\n                  }\n               },\n               {  #vcn3_subnet3-1_10.3.1.0/24#\n                  protocol = \"6\"\n                  source = \"10.3.2.0/24\"\n                  options = {\n                      tcp= [{\n                          destination_port_range_max = \"22\"\n                          destination_port_range_min = \"22\"\n\n                          source_port_range_max = \"22\"\n                          source_port_range_min = \"22\"\n                      }]\n                  }\n               },\n               {  #vcn3_subnet3-1_10.3.1.0/24#\n                  protocol = \"17\"\n                  source = \"10.3.1.0/24\"\n                  options = {\n                    udp = [{\n                        destination_port_range_max = \"7003\"\n                        destination_port_range_min = \"7003\"\n                    }]\n                  }\n               },\n  ####ADD_NEW_INGRESS_SEC_RULES #phoenix_vcn3_subnet3-1# ####\n          ]\n          egress_sec_rules = [\n               {\n                  protocol = \"all\"\n                  destination = \"0.0.0.0/0\"\n                  options = {\n                      all = []\n                  }\n               },\n  ####ADD_NEW_EGRESS_SEC_RULES #phoenix_vcn3_subnet3-1# ####\n          ]\n          defined_tags = {\n                  \"Oracle-Tags.CreatedOn\"= \"2022-09-06T07:27:48.895Z\" ,\n                  \"Oracle-Tags.CreatedBy\"= \"oracleidentitycloudservice/suruchi.singla@oracle.com\"\n          }\n        },\n    # End of #phoenix_vcn3_subnet3-1# #\n    # Start of #phoenix_vcn3_subnet3-2# #\n    vcn3_subnet3-2 = {\n          compartment_id = \"Network\"\n          vcn_id     = \"vcn3\"\n          display_name     = \"Default Security List for subnet3-2\"\n          ingress_sec_rules = [\n               {  #vcn3_subnet3-2_10.3.2.0/24#\n                  protocol = \"6\"\n                  source = \"0.0.0.0/0\"\n                  options = {\n                      icmp= [{\n                        type = \"2\"\n                        code = \"-1\"\n                      }]\n                  }\n               },\n  ####ADD_NEW_INGRESS_SEC_RULES #phoenix_vcn3_subnet3-2# ####\n          ]\n          egress_sec_rules = [\n               {\n                  protocol = \"all\"\n                  destination = \"0.0.0.0/0\"\n                  options = {\n                      all = []\n                  }\n               },\n  ####ADD_NEW_EGRESS_SEC_RULES #phoenix_vcn3_subnet3-2# ####\n          ]\n          defined_tags = {\n                  \"Oracle-Tags.CreatedOn\"= \"2022-09-06T07:27:48.895Z\" ,\n                  \"Oracle-Tags.CreatedBy\"= \"oracleidentitycloudservice/suruchi.singla@oracle.com\"\n          }\n        },\n    # End of #phoenix_vcn3_subnet3-2# #\n    # Start of #phoenix_vcn3_subnet4-2# #\n  Customer1Zone_Default-Security-List-for-Customer1Zone = {\n        compartment_id = \"Network\"\n        vcn_id     = \"vcn3\"\n        display_name     = \"Default Security List for subnet4-2\"\n        ingress_sec_rules = [\n        ####ADD_NEW_INGRESS_SEC_RULES #phoenix_vcn3_Default-Security-List-for-subnet4-2# ####\n        ]\n        egress_sec_rules = [\n        ####ADD_NEW_EGRESS_SEC_RULES #phoenix_vcn3_Default-Security-List-for-subnet4-2# ####\n        ]\n        defined_tags = {\n                \"Oracle-Tags.CreatedOn\"= \"2022-02-28T05:46:42.861Z\" ,\n                \"Oracle-Tags.CreatedBy\"= \"john.saleh@oracle.com\"\n        }\n        freeform_tags = {}\n      },\n  # End of #phoenix_vcn3_subnet4-2# #\n  }\n</code></pre> <p>14. Route Tables (RTs)</p> <ul> <li>Syntax</li> </ul> <pre><code>  route_tables = {\n        ## key - Is a unique value to reference the resources respectively\n        key = {\n\n            # Required\n            compartment_id   = string\n            vcn_id           = string\n            display_name     = string\n\n            # Optional\n            # IGW Rules\n            route_rules_igw  = [] # When there are no IGW Rules\n            (OR)\n            route_rules_igw  = [{\n                  network_entity_id = string\n                  description       = string\n                  destination       = string\n                  destination_type  = string\n            }]\n\n            # SGW Rules\n            route_rules_sgw  = [] # When there are no SGW Rules\n            (OR)\n            route_rules_sgw  = [{\n                  network_entity_id = string\n                  description       = string\n                  destination       = string\n                  destination_type  = string\n            }]\n\n            # NGW Rules\n            route_rules_ngw  = [] # When there are no NGW Rules\n            (OR)\n            route_rules_ngw  = [{\n                  network_entity_id = string\n                  description       = string\n                  destination       = string\n                  destination_type  = string\n            }]\n\n            # DRG Rules\n            route_rules_drg  = [] # When there are no DRG Rules\n            (OR)\n            route_rules_drg  = [{\n                  network_entity_id = string\n                  description       = string\n                  destination       = string\n                  destination_type  = string\n            }]\n\n            # LPG Rules\n            route_rules_lpg  = [] # When there are no LPG Rules\n            (OR)\n            route_rules_lpg  = [{\n                  network_entity_id = string\n                  description       = string\n                  destination       = string\n                  destination_type  = string\n            }]\n\n            # IP Rules\n            route_rules_ip   = [] # When there are no IP Rules\n            (OR)\n            route_rules_ip   = [{\n                  network_entity_id = string\n                  description       = string\n                  destination       = string\n                  destination_type  = string\n            }]\n            # set the tags to {} when not needed; example-&gt; defined_tags = {}\n            defined_tags     = map\n            freeform_tags    = map\n  }\n</code></pre> <ul> <li>Example <pre><code>  // Copyright (c) 2021, 2022, Oracle and/or its affiliates.\n  ############################\n  # Network\n  # Major Objects - Route Table - tfvars\n  # Allowed Values:\n  # vcn_id can be the ocid or the key of vcns (map)\n  # compartment_id can be the ocid or the name of the compartment hierarchy delimited by double hiphens \"--\"\n  # Example : compartment_id = \"ocid1.compartment.oc1..aaaaaaaahwwiefb56epvdlzfic6ah6jy3xf3c\" or compartment_id = \"Network-root-cpt--Network\" where \"Network-root-cpt\" is the parent of \"Network\" compartment\n  ############################\n\n  default_route_tables = {\n    # Route Table map #\n    # Start of #ashburn_vcn_app-subnet-rtable# #\n      vcn_app-subnet-rtable = {\n          # Required\n          compartment_id = \"fc-network-cmp\"\n          vcn_id     = \"vcn1\"\n          display_name     = \"vcn_app-subnet-rtable\"\n\n          # Optional\n          route_rules_igw = [\n      ####ADD_NEW_IGW_RULES #ashburn_vcn_app-subnet-rtable# ####\n          ]\n          route_rules_sgw = [\n      ####ADD_NEW_SGW_RULES #ashburn_vcn_app-subnet-rtable# ####\n          ]\n          route_rules_ngw = [\n                  ## Start Route Rule ashburn_vcn_app-subnet-rtable-natgw_0.0.0.0/0\n              {\n                    network_entity_id = \"vcn-natgw\"\n                    description       = \"\"\n                    destination       = \"0.0.0.0/0\"\n                    destination_type  = \"CIDR_BLOCK\"\n                   },\n              ## End Route Rule ashburn_vcn_app-subnet-rtable-natgw_0.0.0.0/0\n      ####ADD_NEW_NGW_RULES #ashburn_vcn_app-subnet-rtable# ####\n          ]\n          route_rules_drg = [\n                  ## Start Route Rule ashburn_vcn_app-subnet-rtable-drg_10.0.2.0/22\n              {\n                    network_entity_id = \"vcn-drg\"\n                    description       = \"\"\n                    destination       = \"10.0.2.0/22\"\n                    destination_type  = \"CIDR_BLOCK\"\n                   },\n              ## End Route Rule ashburn_vcn_app-subnet-rtable-drg_10.0.2.0/22\n      ####ADD_NEW_DRG_RULES #ashburn_vcn_app-subnet-rtable# ####\n          ]\n          route_rules_lpg = [\n      ####ADD_NEW_LPG_RULES #ashburn_vcn_app-subnet-rtable# ####\n          ]\n          route_rules_ip = [\n      ####ADD_NEW_IP_RULES #ashburn_vcn_app-subnet-rtable# ####\n          ]\n          defined_tags = {\n                  \"Oracle-Tags.CreatedOn\"= \"2022-08-23T15:03:30.750Z\" ,\n                  \"Oracle-Tags.CreatedBy\"= \"abc@oracle.com\"\n          }\n          freeform_tags = {}\n        },\n    # End of #ashburn_vcn_app-subnet-rtable# #\n    # Start of #ashburn_vcn_dmz-subnet-rtable# #\n      dmz-subnet-rtable = {\n          # Required\n          compartment_id = \"fc-network-cmp\"\n          vcn_id     = \"vcn2\"\n          display_name     = \"dmz-subnet-rtable\"\n\n          # Optional\n          route_rules_igw = [\n                  ## Start Route Rule ashburn_vcn_dmz-subnet-rtable-igw_0.0.0.0/0\n              {\n                    network_entity_id = \"vcn-igw\"\n                    description       = \"\"\n                    destination       = \"0.0.0.0/0\"\n                    destination_type  = \"CIDR_BLOCK\"\n                   },\n              ## End Route Rule ashburn_vcn_dmz-subnet-rtable-igw_0.0.0.0/0\n      ####ADD_NEW_IGW_RULES #ashburn_vcn_dmz-subnet-rtable# ####\n          ]\n          route_rules_sgw = [\n      ####ADD_NEW_SGW_RULES #ashburn_vcn_dmz-subnet-rtable# ####\n          ]\n          route_rules_ngw = [\n      ####ADD_NEW_NGW_RULES #ashburn_vcn_dmz-subnet-rtable# ####\n          ]\n          route_rules_drg = [\n                  ## Start Route Rule ashburn_vcn_dmz-subnet-rtable-drg_10.0.2.0/22\n              {\n                    network_entity_id = \"vcn-drg\"\n                    description       = \"\"\n                    destination       = \"10.0.2.0/22\"\n                    destination_type  = \"CIDR_BLOCK\"\n                   },\n              ## End Route Rule ashburn_vcn_dmz-subnet-rtable-drg_10.0.2.0/22\n              ## Start Route Rule ashburn_vcn_dmz-subnet-rtable-drg_10.3.2.0/23\n              {\n                    network_entity_id = \"vcn-drg\"\n                    description       = \"Route to Freight internal\"\n                    destination       = \"10.3.2.0/23\"\n                    destination_type  = \"CIDR_BLOCK\"\n                   },\n              ## End Route Rule ashburn_vcn_dmz-subnet-rtable-drg_10.3.2.0/23\n      ####ADD_NEW_DRG_RULES #ashburn_vcn_dmz-subnet-rtable# ####\n          ]\n          route_rules_lpg = [\n      ####ADD_NEW_LPG_RULES #ashburn_vcn_dmz-subnet-rtable# ####\n          ]\n          route_rules_ip = [\n      ####ADD_NEW_IP_RULES #ashburn_vcn_dmz-subnet-rtable# ####\n          ]\n          defined_tags = {\n                  \"Oracle-Tags.CreatedOn\"= \"2022-08-23T12:42:06.703Z\" ,\n                  \"Oracle-Tags.CreatedBy\"= \"abc@oracle.com\"\n          }\n          freeform_tags = {}\n        },\n  }\n</code></pre></li> </ul> <p>15. Default Route Tables (Default RTs)</p> <ul> <li>Syntax</li> </ul> <pre><code>  default_route_tables = {\n        ## key - Is a unique value to reference the resources respectively\n        key = {\n\n            # Required\n            compartment_id   = string\n            vcn_id           = string\n            display_name     = string\n\n            # Optional\n            # IGW Rules\n            route_rules_igw  = [] # When there are no IGW Rules\n            (OR)\n            route_rules_igw  = [{\n                  network_entity_id = string\n                  description       = string\n                  destination       = string\n                  destination_type  = string\n            }]\n\n            # SGW Rules\n            route_rules_sgw  = [] # When there are no SGW Rules\n            (OR)\n            route_rules_sgw  = [{\n                  network_entity_id = string\n                  description       = string\n                  destination       = string\n                  destination_type  = string\n            }]\n\n            # NGW Rules\n            route_rules_ngw  = [] # When there are no NGW Rules\n            (OR)\n            route_rules_ngw  = [{\n                  network_entity_id = string\n                  description       = string\n                  destination       = string\n                  destination_type  = string\n            }]\n\n            # DRG Rules\n            route_rules_drg  = [] # When there are no DRG Rules\n            (OR)\n            route_rules_drg  = [{\n                  network_entity_id = string\n                  description       = string\n                  destination       = string\n                  destination_type  = string\n            }]\n\n            # LPG Rules\n            route_rules_lpg  = [] # When there are no LPG Rules\n            (OR)\n            route_rules_lpg  = [{\n                  network_entity_id = string\n                  description       = string\n                  destination       = string\n                  destination_type  = string\n            }]\n\n            # IP Rules\n            route_rules_ip   = [] # When there are no IP Rules\n            (OR)\n            route_rules_ip   = [{\n                  network_entity_id = string\n                  description       = string\n                  destination       = string\n                  destination_type  = string\n            }]\n            # set the tags to {} when not needed; example-&gt; defined_tags = {}\n            defined_tags     = map\n            freeform_tags    = map\n  }\n</code></pre> <ul> <li>Example <pre><code>  // Copyright (c) 2021, 2022, Oracle and/or its affiliates.\n  ############################\n  # Network\n  # Major Objects - Default Route Table - tfvars\n  # Allowed Values:\n  # vcn_id can be the ocid or the key of vcns (map)\n  # compartment_id can be the ocid or the name of the compartment hierarchy delimited by double hiphens \"--\"\n  # Example : compartment_id = \"ocid1.compartment.oc1..aaaaaaaahwwiefb56epvdlzfic6ah6jy3xf3c\" or compartment_id = \"Network-root-cpt--Network\" where \"Network-root-cpt\" is the parent of \"Network\" compartment\n  ############################\n\n  default_route_tables = {\n    # Route Table map #\n    # Start of #ashburn_vcn_app-subnet-rtable# #\n      vcn_app-subnet-rtable = {\n          # Required\n          compartment_id = \"fc-network-cmp\"\n          vcn_id     = \"vcn1\"\n          display_name     = \"Default Route Table for vcn_app-subnet-rtable\"\n\n          # Optional\n          route_rules_igw = [\n      ####ADD_NEW_IGW_RULES #ashburn_vcn_app-subnet-rtable# ####\n          ]\n          route_rules_sgw = [\n      ####ADD_NEW_SGW_RULES #ashburn_vcn_app-subnet-rtable# ####\n          ]\n          route_rules_ngw = [\n                  ## Start Route Rule ashburn_vcn_app-subnet-rtable-natgw_0.0.0.0/0\n              {\n                    network_entity_id = \"vcn-natgw\"\n                    description       = \"\"\n                    destination       = \"0.0.0.0/0\"\n                    destination_type  = \"CIDR_BLOCK\"\n                   },\n              ## End Route Rule ashburn_vcn_app-subnet-rtable-natgw_0.0.0.0/0\n      ####ADD_NEW_NGW_RULES #ashburn_vcn_app-subnet-rtable# ####\n          ]\n          route_rules_drg = [\n                  ## Start Route Rule ashburn_vcn_app-subnet-rtable-drg_10.0.2.0/22\n              {\n                    network_entity_id = \"vcn-drg\"\n                    description       = \"\"\n                    destination       = \"10.0.2.0/22\"\n                    destination_type  = \"CIDR_BLOCK\"\n                   },\n              ## End Route Rule ashburn_vcn_app-subnet-rtable-drg_10.0.2.0/22\n      ####ADD_NEW_DRG_RULES #ashburn_vcn_app-subnet-rtable# ####\n          ]\n          route_rules_lpg = [\n      ####ADD_NEW_LPG_RULES #ashburn_vcn_app-subnet-rtable# ####\n          ]\n          route_rules_ip = [\n      ####ADD_NEW_IP_RULES #ashburn_vcn_app-subnet-rtable# ####\n          ]\n          defined_tags = {\n                  \"Oracle-Tags.CreatedOn\"= \"2022-08-23T15:03:30.750Z\" ,\n                  \"Oracle-Tags.CreatedBy\"= \"abc@oracle.com\"\n          }\n          freeform_tags = {}\n        },\n    # End of #ashburn_vcn_app-subnet-rtable# #\n    # Start of #ashburn_vcn_dmz-subnet-rtable# #\n      dmz-subnet-rtable = {\n          # Required\n          compartment_id = \"fc-network-cmp\"\n          vcn_id     = \"vcn2\"\n          display_name     = \"Default Route Table for dmz-subnet-rtable\"\n\n          # Optional\n          route_rules_igw = [\n                  ## Start Route Rule ashburn_vcn_dmz-subnet-rtable-igw_0.0.0.0/0\n              {\n                    network_entity_id = \"vcn-igw\"\n                    description       = \"\"\n                    destination       = \"0.0.0.0/0\"\n                    destination_type  = \"CIDR_BLOCK\"\n                   },\n              ## End Route Rule ashburn_vcn_dmz-subnet-rtable-igw_0.0.0.0/0\n      ####ADD_NEW_IGW_RULES #ashburn_vcn_dmz-subnet-rtable# ####\n          ]\n          route_rules_sgw = [\n      ####ADD_NEW_SGW_RULES #ashburn_vcn_dmz-subnet-rtable# ####\n          ]\n          route_rules_ngw = [\n      ####ADD_NEW_NGW_RULES #ashburn_vcn_dmz-subnet-rtable# ####\n          ]\n          route_rules_drg = [\n                  ## Start Route Rule ashburn_vcn_dmz-subnet-rtable-drg_10.0.2.0/22\n              {\n                    network_entity_id = \"vcn-drg\"\n                    description       = \"\"\n                    destination       = \"10.0.2.0/22\"\n                    destination_type  = \"CIDR_BLOCK\"\n                   },\n              ## End Route Rule ashburn_vcn_dmz-subnet-rtable-drg_10.0.2.0/22\n              ## Start Route Rule ashburn_vcn_dmz-subnet-rtable-drg_10.3.2.0/23\n              {\n                    network_entity_id = \"vcn-drg\"\n                    description       = \"Route to Freight internal\"\n                    destination       = \"10.3.2.0/23\"\n                    destination_type  = \"CIDR_BLOCK\"\n                   },\n              ## End Route Rule ashburn_vcn_dmz-subnet-rtable-drg_10.3.2.0/23\n      ####ADD_NEW_DRG_RULES #ashburn_vcn_dmz-subnet-rtable# ####\n          ]\n          route_rules_lpg = [\n      ####ADD_NEW_LPG_RULES #ashburn_vcn_dmz-subnet-rtable# ####\n          ]\n          route_rules_ip = [\n      ####ADD_NEW_IP_RULES #ashburn_vcn_dmz-subnet-rtable# ####\n          ]\n          defined_tags = {\n                  \"Oracle-Tags.CreatedOn\"= \"2022-08-23T12:42:06.703Z\" ,\n                  \"Oracle-Tags.CreatedBy\"= \"abc@oracle.com\"\n          }\n          freeform_tags = {}\n        },\n  }\n</code></pre></li> </ul> <p>16. Custom DHCP Options</p> <ul> <li>Syntax</li> </ul> <pre><code>  custom_dhcps = {\n      ## key - Is a unique value to reference the resources respectively\n      key = {\n          # Required\n          compartment_id              = string\n          server_type                 = string\n          vcn_id                      = string\n\n          # Optional\n          search_domain               =  {  # Required for type SearchDomain\n                names                 = list\n          }\n          custom_dns_servers          = list # Required only for type DomainNameServer\n          domain_name_type            = string\n          display_name                = string\n          defined_tags                = map\n          freeform_tags               = map\n      }\n  }\n</code></pre> <ul> <li>Example <pre><code>  ############################\n  # Network\n  # Custom DHCP - tfvars\n  # Allowed Values:\n  # vcn_id can be the ocid or the key of vcns (map)\n  # compartment_id can be the ocid or the name of the compartment hierarchy delimited by double hiphens \"--\"\n  # Example : compartment_id = \"ocid1.compartment.oc1..aaaaaaaahwwiefb56epvdlzfic6ah6jy3xf3c\" or compartment_id = \"Network-root-cpt--Network\" where \"Network-root-cpt\" is the parent of \"Network\" compartment\n  ############################\n  custom_dhcps = {\n    Services-Internal = {\n      # Required\n      compartment_id     = \"Network\"\n      vcn_id             = \"Services\"\n      server_type        = \"VcnLocalPlusInternet\"\n\n      # Optional\n      display_name       = \"Services-Internal\"\n      search_domain = {\n        names = [\"abc.com\"]\n      }\n      defined_tags = {\n        \"Oracle-Tags.CreatedOn\"    = \"2022-02-28T05:46:44.814Z\",\n        \"Oracle-Tags.CreatedBy\"    = \"abc@oracle.com\"\n      }\n    },\n    Services_Custom = {\n      # Required\n      compartment_id     = \"Network\"\n      vcn_id             = \"Services\"\n      server_type        = \"CustomDnsServer\"\n\n      # Optional\n      custom_dns_servers = [\"10.28.24.10\", \"10.28.53.10\"]\n      display_name       = \"Services_Custom\"\n      search_domain = {\n        names = [\"abc.com\"]\n      }\n      defined_tags = {\n        \"Oracle-Tags.CreatedOn\"    = \"2022-02-28T05:46:44.517Z\",\n        \"Oracle-Tags.CreatedBy\"    = \"abc@oracle.com\"\n      }\n    },\n  }\n</code></pre></li> </ul> <p>17. Default DHCP Options</p> <ul> <li>Syntax</li> </ul> <pre><code>  default_dhcps = {\n      ## key - Is a unique value to reference the resources respectively\n      key = {\n          # Required\n          server_type                 = string\n\n          # Optional\n          manage_default_resource_id = string # can be vcn name or default dhcp ocid\n          search_domain               =  {  # Required for type SearchDomain\n                names                 = list\n          }\n          custom_dns_servers          = list # Required only for type DomainNameServer\n          defined_tags                = map\n          freeform_tags               = map\n      }\n  }\n</code></pre> <ul> <li>Example <pre><code>  ############################\n  # Network\n  # Major Objects - Default DHCP - tfvars\n  # Allowed Values:\n  # manage_default_resource_id can be the ocid or the key of vcns (map)\n  ############################\n  default_dhcps = {\n    vcn3_Default-DHCP-Options-for-vcn3 = {\n            # Required\n            server_type          = \"VcnLocalPlusInternet\"\n            manage_default_resource_id = \"vcn3\" # can be vcn name or default dhcp ocid\n\n            # Optional\n            defined_tags = {\n                    \"Oracle-Tags.CreatedOn\"= \"2022-09-06T07:27:40.005Z\" ,\n                    \"Oracle-Tags.CreatedBy\"= \"oracleidentitycloudservice/abc@oracle.com\"\n            }\n    },\n    vcn2_Default-DHCP-Options-for-vcn2 = {\n            # Required\n            server_type          = \"VcnLocalPlusInternet\"\n            manage_default_resource_id = \"vcn2\" # can be vcn name or default dhcp ocid\n\n            # Optional\n            defined_tags = {\n                    \"Oracle-Tags.CreatedOn\"= \"2022-09-06T07:27:39.936Z\" ,\n                    \"Oracle-Tags.CreatedBy\"= \"oracleidentitycloudservice/abc@oracle.com\"\n            }\n    },\n  }\n</code></pre></li> </ul> <p>18. Network Security Groups (NSGs)</p> <ul> <li> <p>Syntax <pre><code>    nsgs = {\n        ## key - Is a unique value to reference the resources respectively\n        key = {\n            # Required\n            compartment_id = string\n            vcn_id         = string\n\n            # Optional\n            display_name   = string\n            defined_tags   = string\n            freeform_tags  = string\n        }   \n    }\n</code></pre></p> </li> <li> <p>Example <pre><code>  ############################\n  # Network\n  # Network Security Group - tfvars\n  # Allowed Values:\n  # vcn_id can be the ocid or vcns map key\n  # compartment_id can be the ocid or the name of the compartment hierarchy delimited by double hiphens \"--\"\n  # Example : compartment_id = \"ocid1.compartment.oc1..aaaaaaaahwwiefb56epvdlzfic6ah6jy3xf3c\" or compartment_id = \"Network-root-cpt--Network\" where \"Network-root-cpt\" is the parent of \"Network\" compartment\n  ############################\n  nsgs = {\n      # NSG map #\n      ##Add New NSGs for phoenix here##\n      # Start of phoenix_NSG1-1 #\n      NSG1-1 = {\n            # Required\n            compartment_id   = \"Network\"\n            vcn_id           = \"vcn1\"\n\n            # Optional\n            display_name     = \"NSG1-1\"\n            defined_tags = {\n                    \"Oracle-Tags.CreatedOn\"= \"2022-09-30T10:48:50.016Z\" ,\n                    \"Oracle-Tags.CreatedBy\"= \"abc@oracle.com\"\n            }\n        },\n      # End of phoenix_NSG1-1 #\n      # Start of phoenix_NSG1-2 #\n      NSG1-2 = {\n            # Required\n            compartment_id   = \"Network\"\n            vcn_id           = \"vcn2\"\n\n            # Optional\n            display_name     = \"NSG1-2\"\n            defined_tags = {\n                    \"Oracle-Tags.CreatedOn\"= \"2022-09-29T09:18:01.888Z\" ,\n                    \"Oracle-Tags.CreatedBy\"= \"abc@oracle.com\"\n            }\n        },\n      # End of phoenix_NSG1-2 #\n  }\n</code></pre></p> </li> </ul> <p>19. Network Security Group Rules (NSG Rules)</p> <ul> <li>Syntax</li> </ul> <pre><code>  nsg_rules = {\n      ## key - Is a unique value to reference the resources respectively\n      key = {\n          # Required\n          nsg_id          = string\n          direction       = string\n          protocol        = string\n\n          # Optional\n          description     = string\n          stateless       = string\n          source_type     = string\n          source          = string\n          destinaion_type = string\n          destination     = string\n\n          # ICMP Options\n          icmp    = [{\n                type = string \n                code = string   #  icmp_code = \"\" if you want to pass only the type\n            }] \n          (OR)\n          # When there are no ICMP rules\n          icmp = [{\n                type = \"\"\n                code = \"\"\n            }]\n          (OR) # When there are no ICMP Options\n          icmp = []\n\n          # TCP Options \n          tcp = [{\n\n                  # To specify only source values\n                  source_port_range_max = string\n                  source_port_range_min = string\n\n                  (OR) # To specify only destination values\n\n                  destination_port_range_max = string\n                  destination_port_range_min = string\n\n                  (OR) # To specify both source and destination values\n\n                  source_port_range_max = string\n                  source_port_range_min = string\n\n                  destination_port_range_max = string\n                  destination_port_range_min = string\n          }]\n          (OR) \n          # When there are no TCP Options\n          tcp = []\n\n          # UDP Options \n          udp = [{\n                  # To specify only source values\n                  source_port_range_max = string\n                  source_port_range_min = string\n\n                  (OR) # To specify only destination values\n\n                  destination_port_range_max = string\n                  destination_port_range_min = string\n\n                  (OR) # To specify both source and destination values\n\n                  source_port_range_max = string\n                  source_port_range_min = string\n\n                  destination_port_range_max = string\n                  destination_port_range_min = string\n              }]\n          (OR) \n          # When there are no UDP Options\n          udp = []\n\n      }\n  }\n</code></pre> <ul> <li>Example <pre><code>  ############################\n  # Network\n  # Network Security Group Rules\n  # Allowed Values:\n  # nsg_id can be ocid or the key of nsgs (map)\n  ############################\n  nsg_rules = {\n      # NSG Rule map #\n      ##Add New NSG Rules for ashburn here##\n      dns_nsg_rule1 =  {\n            # Required\n            nsg_id = \"dns_nsg\"\n            direction = \"INGRESS\"\n            protocol = \"17\"\n\n            # Optional\n            description = \"dns_nsg_rule1\"\n            stateless = \"false\"\n            source_type = \"CIDR_BLOCK\"\n            destination_type = null\n            destination = \"\"\n            source = \"10.0.0.0/14\"\n            udp = [{\n                destination_port_range_max = \"53\"\n                destination_port_range_min = \"53\"\n            }]\n       },\n      dns_nsg_rule2 =  {\n            # Required\n            nsg_id = \"dns_nsg\"\n            direction = \"INGRESS\"\n            protocol = \"1\"\n\n            # Optional\n            description = \" \"\n            stateless = \"false\"\n            source_type = \"CIDR_BLOCK\"\n            destination_type = null\n            destination = \"\"\n            source = \"10.0.0.0/14\"\n            icmp = []\n       },\n      dns_nsg_rule3 =  {\n            # Required\n            nsg_id = \"dns_nsg\"\n            direction = \"EGRESS\"\n            protocol = \"6\"\n\n            # Optional\n            description = \"dns_nsg_rule3\"\n            stateless = \"false\"\n            source_type = null\n            destination_type = \"CIDR_BLOCK\"\n            destination = \"10.0.0.0/32\"\n            source = \"\"\n            tcp = [{\n              destination_port_range_max = \"53\"\n              destination_port_range_min = \"53\"\n            }]\n      },\n  }\n</code></pre></li> </ul> <p>20. Local Peering Gateways (LPGs)</p> <ul> <li> <p>Syntax <pre><code>    lpgs = {\n        ## key - Is a unique value to reference the resources respectively\n        key = {\n\n            # LPGs of Hub VCN\n            hub-lpgs      = {\n                # Required\n                compartment_id = string\n                vcn_id         = string\n                lpg_name       = string\n\n                # Optional\n                route_table_id = string\n                peer_id        = string\n                # set the tags to {} when not needed; example-&gt; defined_tags = {}\n                defined_tags    = map\n                freeform_tags   = map\n            },\n            (OR)\n            # When there are no LPGs in Hub VCN\n            hub-lpgs      = {}, \n\n            # LPGs of Spoke VCN\n            spoke-lpgs    = {\n                # Required\n                compartment_id = string\n                vcn_id         = string\n                lpg_name       = string\n\n                # Optional\n                route_table_id = string\n                peer_id        = string\n                # set the tags to {} when not needed; example-&gt; defined_tags = {}\n                defined_tags    = map\n                freeform_tags   = map\n            },\n            (OR)\n            # When there are no LPGs in Spoke VCN\n            spoke-lpgs      = {},  \n\n            # LPGs of Peer VCN\n            peer-lpgs     = {\n                # Required\n                compartment_id = string\n                vcn_id         = string\n                lpg_name       = string\n\n                # Optional\n                route_table_id = string\n                peer_id        = string\n                # set the tags to {} when not needed; example-&gt; defined_tags = {}\n                defined_tags    = map\n                freeform_tags   = map\n            },\n            (OR)\n            # When there are no LPGs in Peer VCN\n            peer-lpgs      = {}, \n\n            # LPGs of VCN that are declared as neither hub nor spoke\n            none-lpgs     = {\n                # Required\n                compartment_id = string\n                vcn_id         = string\n                lpg_name       = string\n\n                # Optional\n                route_table_id = string\n                peer_id        = string\n                # set the tags to {} when not needed; example-&gt; defined_tags = {}\n                defined_tags    = map\n                freeform_tags   = map\n            },\n            (OR)\n            # When there are no LPGs in a VCN that is neither hub nor spoke\n            none-lpgs      = {}, \n\n            # LPGs of VCN Exported by the toolkit\n            exported-lpgs = {\n                # Required\n                compartment_id = string\n                vcn_id         = string\n                lpg_name       = string\n\n                # Optional\n                route_table_id = string\n                peer_id        = string\n                # set the tags to {} when not needed; example-&gt; defined_tags = {}\n                defined_tags    = map\n                freeform_tags   = map\n            }, \n            (OR)\n            # When there are no LPGs in the VCNs that are exported by the toolkit\n            exported-lpgs      = {}, \n        }\n    }\n</code></pre></p> </li> <li> <p>Example <pre><code>  ############################\n  # Network\n  # Major Objects - LPG - tfvars\n  # Allowed Values:\n  # vcn_id can be the ocid or the key of vcns (map)\n  # compartment_id can be the ocid or the name of the compartment hierarchy delimited by double hiphens \"--\"\n  # Example : compartment_id = \"ocid1.compartment.oc1..aaaaaaaahwwiefb56epvdlzfic6ah6jy3xf3c\" or compartment_id = \"Network-root-cpt--Network\" where \"Network-root-cpt\" is the parent of \"Network\" compartment\n  ############################\n  lpgs = {\n      hub-lpgs = {\n                  },\n      spoke-lpgs = {\n                  },\n      peer-lpgs = {\n                      test_test_lpg0 = {\n                      compartment_id = \"CTDOKE\"\n                      vcn_id     = \"test\"\n                      lpg_name   = \"test_lpg0\"\n                      route_table_id = \"\"\n                      peer_id = \"lab-one-oke-vcn-dr_lab-one-oke-vcn-dr_lpg0\"\n                      defined_tags = {}\n                      freeform_tags = {}\n               },\n                  },\n      none-lpgs  = {\n                  },\n      exported-lpgs = {\n                      lab-one-oke-vcn-dr_lab-one-oke-vcn-dr_lpg0 = {\n                      compartment_id = \"CTDOKE\"\n                      vcn_id     = \"lab-one-oke-vcn-dr\"\n                      lpg_name   = \"lab-one-oke-vcn-dr_lpg0\"\n                      route_table_id = \"\"\n                      peer_id = \"\"\n                      defined_tags = {}\n                      freeform_tags = {}\n               },\n                  },\n  }\n</code></pre></p> </li> </ul>"},{"location":"terraform/oke/","title":"auto.tfvars syntax for OKE Module","text":"<p>These are the syntax and sample format for providing inputs to the modules via *.auto.tfvars files. \"key\" must be unique to every resource that is created.Comments preceed with ##.</p> <p>1. Clusters</p> <ul> <li>Syntax</li> </ul> <pre><code>  clusters = {\n      ## key - Is a unique value to reference the resources respectively\n      key = {\n        display_name = string\n        compartment_id = string\n        network_compartment_id = string\n        vcn_name = string\n        kubernetes_version = string\n        cni_type = string\n        is_kubernetes_dashboard_enabled = optional(bool)\n        is_tiller_enabled = optional(bool)\n        is_public_ip_enabled = optional(bool)\n        nsg_ids = optional(list(string))\n        endpoint_subnet_id = string\n        is_pod_security_policy_enabled = optional(bool)\n        pods_cidr = optional(string)\n        services_cidr = optional(string)\n        service_lb_subnet_ids = optional(list(string))\n        defined_tags = optional(map(any))\n        freeform_tags = optional(map(any))\n      }\n  }\n</code></pre> <ul> <li>Example <pre><code>    // Copyright (c) 2021, 2022, Oracle and/or its affiliates.\n    ############################\n    # Developer Services\n    # OKE Cluster - tfvars\n    ############################\n    clusters = {\n      key = {\n        display_name = \"phn_cluster_dev\"\n        compartment_id = \"App-Dev\"\n        network_compartment_id = \"App-Network\"\n        vcn_name = \"vcn-oke\"\n        kubernetes_version = \"v1.24.0\"\n        cni_type = \"OCI_VCN_IP_NATIVE\"\n        is_kubernetes_dashboard_enabled = false\n        is_tiller_enabled = false\n        is_public_ip_enabled = false\n        nsg_ids = [\"app-network-nsg-cp\",\"app-network-nsg-lb\"]\n        endpoint_subnet_id = \"endpoint-sn\"\n        is_pod_security_policy_enabled = true\n        pods_cidr = \"10.24.0.0/16\"\n        services_cidr = \"10.10.0.0/16\"\n        service_lb_subnet_ids = [\"loadbalancer-sn\"]\n        defined_tags = {\n             Oracle-Tags.CreatedOn=2022-12-07T11:37:21.641Z,\n             Oracle-Tags.CreatedBy=oracleidentitycloudservice/user.name@oracle.com\n             }\n        freeform_tags = {\n             Department=\"Finance\",\n             CostCentre=\"xx1234\"\n             }\n      },\n  ##Add New Cluster for phoenix here##\n  }\n</code></pre></li> </ul> <p>2. Nodepools</p> <ul> <li>Syntax</li> </ul> <pre><code>  nodepools = {\n      ## key - Is a unique value to reference the resources respectively\n      key = {\n        display_name = string\n        cluster_name = string\n        compartment_id = string\n        network_compartment_id = string\n        vcn_name = string\n        node_shape = string\n        initial_node_labels = optional(map(any))\n        kubernetes_version = string\n        is_pv_encryption_in_transit_enabled = optional(bool)\n        availability_domain = number\n        subnet_id = string\n        size = number\n        cni_type = string\n        max_pods_per_node = optional(number)\n        pod_nsg_ids = optional(list(string))\n        pod_subnet_ids = optional(string)\n        worker_nsg_ids = optional(list(string))\n        memory_in_gbs = optional(number)\n        ocpus = optional(number)\n        image_id = string\n        source_type = string\n        boot_volume_size_in_gbs = optional(number)\n        ssh_public_key = optional(string)\n        node_defined_tags = optional(map(any))\n        node_freeform_tags = optional(map(any))\n        nodepool_defined_tags = optional(map(any))\n        nodepool_freeform_tags = optional(map(any))\n      },\n  }\n</code></pre> <ul> <li>Example <pre><code>    // Copyright (c) 2021, 2022, Oracle and/or its affiliates.\n    ############################\n    # Developer Services\n    # OKE Nodepool - tfvars\n    ############################\n    nodepools = {\n      key = {\n        display_name = \"nodepool1\"\n        cluster_name = \"cluster2\"\n        compartment_id = \"AppDev\"\n        network_compartment_id = \"Network\"\n        vcn_name = \"prod-vcn\"\n        node_shape = \"VM.Standard.E3.Flex\"\n        initial_node_labels = {\n                label = \"node1\"\n        }\n        kubernetes_version = \"v1.24.1\"\n        availability_domain = 2\n        subnet_id = \"prod-app\"\n        size = 1\n        cni_type = \"OCI_VCN_IP_NATIVE\"\n        max_pods_per_node = 31\n        pod_subnet_ids = \"prod-app\"\n        worker_nsg_ids = [\"prod-vcn-app-nsg\"]\n        memory_in_gbs = 32\n        ocpus = 1\n        image_id = \"Oracle-Linux-8-6-2022-10-04-0-OKE-1-24-1-491\"\n        source_type = \"IMAGE\"\n        boot_volume_size_in_gbs = 64\n        nodepool_defined_tags = {\n                \"Oracle-Tags.CreatedOn\"= \"2023-01-10T04:29:33.383Z\" ,\n                \"Oracle-Tags.CreatedBy\"= \"oracleidentitycloudservice/suruchi.singla@oracle.com\"\n        }\n    },  ##Add New nodepool for phoenix here##\n  }\n</code></pre></li> </ul>"},{"location":"terraform/sch/","title":"auto.tfvars file for Service Connectors Module","text":"<p>These are the syntax and sample format for providing inputs to the modules via *.auto.tfvars files. \"key\" must be unique to every resource that is created.Comments proceed with ##.</p> <p>1. service_connectors</p> <ul> <li>Syntax</li> </ul> <pre><code>  service_connectors = {\n      ## key - Is a unique value to reference the resources respectively\n      key = {\n        compartment_id      = string\n        display_name        = string\n        description         = string\n        source_details = {\n                source_kind                  = string\n                source_log_group_names       = list(string)  # Required when source is logging\n                source_stream_name           = map(string)   # Required when source is streaming \n        }\n        target_details = {\n                target_kind                  = string\n                target_stream_name           = map(string)   # Required when target is streaming\n                target_log_source_identifier = string        # Required when source is streaming and target is loggingAnalytics\n                target_topic_name            = map(string)   # Required when target is notifications\n                enable_formatted_messaging   = bool          # Optional when target is notifications.Default is `true`\n                target_bucket_name           = string        # Required when target is objectStorage\n                target_object_name_prefix    = string        # Optional when target is objectStorage \n                target_log_group_name        = map(string)   # Required when target is loggingAnalytics\n\n        }\n        defined_tags                         = optional(map(any))\n        freeform_tags                        = optional(map(any))\n      }\n  }\n</code></pre> <ul> <li>Example <pre><code>    // Copyright (c) 2021, 2022, Oracle and/or its affiliates.\n    #############################\n    # Management Services\n    # Service Connectors - tfvars\n    #############################\n\n  service_connectors= {\n    # Service Connector Hub map #\n    SCH-01 = {\n          compartment_id      = \"Network\"\n          display_name        = \"SCH-01\"\n          description         = \"logging to stream\"\n          source_details = {\n                  source_kind               = \"logging\"\n                  source_log_group_names    = [\"Security&amp;network-vcn-logs\"]\n          }\n          target_details = {\n                  target_kind                = \"streaming\"\n                  target_stream_name         = {\"Security\": \"sch-tracing-logs\"}\n          }\n          defined_tags = {\n                  \"Oracle-Tags.CreatedOn\"= \"2023-01-12T08:30:51.301Z\" ,\n                  \"Oracle-Tags.CreatedBy\"= \"oracleidentitycloudservice/xyz@oracle.com\"\n          }\n          freeform_tags = {}\n        },\n\n    SCH-02 = {\n          compartment_id      = \"Security\"\n          display_name        = \"SCH-02\"\n          description         = \"stream to loganalytics\"\n          source_details = {\n                  source_kind               = \"streaming\"\n                  source_stream_name        = {\"Network\": \"demo-sch-testing\"}\n          }\n          target_details = {\n                  target_kind                = \"loggingAnalytics\"\n                  target_log_group_name      = {\"Security\": \"LogGroup_Demo\"}\n                  target_log_source_identifier = \"AVDF Alert in Oracle Database\"\n          }\n          defined_tags = {\n                  \"Oracle-Tags.CreatedOn\"= \"2023-01-12T08:30:51.345Z\" ,\n                  \"Oracle-Tags.CreatedBy\"= \"oracleidentitycloudservice/xyz@oracle.com\"\n          }\n          freeform_tags = {}\n        },\n\n    SCH-03 = {\n          compartment_id      = \"Dev\"\n          display_name        = \"SCH-03\"\n          description         = \"logging to notification\"\n          source_details = {\n                  source_kind               = \"logging\"\n                  source_log_group_names    = [\"Security&amp;VCNFlowLogGroup\"]\n          }\n          target_details = {\n                  target_kind                = \"notifications\"\n                  target_topic_name          = {\"Network\": \"topic-testing\"}\n                    enable_formatted_messaging = true\n          }\n          defined_tags = {\n                  \"Oracle-Tags.CreatedOn\"= \"2023-01-12T08:30:51.303Z\" ,\n                  \"Oracle-Tags.CreatedBy\"= \"oracleidentitycloudservice/xyz@oracle.com\"\n          }\n          freeform_tags = {}\n        },\n\n    SCH-04 = {\n          compartment_id      = \"Demo\"\n          display_name        = \"SCH-04\"\n          description         = \"logging to bucket\"\n          source_details = {\n                  source_kind               = \"logging\"\n                  source_log_group_names    = [\"Security--comp_one&amp;Audit\", \"Demo--new_comp_one--new_comp_two&amp;Audit\", \"Demo&amp;test-gs-01\"]\n          }\n          target_details = {\n                  target_kind                = \"objectStorage\"\n                  target_bucket_name         =  \"bucket-logging\"\n                  target_object_name_prefix  = \"complaince\"\n          }\n          defined_tags = {\n                  \"Oracle-Tags.CreatedOn\"= \"2023-01-12T08:30:51.328Z\" ,\n                  \"Oracle-Tags.CreatedBy\"= \"oracleidentitycloudservice/xyz@oracle.com\"\n          }\n          freeform_tags = {}\n        }\n  ##Add New SCH for phoenix here##\n  }  \n</code></pre></li> </ul>"},{"location":"terraform/sddc/","title":"auto.tfvars syntax for SDDC Module","text":"<p>These are the syntax and sample format for providing inputs to the modules via *.auto.tfvars files. \"key\" must be unique to every resource that is created.Comments preceed with ##.</p> <ul> <li>Syntax</li> </ul> <p><pre><code>sddcs = {\n## key - Is a unique value to reference the resources respectively\n      key =  {\n          compartment_id                = string\n          display_name                  = string\n          availability_domain           = string\n          is_hcx_enabled                = bool\n          vmware_software_version       = string\n          initial_sku                   = string\n          initial_host_shape_name       = string\n          management_datastore          = list\n          workload_datastore            = list\n          hcx_action                    = string\n          initial_host_ocpu_count       = string\n          esxi_hosts_count              = string\n          instance_display_name_prefix  = string\n          is_shielded_instance_enabled  = bool\n          ssh_authorized_keys           = string\n          network_compartment_id        = string\n          vcn_name                      = string\n          provisioning_subnet_id        = string\n          nsx_edge_uplink1vlan_id       = string\n          nsx_edge_uplink2vlan_id       = string\n          nsx_edge_vtep_vlan_id         = string\n          nsx_vtep_vlan_id              = string\n          vmotion_vlan_id               = string\n          vsan_vlan_id                  = string\n          vsphere_vlan_id               = string\n          hcx_vlan_id                   = string\n          replication_vlan_id           = string\n          provisioning_vlan_id          = string\n          workload_network_cidr         = string\n          defined_tags                  = map\n         }           \n    }\n</code></pre> </p> <ul> <li>Example</li> </ul> <pre><code>// Copyright (c) 2021, 2022, Oracle and/or its affiliates.\n############################\n# SDDCs\n# SDDC - tfvars\n# Allowed Values:\n# vcn_name must be the name of the VCN as in OCI\n# vlan_name must be the name of the vlan as in OCI\n# subnet_id can be the ocid of the subnet or the name as in OCI\n# compartment_id and network_compartment_id can be the ocid or the name of the compartment hierarchy delimited by double hiphens \"--\"\n# Example : compartment_id = \"ocid1.compartment.oc1..aaaaaaaahwwiefb56epvdlzfic6ah6jy3xf3c\" or compartment_id = \"AppDev--Prod\" where \"AppDev\" is the parent of \"Prod\" compartment\n# Sample import command for SDDC:\n# terraform import \"module.sddc[\\\"&lt;&lt;sddc terraform variable name&gt;&gt;\\\"].oci_ocvp_sddc.sddc\" &lt;&lt;sddc ocid&gt;&gt;\n############################\nsddcs = {\n      sddc-std =  {\n          compartment_id                = \"AppDev\"\n          display_name                  = \"sddc-std\"\n          availability_domain           =  0\n          is_hcx_enabled                = \"true\"\n          vmware_software_version       = \"7.0 update 3\"\n          initial_sku                   = \"HOUR\"\n          initial_host_shape_name       = \"BM.Standard.E4.128\"\n          management_datastore          = [\"AppDev@vMGMT_LUN\"]\n          workload_datastore            = [\"AppDev@workload_vol1\",\"AppDev@workload_vol2\"]\n          hcx_action                    = \"UPGRADE\"\n          initial_host_ocpu_count       = \"32\"\n          esxi_hosts_count              = 3\n          instance_display_name_prefix  = \"sddc-std2\"\n          is_shielded_instance_enabled  = \"false\"\n          ssh_authorized_keys           = \"sddc-std\"\n          network_compartment_id        = \"Network\"\n          vcn_name                      = \"vcn-sddc\"\n          provisioning_subnet_id        = \"Subnet-sddc\"\n          nsx_edge_uplink1vlan_id       = \"VLAN-sddc-std2-NSX Edge Uplink 1\"\n          nsx_edge_uplink2vlan_id       = \"VLAN-sddc-std2-NSX Edge Uplink 2\"\n          nsx_edge_vtep_vlan_id         = \"VLAN-sddc-std2-NSX Edge VTEP\"\n          nsx_vtep_vlan_id              = \"VLAN-sddc-std2-NSX VTEP\"\n          vmotion_vlan_id               = \"VLAN-sddc-std2-vMotion\"\n          vsan_vlan_id                  = \"VLAN-sddc-std2-vSAN\"\n          vsphere_vlan_id               = \"VLAN-sddc-std2-vSphere\"\n          hcx_vlan_id                   = \"VLAN-sddc-std2-HCX\"\n          replication_vlan_id           = \"VLAN-sddc-std2-Replication Net\"\n          provisioning_vlan_id          = \"VLAN-sddc-std2-Provisioning Net\"\n          workload_network_cidr         = \"\"\n            defined_tags = {\n                    \"Oracle-Tags.CreatedOn\"= \"2023-06-05T16:57:49.375Z\" ,\n                    \"Oracle-Tags.CreatedBy\"= \"oracleidentitycloudservice/abc@oracle.com\" ,\n            }\n    },\n\n}\n</code></pre>"},{"location":"terraform/security/","title":"auto.tfvars syntax for Security Module","text":"<p>These are the syntax and sample format for providing inputs to the modules via *.auto.tfvars files. \"key\" must be unique to every resource that is created. Comments preceed with ##.</p>"},{"location":"terraform/security/#kms-keys-and-vaults","title":"KMS - Keys and Vaults","text":""},{"location":"terraform/security/#1vaults","title":"1.Vaults","text":"<ul> <li>Syntax</li> </ul> <pre><code>    vaults = {\n            ## key - Is a unique value to reference the resources respectively\n            key = {\n                    # Required\n                    compartment_id            = string\n                    display_name              = string\n                    vault_type                = string\n\n\n                    # Optional\n                    replica_region            = optional(string)\n                    defined_tags              = map\n                    freeform_tags             = map\n        }\n    }\n</code></pre> <ul> <li>Example</li> </ul> <pre><code>// Copyright (c) 2021, 2022, Oracle and/or its affiliates.\n############################\n# Security\n# Create KMS Vault and Key\n# Allowed Values:\n# compartment_id can be the ocid or the name of the compartment hierarchy delimited by double hiphens \"--\"\n# Example : compartment_id = \"ocid1.compartment.oc1..aaaaaaaahwwiefb56epvdlzfic6ah6jy3xf3c\"\n# Sample import command:\n# terraform import \"module.vaults[\\\"&lt;&lt;vault name&gt;&gt;\\\"].oci_kms_vault.vault\" &lt;vault id&gt;\n############################\nvaults = {\n    vault1 = {\n            compartment_id = \"cd3_compartment\"\n            display_name = \"vault1\"\n            vault_type = \"VIRTUAL_PRIVATE\"\n            replica_region = \"us-phoenix-1\"\n            defined_tags = {\n                    \"Oracle-Tags.CreatedOn\"= \"2021-10-20T15:03:19.457Z\" ,\n                    \"Oracle-Tags.CreatedBy\"= \"oracleidentitycloudservice/abc@xyz.com\"\n                }\n            },\n    vault2 = {\n            compartment_id = \"cd3_compartment\"\n            display_name = \"vault2\"\n            vault_type = \"DEFAULT\"\n            defined_tags = {\n                    \"Oracle-Tags.CreatedOn\"= \"2021-10-20T15:03:19.457Z\" ,\n                    \"Oracle-Tags.CreatedBy\"= \"oracleidentitycloudservice/abc@xyz.com\"\n                }\n            },\n##Add New Vaults for ashburn here##\n}\n</code></pre>"},{"location":"terraform/security/#2keys","title":"2.Keys","text":"<ul> <li>Syntax</li> </ul> <pre><code>    keys = {\n        key = {\n                ## key - Is a unique value to reference the resources respectively\n                # Required\n                compartment_id        = string\n                display_name          = string\n                vault_name            = string\n                algorithm             = string\n                length                = int\n                protection_mode       = string\n\n\n                #optional\n                curve_id                  = string\n                is_auto_rotation_enabled  = string\n                rotation_interval_in_days = int\n                defined_tags              = map\n                freeform_tags             = map               \n\n            }\n    }\n</code></pre> <ul> <li>Example</li> </ul> <pre><code>// Copyright (c) 2021, 2022, Oracle and/or its affiliates.\n############################\n# Security\n# Create KMS Vault and Key\n# Allowed Values:\n# compartment_id can be the ocid or the name of the compartment hierarchy delimited by double hiphens \"--\"\n# Example : compartment_id = \"ocid1.compartment.oc1..aaaaaaaahwwiefb56epvdlzfic6ah6jy3xf3c\" \n# length : AES: 16, 24, or 32, RSA: 256, 384, or 512, ECDSA: 32, 48, or 66\n# Sample import command:\n# terraform import \"module.keys[\\\"&lt;&lt; key name&gt;&gt;\\\"].oci_kms_key.key\" managementEndpoint/&lt;management_endpoint&gt;/keys/&lt;key id&gt;\n############################\nkeys = {\n    key1 = {\n            compartment_id = \"cd3_compartment\"\n            display_name = \"key1\"\n            vault_name = \"vault1\"\n            algorithm = \"AES\"\n            length = 32\n            protection_mode = \"HSM\"\n            is_auto_rotation_enabled = \"true\"\n            rotation_interval_in_days = 100\n            defined_tags = {\n                    \"Oracle-Tags.CreatedOn\"= \"2021-10-20T15:03:19.457Z\" ,\n                    \"Oracle-Tags.CreatedBy\"= \"oracleidentitycloudservice/abc@xyz.com\"\n                }\n            },\n    key2 = {\n            compartment_id = \"cd3_compartment\"\n            display_name = \"key2\"\n            vault_name = \"vault1\"\n            algorithm = \"AES\"\n            length = 32\n            protection_mode = \"HSM\"\n            defined_tags = {\n                    \"Oracle-Tags.CreatedOn\"= \"2021-10-20T15:03:19.457Z\" ,\n                    \"Oracle-Tags.CreatedBy\"= \"oracleidentitycloudservice/abc@xyz.com\"\n                }\n            },\n    key3 = {\n            compartment_id = \"cd3_compartment\"\n            display_name = \"key3\"\n            vault_name = \"vault2\"\n            algorithm = \"ECDSA\"\n            length = 32\n            curve_id = \"NIST_P256\"\n            protection_mode = \"HSM\"\n            defined_tags = {\n                    \"Oracle-Tags.CreatedOn\"= \"2021-10-20T15:03:19.457Z\" ,\n                    \"Oracle-Tags.CreatedBy\"= \"oracleidentitycloudservice/abc@xyz.com\"\n                }\n            },\n    ##Add New Keys for ashburn here##\n}\n</code></pre>"},{"location":"terraform/security/#cloud-guard","title":"Cloud Guard","text":"<p>3. Cloud Guard Configs</p> <ul> <li>Syntax</li> </ul> <pre><code>  cloud_guard_configs = {\n  ## key - Is a unique value to reference the resources respectively\n      key = {\n         # Required\n         compartment_id         = string\n         reporting_region       = string\n         status                 = string\n\n         # Optional\n         self_manage_resources  = string\n      },\n  }\n</code></pre> <ul> <li>Example <pre><code>    // Copyright (c) 2021, 2022, Oracle and/or its affiliates.\n    ############################\n    # Security\n    # Create Cloud Guard and Alerts\n    # Allowed Values:\n    # compartment_id can be the ocid or the name of the compartment hierarchy delimited by double hiphens \"--\"\n    # Example : compartment_id = \"ocid1.compartment.oc1..aaaaaaaahwwiefb56epvdlzfic6ah6jy3xf3c\" or compartment_id = \"Network-root-cpt--Network\" where \"Network-root-cpt\" is the parent of \"Network\" compartment\n    # status : Valid values are DISABLED, ENABLED\n    ############################\n    cloud_guard_configs = {\n        CD3-cloud_guard = {\n                #Required\n                compartment_id = \"root\"\n                reporting_region = \"us-phoenix-1\"\n                status = \"ENABLED\"\n\n                #Optional\n                self_manage_resources = false\n               },\n    ##Add New Cloud Guard Configurations for phoenix here##\n    }\n</code></pre></li> </ul> <p>4. Cloud Guard Targets</p> <ul> <li> <p>Syntax <pre><code>    cloud_guard_targets = {\n    ## key - Is a unique value to reference the resources respectively\n        key = {\n          # Required\n          compartment_id      = string\n          display_name        = string\n          target_resource_id  = string\n          target_resource_type= string\n\n          # Optional\n          state               = string\n          description         = string\n          target_detector_recipes  = [{\n              {\n                detector_recipe_id = string\n              },]\n          target_responder_recipes = [{\n              {\n                responder_recipe_id = string\n              },]\n          freeform_tags            = map\n          defined_tags             = map\n        },\n    }\n</code></pre></p> </li> <li> <p>Example <pre><code>   // Copyright (c) 2021, 2022, Oracle and/or its affiliates.\n    ############################\n    # Security\n    # Create Cloud Guard and Alerts\n    # Allowed Values:\n    # compartment_id can be the ocid or the name of the compartment hierarchy delimited by double hiphens \"--\"\n    # Example : compartment_id = \"ocid1.compartment.oc1..aaaaaaaahwwiefb56epvdlzfic6ah6jy3xf3c\" or compartment_id = \"Network-root-cpt--Network\" where \"Network-root-cpt\" is the parent of \"Network\" compartment\n    # target-resource-type : Valid values are COMPARTMENT, ERPCLOUD, HCMCLOUD.\n    # state : Valid values are ACTIVE, CREATING, DELETED, DELETING, FAILED, INACTIVE, UPDATING\n    ############################\n    cloud_guard_targets = {\n        CD3-cloudguard-target = {\n                #Required\n                compartment_id = \"root\"\n                display_name = \"CD3-cloudguard-target\"\n                target_resource_id = \"root\"\n                target_resource_type = \"COMPARTMENT\"\n\n                #Optional\n                target_detector_recipes = [\n                {\n                detector_recipe_id = \"OCI_Activity_Detector_Recipe\"\n                },\n                {\n                detector_recipe_id = \"OCI_Configuration_Detector_Recipe\"\n                },\n                {\n                detector_recipe_id = \"OCI_Threat_Detector_Recipe\"\n                }\n                ]\n                target_responder_recipes = [\n                {\n                responder_recipe_id = \"OCI_Responder_Recipe\"\n                }\n                ]\n               },\n    ##Add New Cloud Guard Targets for phoenix here##\n    }\n</code></pre></p> </li> </ul>"},{"location":"terraform/storage/","title":"auto.tfvars syntax for Storage Module","text":"<p>These are the syntax and sample format for providing inputs to the modules via *.auto.tfvars files. \"key\" must be unique to every resource that is created. Comments preceed with ##.</p>"},{"location":"terraform/storage/#block-volumes","title":"Block Volumes","text":"<ul> <li>Syntax</li> </ul> <pre><code>    blockvolumes = {\n            ## key - Is a unique value to reference the resources respectively\n            key = {\n                    # Required\n                    availability_domain       = string\n                    compartment_id            = string\n                    display_name              = string\n\n                    # Optional\n                    size_in_gbs               = string\n                    is_auto_tune_enabled      = string\n                    vpus_per_gb               = string\n                    kms_key_id                = string\n                    attach_to_instance        = string\n                    attachment_type           = string\n                    backup_policy             = string\n                    policy_compartment_id     = string\n                    device                    = string\n                    encryption_in_transit_type= string\n                    attachment_display_name   = string\n                    is_read_only              = bool\n                    is_pv_encryption_in_transit_enabled = bool\n                    is_shareable              = bool\n                    is_agent_auto_iscsi_login_enabled = bool\n                    use_chap                  = bool\n                    source_details            = list(map(any))\n                    block_volume_replicas     = list(map(any))\n                    block_volume_replicas_deletion = bool\n                    autotune_policies         = list(map(any))\n                    defined_tags              = map\n                    freeform_tags             = map\n        }\n    }\n</code></pre> <ul> <li>Example <pre><code>    // Copyright (c) 2021, 2022, Oracle and/or its affiliates.\n\n    ############################\n    # Block Volumes\n    # Block Volumes - tfvars\n    # Allowed Values:\n    # compartment_id and policy_compartment_id can be the ocid or the name of the compartment hierarchy delimited by double hiphens \"--\"\n    # Example : compartment_id = \"ocid1.compartment.oc1..aaaaaaaahwwiefb56epvdlzfic6ah6jy3xf3c\" or compartment_id = \"Network-root-cpt--Network\" where \"Network-root-cpt\" is the parent of \"Network\" compartment\n    # Sample import command for block volume:\n    # terraform import \"module.block-volumes[\\\"&lt;&lt;blockvolumes terraform variable name&gt;&gt;\\\"].oci_core_volume.block_volume\" &lt;&lt;block volume ocid&gt;&gt;\n    # terraform import \"module.block-volumes[\\\"&lt;&lt;blockvolumes terraform variable name&gt;&gt;\\\"].oci_core_volume_attachment.block_vol_instance_attachment[0]\" &lt;&lt;block volume attachment ocid&gt;&gt;\n    # terraform import \"module.block-volumes[\\\"&lt;&lt;blockvolumes terraform variable name&gt;&gt;\\\"].oci_core_volume_backup_policy_assignment.volume_backup_policy_assignment[0]\" &lt;&lt;block volume policy assignment ocid&gt;&gt;\n    ############################\n\n    blockvolumes = {\n        block01 =  {\n            # Required\n            availability_domain  = 0\n            compartment_id       = \"AppDev\"\n            display_name         = \"block01\"\n\n            # Optional\n            size_in_gbs          = 100\n            defined_tags = {\n                \"Oracle-Tags.CreatedOn\"= \"2021-10-20T15:03:19.457Z\" ,\n                \"Oracle-Tags.CreatedBy\"= \"oracleidentitycloudservice/abc@xyz.com\"\n            }\n        },\n       block02 =  {\n\n            # Required\n            availability_domain  = 0\n            compartment_id       = \"AppDev\"\n            display_name         = \"block02\"\n\n            # Optional\n            size_in_gbs          = 500\n            attach_to_instance   = \"server01\"\n            attachment_type = \"iscsi\"\n            backup_policy        = \"gold\"\n            is_pv_encryption_in_transit_enabled = \"false\"\n            source_details       = \"blockvolume_source\"\n            block_volume_replicas = [{\n                availability_domain = \"IiKv:US-ASHBURN-AD-3\"\n                display_name = \"replica-1\"\n            }]\n            autotune_policies    = [\n                  {\n                    autotune_type = \"DETACHED_VOLUME\"\n                    max_vpus_per_gb = null\n                  },\n                  {\n                    autotune_type = \"PERFORMANCE_BASED\"\n                    max_vpus_per_gb = \"50\"\n                  }\n               ]\n            defined_tags = {\n                \"Operations.os\"= \"Linux\" ,\n                \"Organization.department\"= \"Administrators\" ,\n                \"Oracle-Tags.CreatedBy\"= \"oracleidentitycloudservice/abc@xyz.com\" ,\n                \"Oracle-Tags.CreatedOn\"= \"2021-09-16T19:59:21.745Z\" ,\n            }\n        }\n    }\n</code></pre></li> </ul>"},{"location":"terraform/storage/#buckets","title":"Buckets","text":"<ul> <li>Syntax</li> </ul> <pre><code>  buckets = {\n    Bucket Name = {\n                  compartment_id        = string\n                  name                  = string\n                  access_type           = string\n                  auto_tiering          = string\n                  object_events_enabled = bool\n                  storage_tier          = string\n                  retention_rules =[\n                  {\n                      display_name    = string\n                      duration = [{\n                          time_amount = int,\n                          time_unit   = string\n                      }]\n                      time_rule_locked = string\n                  }\n                  ]\n                  replication_policy = {\n                      name                    = string\n                      destination_bucket_name = string\n                      destination_region_name = string\n                  }\n                  lifecycle_policy = {\n                      rules = [\n                              {\n                                name        = string\n                                action      = string\n                                is_enabled  = bool\n                                Time_Amount = int\n                                Time_Unit   = string\n                                target      = string\n                                exclusion_patterns = [string]\n                                inclusion_patterns = [string]\n                                inclusion_prefixes = [string]\n                              },\n                      ]\n                    }\n                  versioning          = string\n                  defined_tags = {}\n                  freeform_tags = {}\n            }\n</code></pre> <ul> <li>Example <pre><code>  // Copyright (c) 2021, 2022, Oracle and/or its affiliates.\n  ############################\n  # Object Storage Service\n  # Object Storage - tfvars\n  # Allowed Values:\n  # compartment_id can be the ocid or the name of the compartment hierarchy delimited by double hiphens \"--\"\n  # Example : compartment_id = \"ocid1.compartment.oc1..aaaaaaaahwwiefb56epvdlzfic6ah6jy3xf3c\" or compartment_id = \"Network-root-cpt--Network\" where \"Network-root-cpt\" is the parent of \"Network\" compartment\n  # Sample import commands:\n  # importCommands[region.lower()].write(f'\\nterraform import \"module.oss-buckets[\\\\\"{variable name of the bucket}\\\\\"].oci_objectstorage_bucket.bucket\" 'f'n/{namespace name}/b/{bucket name}')\n  # importCommands[region.lower()].write(f'\\nterraform import \"module.oss-buckets[\\\\\"{variable name of the bucket}\\\\\"].oci_objectstorage_replication_policy.replication_policy[0]\" 'f'n/{namespace name}/b/{bucket name}/replicationPolicies/{replication policy id}')\n  # importCommands[region.lower()].write(f'\\nterraform import \"module.oss-buckets[\\\\\"{variable name of the bucket}\\\\\"].oci_objectstorage_object_lifecycle_policy.lifecycle_policy\" 'f'n/{namespace name}/b/{bucket name}/l')\n  ############################\n  buckets = {\n          Test_Bucket =  {\n                  compartment_id        = \"Test\"\n                  name                  = \"Test_Bucket\"\n                  access_type           = \"NoPublicAccess\"\n                  auto_tiering          = \"Disabled\"\n                  object_events_enabled = \"true\"\n                  storage_tier          = \"Standard\"\n                  retention_rules =[\n                  {\n                      display_name    = \"RT_Rule\"\n                      duration = [{\n                          time_amount = 1,\n                          time_unit   = \"DAYS\"\n                      }]\n                      time_rule_locked = \"2023-05-30T15:04:05Z\"\n                  },\n                  {\n                      display_name    = \"RT_Rule1\"\n                      duration = [{\n                          time_amount = 2,\n                          time_unit   = \"DAYS\"\n                      }]\n                      time_rule_locked = \"2023-05-30T15:04:05Z\"\n                  },\n                  ]\n                  replication_policy = {\n                      name                    = \"Test\"\n                      destination_bucket_name = \"bucket1\"\n                      destination_region_name = \"uk-london-1\"\n                  }\n                  lifecycle_policy = {\n                      rules = [\n                              {\n                                name        = \"Policy1\"\n                                action      = \"ARCHIVE\"\n                                is_enabled  = \"true\"\n                                Time_Amount = 1\n                                Time_Unit   = \"YEARS\"\n                                target      = \"objects\"\n                                exclusion_patterns = [\".pdf\"]\n                                inclusion_patterns = []\n                                inclusion_prefixes = []\n                              },\n                      ]\n                    }\n                  versioning          = \"Disabled\"\n                  defined_tags = {}\n                  freeform_tags = {}\n            },\n  ##Add New OSS Buckets for phoenix here##\n  }\n</code></pre></li> </ul>"},{"location":"terraform/storage/#fss","title":"FSS","text":"<ul> <li>Syntax</li> </ul> <p><pre><code>   mount_targets = {\n     mt_key = {\n          availability_domain    = string\n          compartment_id         = string\n          network_compartment_id = string\n          vcn_name               = string\n          subnet_id              = string\n          # Optional\n          display_name           = string\n          ip_address             = string\n          hostname_label         = string\n          nsg_ids                = list\n          defined_tags           = map\n          freeform_tags          = map\n     }\n\n   }\n\n   fss = {\n      fss_key = {\n          availability_domain         = string\n          compartment_id              = string\n          # optional\n          display_name                = string\n          source_snapshot             = string\n          snapshot_policy             = string\n          snapshot_policy_compartment = string\n          kms_key_id                  = string\n          defined_tags                = map\n          freeform_tags               = map\n      }\n  }\n\n  nfs_export_options =  {\n      export_key = {\n          export_set_id  = string\n          file_system_id = string\n          path           = string\n          export_options = list\n          defined_tags   = map\n          freeform_tags  = map\n          is_idmap_groups_for_sys_auth = bool\n      }\n  }\n\n   fss_replication = {\n       replication_key = {\n            compartment_id       = string\n            source_id            = string\n            target_id            = string\n            # optional\n            display_name         = string\n            replication_interval = number\n            defined_tags         = map\n            freeform_tags        = map\n       }\n  }\n</code></pre> - Example <pre><code>  // Copyright (c) 2021, 2022, Oracle and/or its affiliates.\n############################\n# Storage\n# Mount Target - tfvars\n# Allowed Values:\n# compartment_id can be the ocid or the name of the compartment hierarchy delimited by double hiphens \"--\"\n# Example : compartment_id = \"ocid1.compartment.oc1..aaaaaaaahwwiefb56epvdlzfic6ah6jy3xf3c\" or compartment_id = \"AppDev--Prod\" where \"AppDev\" is the parent of \"Prod\" compartment\n# Sample import command for Mount Target:\n# terraform import \"module.mts[\\\"&lt;&lt;mount_targets terraform variable name&gt;&gt;\\\"].oci_file_storage_mount_target.mount_target\" &lt;&lt;mount target ocid&gt;&gt;\n############################\nmount_targets = {\n    mnt-iad = {\n        availability_domain = \"0\"\n        compartment_id = \"appdev\"\n        network_compartment_id = \"network\"\n        vcn_name = \"vcn-iad\"\n        subnet_id = \"app-sub-1\"\n        #Optional\n        display_name = \"mnt-iad\"\n        ip_address = \"10.255.254.107\"\n\n        },\n}\n// Copyright (c) 2021, 2022, Oracle and/or its affiliates.\n############################\n# Storage\n# FSS - tfvars\n# Allowed Values:\n# compartment_id can be the ocid or the name of the compartment hierarchy delimited by double hiphens \"--\"\n# Example : compartment_id = \"ocid1.compartment.oc1..aaaaaaaahwwiefb56epvdlzfic6ah6jy3xf3c\" or compartment_id = \"AppDev--Prod\" where \"AppDev\" is the parent of \"Prod\" compartment\n# Sample import command for FSS:\n# terraform import \"module.fss[\\\"&lt;&lt;fss terraform variable name&gt;&gt;\\\"].oci_file_storage_file_system.file_system\" &lt;&lt;file system ocid&gt;&gt;\n############################\nfss = {\n    fss-iad = {\n        availability_domain = \"0\"\n        compartment_id = \"storage\"\n        #Optional\n        display_name = \"fss-iad\"\n        snapshot_policy = \"SnapshotPolicy-1\"\n        policy_compartment_id = \"storage\"\n    },    \n}\n// Copyright (c) 2021, 2022, Oracle and/or its affiliates.\n############################\n# Storage\n# Export Options - tfvars\n# Allowed Values:\n# compartment_id and policy_compartment_id can be the ocid or the name of the compartment hierarchy delimited by double hiphens \"--\"\n# Example : compartment_id = \"ocid1.compartment.oc1..aaaaaaaahwwiefb56epvdlzfic6ah6jy3xf3c\" or compartment_id = \"Network-root-cpt--Network\" where \"Network-root-cpt\" is the parent of \"Network\" compartment\n# Sample import command for Export Options:\n# terraform import \"module.fss-export-options[\\\"&lt;&lt;nfs_export_options terraform variable name&gt;&gt;\\\"].oci_file_storage_export.export\" &lt;&lt;export option ocid&gt;&gt;\n############################\nnfs_export_options = {\n    fss-iad-export = {\n        export_set_id = \"mnt-iad\"\n        file_system_id = \"fss-iad\"\n        is_idmap_groups_for_sys_auth = true\n        path = \"/fss-iad\"\n        export_options=[{\n            #Required\n            source = \"0.0.0.0/0\"\n            #Optional\n            access = \"READ_WRITE\"\n            allowed_auth = [\"SYS\"]\n            anonymous_gid = \"65534\"\n            anonymous_uid = \"65534\"\n            identity_squash = \"NONE\"\n            is_anonymous_access_allowed = \"false\"\n            require_privileged_source_port = \"false\"\n        },]\n\n        },\n}\n// Copyright (c) 2021, 2022, Oracle and/or its affiliates.\n############################\n# Storage\n# FSS REPLICATION - tfvars\n# Allowed Values:\n# compartment_id can be the ocid or the name of the compartment hierarchy delimited by double hiphens \"--\"\n# Example : compartment_id = \"ocid1.compartment.oc1..aaaaaaaahwwiefb56epvdlzfic6ah6jy3xf3c\" or compartment_id = \"AppDev--Prod\" where \"AppDev\" is the parent of \"Prod\" compartment\n# Sample import command for FSS:\n# terraform import \"module.fss-replication[\\\"&lt;&lt;fss replication terraform variable name&gt;&gt;\\\"].oci_file_storage_replication.file_system_replication\" &lt;&lt;file system ocid&gt;&gt;\n############################\nfss_replication = {\n    Replication-1 = {\n        compartment_id = \"storage\"\n        source_id    = \"fss-iad\"\n        target_id    = \"ocid1.filesystem.oc1.phx.aaaaaaaaaagd6g6nobuhqllqojxwiotqnb4c2ylefuzaaaaa\"\n        #Optional\n        display_name = \"Replication-to-phx\"\n        replication_interval = 60\n        },\n    Replication-2 = {\n        compartment_id = \"sto\"\n        source_id    = \"fss1\"\n        target_id    = \"fss3\"\n        #Optional\n        display_name = \"Replication-20240531-1315-22\"\n        replication_interval = 480\n        },\n}\n</code></pre></p>"},{"location":"terraform/tagging/","title":"Tagging","text":""},{"location":"terraform/tagging/#autotfvars-syntax-for-tagging-module","title":"auto.tfvars syntax for Tagging Module","text":"<p>These are the syntax and sample format for providing inputs to the modules via *.auto.tfvars files. \"key\" must be unique to every resource that is created. Comments preceed with ##.</p>"},{"location":"terraform/tagging/#tags","title":"TAGS","text":"<ol> <li>Tag Namespaces</li> <li> <p>Syntax</p> <p>````   tag_namespaces = {   ## key - Is a unique value to reference the resources respectively   key = {         # Required         compartment_id = string         description    = string         name           = string</p> <pre><code>    # Optional\n    defined_tags   = map\n    freeform_tags  = map\n    is_retired     = boolean\n},\n</code></pre> <p>} <code>- &lt;b&gt;Example&lt;/b&gt;</code></p> </li> <li> <p>Tag Keys</p> </li> <li> <p>Syntax</p> <p><pre><code>tag_keys = {\n    ## key - Is a unique value to reference the resources respectively\n    key = {\n        # Required\n        tag_namespace_id   = string\n        description        = string\n        name               = string\n\n        # Optional\n        defined_tags       = map\n        freeform_tags      = map\n        is_cost_tracking   = boolean\n        is_retired         = boolean\n        validator          = {\n              validator_type   = string\n              validator_values = list\n        }\n    },\n}\n</code></pre> - Example <pre><code>############################\n# Governance\n# Create Tag Keys\n# Allowed Values:\n# tag_namespace_id can be the ocid or the key of tag_namespaces (map)\n############################\ntag_keys = {\n    ArchitectureCenter--cis-oci-landing-zone-quickstart-managed_release = {\n            tag_namespace_id = \"ArchitectureCenter--cis-oci-landing-zone-quickstart-managed\"\n            description = \"CIS Landing Zone tag for OCI Architecture Center.\"\n            name = \"release\"\n            is_cost_tracking = false\n            },\n    Oracle-Tags_CreatedBy = {\n            tag_namespace_id = \"Oracle-Tags\"\n            description = \"The name of the principal that created the resource.\"\n            name = \"CreatedBy\"\n            is_cost_tracking = true\n            },\n    Oracle-Tags_CreatedOn = {\n            tag_namespace_id = \"Oracle-Tags\"\n            description = \"The date and time that the resource was created.\"\n            name = \"CreatedOn\"\n            is_cost_tracking = false\n            },\n    Oracle-Tags_TestTag = {\n            tag_namespace_id = \"Oracle-Tags\"\n            description = \"test\"\n            name = \"TestTag\"\n            is_cost_tracking = false\n            validator = [{\n            validator_type = \"ENUM\"\n            validator_values = [\"hey hi\",\"my tag\",\"value 1\"]\n            }]\n            },\n}\n</code></pre></p> </li> <li> <p>Tag Defaults</p> </li> <li> <p>Syntax</p> <p><pre><code>tag_defaults = {\n    ## key - Is a unique value to reference the resources respectively\n     key = {\n            # Required\n            compartment_id    = string\n            tag_definition_id = string\n            value             = string\n\n            # Optional\n            is_required       = bool\n     }\n}\n</code></pre> - Example <pre><code>############################\n# Governance\n# Create Default Tags\n# Allowed Values:\n# tag_definition_id can be the ocid or the key of tag_definitions (map)\n# compartment_id can be the ocid or the name of the compartment hierarchy delimited by double hiphens \"--\"\n# Example : compartment_id = \"ocid1.compartment.oc1..aaaaaaaahwwiefb56epvdlzfic6ah6jy3xf3c\" or compartment_id = \"Network-root-cpt--Network\" where \"Network-root-cpt\" is the parent of \"Network\" compartment\n########################################################\ntag_defaults = {\n    Oracle-Tags_CreatedBy_root-default = {\n            # Required\n            tag_definition_id = \"Oracle-Tags_CreatedBy\"\n            compartment_id = \"root\"\n            value = \"$${iam.principal.name}\"\n             },\n    Oracle-Tags_CreatedOn_root-default = {\n            # Required\n            tag_definition_id = \"Oracle-Tags_CreatedOn\"\n            compartment_id = \"root\"\n            value = \"$${oci.datetime}\"\n             },\n}\n</code></pre></p> </li> </ol>"},{"location":"terraform/tagging/#_1","title":"Tagging","text":""},{"location":"terraform/tagging/#governance","title":"Governance","text":""},{"location":"terraform/tagging/#create-tag-namespaces","title":"Create Tag Namespaces","text":""},{"location":"terraform/tagging/#allowed-values","title":"Allowed Values:","text":""},{"location":"terraform/tagging/#compartment_id-can-be-the-ocid-or-the-name-of-the-compartment-hierarchy-delimited-by-double-hiphens-","title":"compartment_id can be the ocid or the name of the compartment hierarchy delimited by double hiphens \"--\"","text":""},{"location":"terraform/tagging/#example-compartment_id-ocid1compartmentoc1aaaaaaaahwwiefb56epvdlzfic6ah6jy3xf3c-or-compartment_id-network-root-cpt-network-where-network-root-cpt-is-the-parent-of-network-compartment","title":"Example : compartment_id = \"ocid1.compartment.oc1..aaaaaaaahwwiefb56epvdlzfic6ah6jy3xf3c\" or compartment_id = \"Network-root-cpt--Network\" where \"Network-root-cpt\" is the parent of \"Network\" compartment","text":""},{"location":"terraform/tagging/#_2","title":"Tagging","text":"<p>tag_namespaces = {     ArchitectureCenter--cis-oci-landing-zone-quickstart-managed = {             # Required             compartment_id = \"root\"             description = \"CIS Landing Zone tag namespace for OCI Architecture Center.\"             name = \"ArchitectureCenter\\cis-oci-landing-zone-quickstart-managed\"             },     Oracle-Tags = {             # Required             compartment_id = \"root\"             description = \"The namespace for the automatic tags.\"             name = \"Oracle-Tags\"             },     OracleInternalReserved = {             # Required             compartment_id = \"root\"             description = \"Oracle Internal Reserved Tags for workload classification\"             name = \"OracleInternalReserved\"             }, } ````</p>"},{"location":"terraform/tagging_notneeded/","title":"Tagging notneeded","text":""},{"location":"terraform/tagging_notneeded/#autotfvars-syntax-for-tagging-module","title":"auto.tfvars syntax for Tagging Module","text":"<p>These are the syntax and sample format for providing inputs to the modules via *.auto.tfvars files. \"key\" must be unique to every resource that is created. Comments preceed with ##.</p>"},{"location":"terraform/tagging_notneeded/#tags","title":"TAGS","text":"<ol> <li>Tag Namespaces</li> <li> <p>Syntax</p> <p>````   tag_namespaces = {   ## key - Is a unique value to reference the resources respectively   key = {         # Required         compartment_id = string         description    = string         name           = string</p> <pre><code>    # Optional\n    defined_tags   = map\n    freeform_tags  = map\n    is_retired     = boolean\n},\n</code></pre> <p>} <code>- &lt;b&gt;Example&lt;/b&gt;</code></p> </li> <li> <p>Tag Keys</p> </li> <li> <p>Syntax</p> <p><pre><code>tag_keys = {\n    ## key - Is a unique value to reference the resources respectively\n    key = {\n        # Required\n        tag_namespace_id   = string\n        description        = string\n        name               = string\n\n        # Optional\n        defined_tags       = map\n        freeform_tags      = map\n        is_cost_tracking   = boolean\n        is_retired         = boolean\n        validator          = {\n              validator_type   = string\n              validator_values = list\n        }\n    },\n}\n</code></pre> - Example <pre><code>############################\n# Governance\n# Create Tag Keys\n# Allowed Values:\n# tag_namespace_id can be the ocid or the key of tag_namespaces (map)\n############################\ntag_keys = {\n    ArchitectureCenter--cis-oci-landing-zone-quickstart-managed_release = {\n            tag_namespace_id = \"ArchitectureCenter--cis-oci-landing-zone-quickstart-managed\"\n            description = \"CIS Landing Zone tag for OCI Architecture Center.\"\n            name = \"release\"\n            is_cost_tracking = false\n            },\n    Oracle-Tags_CreatedBy = {\n            tag_namespace_id = \"Oracle-Tags\"\n            description = \"The name of the principal that created the resource.\"\n            name = \"CreatedBy\"\n            is_cost_tracking = true\n            },\n    Oracle-Tags_CreatedOn = {\n            tag_namespace_id = \"Oracle-Tags\"\n            description = \"The date and time that the resource was created.\"\n            name = \"CreatedOn\"\n            is_cost_tracking = false\n            },\n    Oracle-Tags_TestTag = {\n            tag_namespace_id = \"Oracle-Tags\"\n            description = \"test\"\n            name = \"TestTag\"\n            is_cost_tracking = false\n            validator = [{\n            validator_type = \"ENUM\"\n            validator_values = [\"hey hi\",\"my tag\",\"value 1\"]\n            }]\n            },\n}\n</code></pre></p> </li> <li> <p>Tag Defaults</p> </li> <li> <p>Syntax</p> <p><pre><code>tag_defaults = {\n    ## key - Is a unique value to reference the resources respectively\n     key = {\n            # Required\n            compartment_id    = string\n            tag_definition_id = string\n            value             = string\n\n            # Optional\n            is_required       = bool\n     }\n}\n</code></pre> - Example <pre><code>############################\n# Governance\n# Create Default Tags\n# Allowed Values:\n# tag_definition_id can be the ocid or the key of tag_definitions (map)\n# compartment_id can be the ocid or the name of the compartment hierarchy delimited by double hiphens \"--\"\n# Example : compartment_id = \"ocid1.compartment.oc1..aaaaaaaahwwiefb56epvdlzfic6ah6jy3xf3c\" or compartment_id = \"Network-root-cpt--Network\" where \"Network-root-cpt\" is the parent of \"Network\" compartment\n########################################################\ntag_defaults = {\n    Oracle-Tags_CreatedBy_root-default = {\n            # Required\n            tag_definition_id = \"Oracle-Tags_CreatedBy\"\n            compartment_id = \"root\"\n            value = \"$${iam.principal.name}\"\n             },\n    Oracle-Tags_CreatedOn_root-default = {\n            # Required\n            tag_definition_id = \"Oracle-Tags_CreatedOn\"\n            compartment_id = \"root\"\n            value = \"$${oci.datetime}\"\n             },\n}\n</code></pre></p> </li> </ol>"},{"location":"terraform/tagging_notneeded/#_1","title":"Tagging notneeded","text":""},{"location":"terraform/tagging_notneeded/#governance","title":"Governance","text":""},{"location":"terraform/tagging_notneeded/#create-tag-namespaces","title":"Create Tag Namespaces","text":""},{"location":"terraform/tagging_notneeded/#allowed-values","title":"Allowed Values:","text":""},{"location":"terraform/tagging_notneeded/#compartment_id-can-be-the-ocid-or-the-name-of-the-compartment-hierarchy-delimited-by-double-hiphens-","title":"compartment_id can be the ocid or the name of the compartment hierarchy delimited by double hiphens \"--\"","text":""},{"location":"terraform/tagging_notneeded/#example-compartment_id-ocid1compartmentoc1aaaaaaaahwwiefb56epvdlzfic6ah6jy3xf3c-or-compartment_id-network-root-cpt-network-where-network-root-cpt-is-the-parent-of-network-compartment","title":"Example : compartment_id = \"ocid1.compartment.oc1..aaaaaaaahwwiefb56epvdlzfic6ah6jy3xf3c\" or compartment_id = \"Network-root-cpt--Network\" where \"Network-root-cpt\" is the parent of \"Network\" compartment","text":""},{"location":"terraform/tagging_notneeded/#_2","title":"Tagging notneeded","text":"<p>tag_namespaces = {     ArchitectureCenter--cis-oci-landing-zone-quickstart-managed = {             # Required             compartment_id = \"root\"             description = \"CIS Landing Zone tag namespace for OCI Architecture Center.\"             name = \"ArchitectureCenter\\cis-oci-landing-zone-quickstart-managed\"             },     Oracle-Tags = {             # Required             compartment_id = \"root\"             description = \"The namespace for the automatic tags.\"             name = \"Oracle-Tags\"             },     OracleInternalReserved = {             # Required             compartment_id = \"root\"             description = \"Oracle Internal Reserved Tags for workload classification\"             name = \"OracleInternalReserved\"             }, } ````</p>"}]}