Note- All Sample input files under example folder.
Everything now works with Python 3.7.
Install the following:
1.  Install VC++ tools from https://visualstudio.microsoft.com/downloads/
    "Microsoft Visual C++ Redistributable for Visual Studio 2019"
2.  pycryptodome and pycryptodomex via pip (pip3)


-----------------------------------------------------------------------------------------------------
1. createPEMKeys.py
-----------------------------------------------------------------------------------------------------
The script createPEMKeys.py creates public/private key pair in PEM format required for Terraform and Python APIs to communicate with OCI.
Set up the OCI tenancy. The public key is copied to the user profile in OCI console. And private key and fingerprint is used as input in config file for python API
and vairables.tf for Terraform.

Install VC++ tools from https://visualstudio.microsoft.com/downloads/
"Microsoft Visual C++ Redistributable for Visual Studio 2019"


Usage:
./createPEMKeys.py

output: oci_api_private.pem and oci_api_public.pem


-- Install the pycryptodome & pycryptodomex package using pip / Pycharm.
   you need to install Microsoft Visual C++ Compiler. Download it from :
   https://www.visualstudio.com/en-us/downloads/download-visual-studio-vs.aspx
   Download MS Visual Studio 2015 (Community Edition) and install the C/C++ compilers and the redistributable only.

-- Rest of the code is compiled with Python.7

Setup OCI Communication using API
----------------------------------
Upload public key generated abovve to OCI console
Copy config file from example folder and modify details as per your environment.


-----------------------------------------------------------------------------------------------------
2. OCSWorkVM/Setup from other work station eg your laptop
-----------------------------------------------------------------------------------------------------
If you need to create OCS VM then start with ReadMe and createOCSWork.py script under OCSWorkVM. OCS VM will have all  directories, files and configurations
already created for you which are required by execution of all further scripts. You can directly proceed to 3. fetch_compartments_to_variablesTF.py

If you don't need OCS VM and want to continue from your laptop then you would need to setup terraform as below and also setup config file required for Python
API to communicate with OCI.

### Use URL: https://learn.hashicorp.com/terraform/getting-started/install.html to setup terraform on your work station ###

##### You can use the below script or follow the steps below to create your terraform environment ####
#!/bin/bash

echo "Download terraform.zip from terraform.io for your platform"
echo "Example: wget <URL> -O terraform.zip"
echo "Unzip it and move it over to /usr/local/bin.  Make sure /usr/local/bin is in your path"
echo "This will download the v2.1.0 OCI terraform provider"

wget https://github.com/oracle/terraform-provider-oci/releases/download/v2.1.0-beta/linux.tar.gz
tar -xvzf linux.tar.gz linux_amd64
mkdir ~/.terraform.d/plugins/
mv linux_amd64/terraform-provider-oci_v2.1.0-beta ~/.terraform.d/plugins/
rmdir linux_amd64

If you are not running the script from OCSVM then you should create 'outdir' where you should copy provider.tf and variables.tf file and generate output
files of all scripts.

Initialize Terraform with the required variables from this 'outdir'.
A copy of variables.tf is included for reference in this package. provider.tf has also been provided - which will use the variables in variables.tf and initialize the oci provider when you run terraform init.
You can use the provider.tf file as is  - unless you've made changes to variables.tf resource names (changes not recommmended)

Once complete with setting up terraform and changing variables.tf - initialize Terraform
terraform init

This should show you that terraform oci provider is initialized.

-----------------------------------------------------------------------------------------------------
3. fetch_compartments_to_variablesTF.py
-----------------------------------------------------------------------------------------------------
This script will fetch compartments which have already been created in the tenancy(either manually or through any script)
and update their OCID info to variables.tf file. This will be used later by terraform files to create OCI objects.

This script should be run prior to running setUpOCI.py and should be run only once else it will append compartment variables with same name multiple times.

Usage:
./fetch_compartments_to_variablesTF.py <path to variables.tf>

If running from OCS VM:
./fetch_compartments_to_variablesTF.py /root/ocswork/terrafor_files/variables.tf

If running from other workstation like your laptop, specify path to variables.tf under your 'outdir' and path of 'config' file for Python OCI
./fetch_compartments_to_variablesTF.py <outdir>/variables.tf --configFileName config

-----------------------------------------------------------------------------------------------------
4. setUpOCI.py
-----------------------------------------------------------------------------------------------------
This is the wrapper script to do various tasks in OCI. It displays the utilities that can be performed as options to the user and accepts the user input.

Idealy you should create a 'in_dir' where you should place your input files required by various scripts. Sample input files are available under example folder
inside respective directories.
If you are running the script from OCSVM then '/root/ocswork/terraform_files' is your output directory where you should generate output of all scripts.
If you are not running the script from OCSVM then you should create 'outdir' where you should copy provider.tf and variables.tf file and generate output
files of all scripts.

Usage:
./setUpOCI.py



Note-
If you are running all scritps from your laptop you would need to install few more packages like pandas, openpyxl, xlrd etc