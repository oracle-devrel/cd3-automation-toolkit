Note- All Sample input files under example folder.
Everything now works with Python 3.7.

-----------------------------------------------------------------------------------------------------
1. createPEMKeys.py
-----------------------------------------------------------------------------------------------------
The script createPEMKeys.py creates public/private key pair in PEM format required for Terraform and Python APIs to communicate with OCI.
Set up the OCI tenancy. The public key is copied to the user profile in OCI console. And private key and fingerprint is used as input in config file for python API
and variables.tf for Terraform.

PreRequisite:
Install the following packages in your PyCharm:
pycryptodome and pycryptodomex

Usage:
./createPEMKeys.py

Output:
oci_api_private.pem and oci_api_public.pem

Setup OCI Communication using API
----------------------------------
Upload public key generated above to OCI console
Copy config file from example folder and modify details as per your environment.

-----------------------------------------------------------------------------------------------------
2. OCSWorkVM/Setup from other work station eg your laptop
-----------------------------------------------------------------------------------------------------
If you need to create OCS VM then start with ReadMe and createOCSWork.py script under OCSWorkVM. OCS VM will have all  directories, files and configurations
already created for you which are required by execution of all further scripts. You can directly proceed to 3. fetch_compartments_to_variablesTF.py

If you don't need OCS VM and want to continue from your laptop then you would need to setup terraform as below and also setup config file required for Python
API to communicate with OCI.

### Use URL: https://learn.hashicorp.com/terraform/getting-started/install.html to setup terraform on your work station ###

##### You can use the below script or follow the steps below to create your terraform environment (on a linux machine)####
#!/bin/bash

echo "Download terraform.zip from terraform.io for your platform"
echo "Example: wget <URL> -O terraform.zip"
echo "Unzip it and move it over to /usr/local/bin.  Make sure /usr/local/bin is in your path"
echo "This will download the v2.1.0 OCI terraform provider"

wget https://github.com/oracle/terraform-provider-oci/releases/download/v2.1.0-beta/linux.tar.gz
tar -xvzf linux.tar.gz linux_amd64
mkdir ~/.terraform.d/plugins/
mv linux_amd64/terraform-provider-oci_v2.1.0-beta ~/.terraform.d/plugins/
rmdir linux_amd64

If you are not running the script from OCSVM then you should create 'outdir' inside which you should create directories with names of regions your OCI
tenancy is subscribed to eg ashburn and phoenix and copy provider.tf and variables_<region>.tf file.
An example of variables.tf and provider.tf has included for reference in this package.
These directories would contain output TF files generated by the setUpOCI toolkit as per the region for each resource in your cd3.

Initialize Terraform with the required variables from this 'outdir' once done with setting up terraform and changing variables_<region>.tf
as per requirement.
terraform init

This should show you that terraform oci provider is initialized.

-----------------------------------------------------------------------------------------------------
3. fetch_compartments_to_variablesTF.py
-----------------------------------------------------------------------------------------------------
This script will fetch compartments which have already been created in the tenancy(either manually or through any script)
and update their OCID info to variables.tf file. This will be used later by terraform files to create OCI objects.

This script should be run prior to running setUpOCI.py

Usage:
./fetch_compartments_to_variablesTF.py <path to 'outdir'>

If running from OCS VM:
./fetch_compartments_to_variablesTF.py /root/ocswork/terraform_files

If running from other workstation like your laptop, specify path to 'outdir' and path of 'config' file for Python OCI
./fetch_compartments_to_variablesTF.py <path to outdir> --configFileName <path to config file>

-----------------------------------------------------------------------------------------------------
4. setUpOCI.py
-----------------------------------------------------------------------------------------------------
This is the wrapper script to do various tasks in OCI. It displays the utilities that can be performed as options to the user and accepts the user input.

Ideally you should create a 'in_dir' where you should place your input files required by various scripts. Sample input files are available under example folder
inside respective directories.
If you are running the script from OCSVM then '/root/ocswork/terraform_files' is your output directory where you should generate output of all scripts.
If you are not running the script from OCSVM then you should create 'outdir' with region names as subdirectories where you should copy provider.tf and variables_<region>.tf file and generate output
files of all scripts.

Usage:
./setUpOCI.py setUpOCI.properties

where setUpOCI.properties is the input file which contains various input paths required by script execution.

Note-
If you are running all scripts from your laptop you would need to install few more packages like pandas, openpyxl, xlrd etc