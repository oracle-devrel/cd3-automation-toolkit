<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1326.ve643e00e9220">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@2.2150.v4cfd8916915c"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@2.2150.v4cfd8916915c">
      <jobProperties/>
      <triggers/>
      <parameters>
        <string>Excel_Template</string>
      </parameters>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
    <org.jenkinsci.plugins.workflow.multibranch.JobPropertyTrackerAction plugin="workflow-multibranch@756.v891d88f2cd46">
      <jobPropertyDescriptors>
        <string>hudson.model.ParametersDefinitionProperty</string>
      </jobPropertyDescriptors>
    </org.jenkinsci.plugins.workflow.multibranch.JobPropertyTrackerAction>
  </actions>
  <description>Execute setUpOCI</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@330.v645b_7df10e2a_">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <io.jenkins.plugins.file__parameters.StashedFileParameterDefinition plugin="file-parameters@316.va_83a_1221db_a_7">
          <name>Excel_Template</name>
          <description>Upload input Excel file for the services chosen.
Previously uploaded file will be used if left empty.</description>
        </io.jenkins.plugins.file__parameters.StashedFileParameterDefinition>
        <org.biouno.unochoice.ChoiceParameter plugin="uno-choice@2.8.1">
          <name>Workflow</name>
          <description>Select Automation Toolkit Workflow</description>
          <randomName>choice-parameter-23492076346439</randomName>
          <visibleItemCount>1</visibleItemCount>
          <script class="org.biouno.unochoice.model.ScriptlerScript">
            <scriptlerScriptId>Workflow.groovy</scriptlerScriptId>
            <scriptlerBuilder plugin="scriptler@334.v29792d5a_c058">
              <builderId>active-choices</builderId>
              <scriptId>Workflow.groovy</scriptId>
              <propagateParams>false</propagateParams>
              <parameters/>
            </scriptlerBuilder>
            <isSandboxed>true</isSandboxed>
          </script>
          <choiceType>PT_RADIO</choiceType>
        </org.biouno.unochoice.ChoiceParameter>
        <org.biouno.unochoice.CascadeChoiceParameter plugin="uno-choice@2.8.1">
          <name>MainOptions</name>
          <description>Select Main Options</description>
          <randomName>choice-parameter-23492076464252</randomName>
          <visibleItemCount>1</visibleItemCount>
          <script class="org.biouno.unochoice.model.ScriptlerScript">
            <scriptlerScriptId>MainOptions.groovy</scriptlerScriptId>
            <parameters class="linked-hash-map">
              <entry>
                <string>Workflow</string>
                <string>${Workflow}</string>
              </entry>
            </parameters>
            <scriptlerBuilder plugin="scriptler@334.v29792d5a_c058">
              <builderId>active-choices</builderId>
              <scriptId>MainOptions.groovy</scriptId>
              <propagateParams>false</propagateParams>
              <parameters>
                <org.jenkinsci.plugins.scriptler.config.Parameter>
                  <name>Workflow</name>
                  <value>${Workflow}</value>
                </org.jenkinsci.plugins.scriptler.config.Parameter>
              </parameters>
            </scriptlerBuilder>
            <isSandboxed>true</isSandboxed>
          </script>
          <parameters class="linked-hash-map"/>
          <referencedParameters>Workflow</referencedParameters>
          <choiceType>PT_CHECKBOX</choiceType>
        </org.biouno.unochoice.CascadeChoiceParameter>
        <org.biouno.unochoice.CascadeChoiceParameter plugin="uno-choice@2.8.1">
          <name>SubOptions</name>
          <description>Select Sub Options</description>
          <randomName>choice-parameter-23492076517486</randomName>
          <visibleItemCount>1</visibleItemCount>
          <script class="org.biouno.unochoice.model.ScriptlerScript">
            <scriptlerScriptId>SubOptions.groovy</scriptlerScriptId>
            <parameters class="linked-hash-map">
              <entry>
                <string>MainOptions</string>
                <string>${MainOptions}</string>
              </entry>
            </parameters>
            <scriptlerBuilder plugin="scriptler@334.v29792d5a_c058">
              <builderId>active-choices</builderId>
              <scriptId>SubOptions.groovy</scriptId>
              <propagateParams>false</propagateParams>
              <parameters>
                <org.jenkinsci.plugins.scriptler.config.Parameter>
                  <name>MainOptions</name>
                  <value>${MainOptions}</value>
                </org.jenkinsci.plugins.scriptler.config.Parameter>
              </parameters>
            </scriptlerBuilder>
            <isSandboxed>true</isSandboxed>
          </script>
          <parameters class="linked-hash-map"/>
          <referencedParameters>MainOptions</referencedParameters>
          <choiceType>PT_CHECKBOX</choiceType>
        </org.biouno.unochoice.CascadeChoiceParameter>
        <org.biouno.unochoice.CascadeChoiceParameter plugin="uno-choice@2.8.1">
          <name>SubChildOptions</name>
          <description>Select Options for the SubOptions selected above</description>
          <randomName>choice-parameter-23492076566925</randomName>
          <visibleItemCount>1</visibleItemCount>
          <script class="org.biouno.unochoice.model.ScriptlerScript">
            <scriptlerScriptId>SubChildOptions.groovy</scriptlerScriptId>
            <parameters class="linked-hash-map">
              <entry>
                <string>SubOptions</string>
                <string>${SubOptions}</string>
              </entry>
            </parameters>
            <scriptlerBuilder plugin="scriptler@334.v29792d5a_c058">
              <builderId>active-choices</builderId>
              <scriptId>SubChildOptions.groovy</scriptId>
              <propagateParams>false</propagateParams>
              <parameters>
                <org.jenkinsci.plugins.scriptler.config.Parameter>
                  <name>SubOptions</name>
                  <value>${SubOptions}</value>
                </org.jenkinsci.plugins.scriptler.config.Parameter>
              </parameters>
            </scriptlerBuilder>
            <isSandboxed>true</isSandboxed>
          </script>
          <parameters class="linked-hash-map"/>
          <referencedParameters>SubOptions</referencedParameters>
          <choiceType>PT_CHECKBOX</choiceType>
        </org.biouno.unochoice.CascadeChoiceParameter>
        <org.biouno.unochoice.DynamicReferenceParameter plugin="uno-choice@2.8.1">
          <name>AdditionalFilters</name>
          <description>Select additional filters</description>
          <randomName>choice-parameter-23492076642248</randomName>
          <visibleItemCount>1</visibleItemCount>
          <script class="org.biouno.unochoice.model.ScriptlerScript">
            <scriptlerScriptId>AdditionalFilters.groovy</scriptlerScriptId>
            <parameters class="linked-hash-map">
              <entry>
                <string>SubChildOptions</string>
                <string>${SubChildOptions}</string>
              </entry>
              <entry>
                <string>SubOptions</string>
                <string>${SubOptions}</string>
              </entry>
              <entry>
                <string>Workflow</string>
                <string>${Workflow}</string>
              </entry>
            </parameters>
            <scriptlerBuilder plugin="scriptler@334.v29792d5a_c058">
              <builderId>active-choices</builderId>
              <scriptId>AdditionalFilters.groovy</scriptId>
              <propagateParams>false</propagateParams>
              <parameters>
                <org.jenkinsci.plugins.scriptler.config.Parameter>
                  <name>SubChildOptions</name>
                  <value>${SubChildOptions}</value>
                </org.jenkinsci.plugins.scriptler.config.Parameter>
                <org.jenkinsci.plugins.scriptler.config.Parameter>
                  <name>SubOptions</name>
                  <value>${SubOptions}</value>
                </org.jenkinsci.plugins.scriptler.config.Parameter>
                <org.jenkinsci.plugins.scriptler.config.Parameter>
                  <name>Workflow</name>
                  <value>${Workflow}</value>
                </org.jenkinsci.plugins.scriptler.config.Parameter>
              </parameters>
            </scriptlerBuilder>
            <isSandboxed>true</isSandboxed>
          </script>
          <parameters class="linked-hash-map"/>
          <referencedParameters>Workflow,SubOptions,SubChildOptions</referencedParameters>
          <choiceType>ET_FORMATTED_HTML</choiceType>
          <omitValueField>false</omitValueField>
        </org.biouno.unochoice.DynamicReferenceParameter>
        </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@3826.v3b_5707fe44da_">
    <script>def buildstatus = ""
def git_status = 0
def generateStage(job) {
    return {
        stage("Stage: ${job}") {
            def values = job.split('/')
            if (values.size() > 1) {
                region = values[0]
                service = values[1]
                job_name = "./terraform_files/${region}/${service}/apply".replace("//","/")
            }else {
                region = values[0]
                job_name = "./terraform_files/${region}/apply".replace("//","/")
            }
            build job: "${job_name}"
        }
    }
}
properties([
    parameters([
        [
            $class: 'ChoiceParameter',
            choiceType: 'PT_RADIO',
            description: 'Select Automation Toolkit Workflow',
            name: 'Workflow',
            script: [
                $class: 'ScriptlerScript',
                scriptlerScriptId:'Workflow.groovy'
            ]
        ],
        [
            $class: 'CascadeChoiceParameter',
            choiceType: 'PT_CHECKBOX',
            description: 'Select Main Options',
            name: 'MainOptions',
            referencedParameters: 'Workflow',
            script: [
                $class: 'ScriptlerScript',
                scriptlerScriptId:'MainOptions.groovy',
                parameters: [
                    [name:'Workflow', value: '${Workflow}']
                ]
            ]
       ],
       [
            $class: 'CascadeChoiceParameter',
            choiceType: 'PT_CHECKBOX',
            description: 'Select Sub Options',
            name: 'SubOptions',
            referencedParameters: 'MainOptions',
            script: [
                $class: 'ScriptlerScript',
                scriptlerScriptId:'SubOptions.groovy',
                parameters: [
                    [name:'MainOptions', value: '${MainOptions}']
                ]
            ]
       ],
       [
            $class: 'CascadeChoiceParameter',
            choiceType: 'PT_CHECKBOX',
            description: 'Select Options for the SubOptions selected above',
            name: 'SubChildOptions',
            referencedParameters: 'SubOptions',
            script: [
                $class: 'ScriptlerScript',
                scriptlerScriptId:'SubChildOptions.groovy',
                parameters: [
                    [name:'SubOptions', value: '${SubOptions}']
                ]
            ]
       ],
       [
            $class: 'DynamicReferenceParameter',
            choiceType: 'ET_FORMATTED_HTML',
            description: 'Select additional filters',
            name: 'AdditionalFilters',
            referencedParameters: 'Workflow,SubOptions,SubChildOptions',
             script: [
                $class: 'ScriptlerScript',
                scriptlerScriptId: 'AdditionalFilters.groovy',
                parameters: [
                    [name:'SubOptions', value: '${SubOptions}'],
					[name: 'SubChildOptions', value: '${SubChildOptions}'],
                    [name:'Workflow', value: '${Workflow}']
                ]
            ]
       ]
    ])
])
pipeline {
    agent any
        options {
        ansiColor('xterm')
    }
    environment {
        prop_file = "/cd3user/tenancies/${customer_prefix}/${customer_prefix}_setUpOCI.properties"
        current_timestamp = sh (script: 'date +%s', returnStdout: true).trim()
    }
    parameters {
        stashedFile (
            name: 'Excel_Template',
            description: "Upload input Excel file.\nPreviously uploaded file will be used if left empty."
            )
    }
    stages {
		stage ('Validate Input Parameters') {
		    steps {
		        catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                withFileParameter('Excel_Template') {
                    unstash 'Excel_Template'
                    script {
                            exlfile_check = sh(script: '''
                                set +x
                                if [[ -n "$Excel_Template_FILENAME" ]];then
                                	size=$(wc --bytes &lt; "$Excel_Template")
                                    if [[ ( $size -gt 1000000 ) || ( $Excel_Template_FILENAME != *.xlsx ) ]]; then
                                        set -x
                                        echo "Excel File Validation Failed"
                                    fi
                                fi
                                ''' , returnStdout: true).trim()
                            if ("${exlfile_check}".contains("Failed")) {
                                mitem = "excel template"
                                file_check = "Failed"
                            } else {
                                file_check = "Passed"
                                }
                    }
                }
        		script {
        		    def ParametersValidationScript = load "$JENKINS_HOME/scriptler/scripts/ValidateParams.groovy"
                    ParametersValidation = ParametersValidationScript.validate_params(Workflow,MainOptions,SubOptions,SubChildOptions,AdditionalFilters)
                    if (ParametersValidation == "Passed" &amp;&amp; file_check == "Passed") {
                        echo 'Parameter Validation Successful.'

            		}else {
            		    unstable(message:"Input Parameter Validation Failed. Setting Build to Unstable")
                        ParametersValidation = "Failed"
                    }
    		    }
		    }
        	}
		}
        stage('Update setUpOCI.properties') {
			when{
			    allOf {
                expression {return ParametersValidation == "Passed" }
                expression {return currentBuild.result != "ABORTED" }
                expression {return currentBuild.result != "FAILURE" }
			    }

            }
			steps {
			    catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
			    withFileParameter('Excel_Template') {
                    unstash 'Excel_Template'
                    sh '''
                        set +x
                        if [ "$Excel_Template_FILENAME" ]; then
                            time_stamp="$(date +%m-%d-%Y-%H-%M-%S)"
                            cd3_file="/cd3user/tenancies/${customer_prefix}/$Excel_Template_FILENAME"
                            cd3_backup="${cd3_file}_${time_stamp}"
                            if [ -e "$cd3_file" ]; then
                                cp "$cd3_file" "$cd3_backup"
                            fi
                            cp "$Excel_Template" "$cd3_file"
                            sed -i "s|cd3file=.*|cd3file=${cd3_file}|g" $prop_file
                        fi
                    '''
                }
                sh '''
                    set +x
                    if grep -q "Create" &lt;&lt;&lt; "${Workflow}"; then
                        workflow="create_resources"
                    elif grep -q "Export" &lt;&lt;&lt; "${Workflow}"; then
                        workflow="export_resources"
                    fi
                    if [ `grep '^workflow_type'  $prop_file` ] ; then
                        sed -i "s/^workflow_type=.*/workflow_type=${workflow}/g" $prop_file
                    else
                        echo "\nworkflow_type=${workflow}" >> $prop_file
                    fi
                '''
            }
        }
        }
        stage('Execute setUpOCI') {
            when{
                allOf {
                expression {return ParametersValidation == "Passed" }
                expression {return currentBuild.result != "ABORTED" }
                expression {return currentBuild.result != "FAILURE" }
                }
            }

			steps {
			    catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                    sh '''

                        cd /cd3user/oci_tools/cd3_automation_toolkit
                        python --version
                        python setUpOCI.py --devops True --main_options "${MainOptions}" --sub_options "${SubOptions}" --sub_child_options "${SubChildOptions}" --add_filter "${AdditionalFilters}" $prop_file

                    '''
                script {
                    sh '''
                    set +x

		            # For latest CD3 XL file.
		            latestXL=`ls -t /cd3user/tenancies/${customer_prefix}/*.xl* | head -n 1`
                    echo "XL is ${latestXL}"
                    rm -f *.*
                    cp ${latestXL} .

                    # Check for cis_reports and show_oci directories
                    if [ -d "/cd3user/tenancies/${customer_prefix}/othertools_files/${customer_prefix}_cis_report" ]; then
                    last_modified=`stat -c "%Y" /cd3user/tenancies/${customer_prefix}/othertools_files/${customer_prefix}_cis_report`
                    if [ $(($last_modified-$current_timestamp)) -gt 0 ]; then
                        cp -r /cd3user/tenancies/${customer_prefix}/othertools_files/${customer_prefix}_cis_report .
                        tar -cf ${customer_prefix}_cis_report.zip ${customer_prefix}_cis_report/
                        rm -rf ${customer_prefix}_cis_report
                    fi
                    fi
                    if [ -d "/cd3user/tenancies/${customer_prefix}/othertools_files/${customer_prefix}_showoci_report" ]; then
                    last_modified=`stat -c "%Y" /cd3user/tenancies/${customer_prefix}/othertools_files/${customer_prefix}_showoci_report`
                    if [ $(($last_modified-$current_timestamp)) -gt 0 ]; then
                        cp -r /cd3user/tenancies/${customer_prefix}/othertools_files/${customer_prefix}_showoci_report .
                        tar -cf ${customer_prefix}_showoci_report.zip ${customer_prefix}_showoci_report/
                        rm -rf ${customer_prefix}_showoci_report
                    fi
                    fi

                    # For latest oci_fsdr plan XL file.
                    count=`ls -1 /cd3user/tenancies/${customer_prefix}/othertools_files/*.xl* 2>/dev/null | wc -l`
                    if [ $count != 0 ]; then
            		latest_fsdr_XL=`ls -t /cd3user/tenancies/${customer_prefix}/othertools_files/*.xl* | head -n 1`
            		last_modified=`stat -c \"%Y\" ${latest_fsdr_XL}`
            		if [ $(($last_modified-$current_timestamp)) -gt 0 ]; then
            		    cp ${latest_fsdr_XL} .
            		fi
            		fi
            		'''
                    }
                }
            }
            post {
                success {
                    archiveArtifacts '*.xl*, *.zip'

                }
            }
        }
        stage ('Run Import Commands') {
            when {
				allOf {
				    expression {return "${Workflow}".toLowerCase().contains("export")}
				    expression {return ParametersValidation == "Passed" }
				    expression {return currentBuild.result != "ABORTED" }
                    expression {return currentBuild.result != "FAILURE" }

				}
            }
            steps {
                catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                script {
                    def data = readFile(file: "/cd3user/tenancies/${customer_prefix}/terraform_files/.safe/import_scripts.safe")
                    def lines = data.readLines()
                    for (line in lines) {
                        script_full_path = (line.replace('//','/')).split("/")
                        script_name = script_full_path.last()
                        script_path = line.split("${script_name}")[0]
                        sh(script:"cd ${script_path};sh ./${script_name}")
                    }
                }
            }
        }
        }
        stage ('Git Commit to develop') {
            when{
                allOf {
                    expression {return ParametersValidation == "Passed" }
                    expression {return currentBuild.result != "ABORTED" }
                    expression {return currentBuild.result != "FAILURE" }
                }
            }
			steps {
			    catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                script {
                    git_status = sh(script: "cd /cd3user/tenancies/${customer_prefix}/terraform_files; git status --porcelain | wc -l", returnStdout: true).trim()
                    // Check if anything to commit
                    if ("${git_status}" > 0) {
                        sh(script: '''
                            set +x
                            cd /cd3user/tenancies/${customer_prefix}/terraform_files
                            echo "-----start timestamp-----"
                            time_stamp="$(date +%m-%d-%Y-%H-%M-%S)"
                            commit_msg="commit for setUpOCI build ${BUILD_NUMBER}"
                            git add -A .
                            git commit -m "${commit_msg}"
                            git push origin develop
                         ''')
                    }else {
                        echo 'Nothing to commit. Skipping further stages.'
                    }
                }
            }
        }
        }
        stage ('Trigger Pipelines'){
            when {
			    allOf{
    				expression {return "${git_status}" > 0}
    				expression {return ParametersValidation == "Passed" }
    				expression {return currentBuild.result != "ABORTED" }
                    expression {return currentBuild.result != "FAILURE" }
			    }
			}
            steps {
                catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                script {
                    def jobs = []
                    def data = readFile(file: "/cd3user/tenancies/${customer_prefix}/terraform_files/.safe/updated_paths.safe")
                    def lines = data.readLines()
                    if (lines.size() == 0) {
                        println("No terraform configuration file generated")
                    }
                    for (line in lines) {
                        line = line.split('terraform_files/')[1]
                        jobs.add(line)
                    }
                    parallelStagesMap = jobs.collectEntries {
                        ["${it}" : generateStage(it)]
                    }
                }
                script{
                    parallel parallelStagesMap
                }
            }
        }
        }
    }

}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>